{# Stalker a Production Asset Management System
 Copyright (C) 2009-2013 Erkan Ozgur Yilmaz
 
 This file is part of Stalker.
 
 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation;
 version 2.1 of the License.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
#}
<div id='list_shots'>
    {% if has_permission('Create_Shot') %}
        <button id='list_shots_create_shot_button'>New Shot</button>
    {% endif %}
    <div id='shots_data_grid'></div>
</div>
<script type='text/javascript'>
    require([
        'dijit/registry',
        'dojo/data/ObjectStore',
        "dgrid/List",
        "dgrid/Grid",
        "dgrid/Selection",
        "dgrid/Keyboard",
        "dojo/_base/declare",
        "dgrid/editor",
        'dojo/store/Memory',
        'dojo/store/JsonRest',
        'stalker/dialogs',
        'stalker/fieldUpdater',
        'stalker/dialogCaller',
        'dojo/on',
        'dojo/query',
        'dojo/domReady!'],
            function (registry, ObjectStore, List, Grid, Selection, Keyboard,
                      declare, editor, Memory, JsonRest, dialogs, fieldUpdater,
                      dialogCaller, on, query) {

                var StandardGrid = declare([Grid, Selection, Keyboard]);
                var shots_data_grid = new StandardGrid({
                    id: 'shots_data_grid',
                    width: '100%',
                    autoHeight: true
                }, 'shots_data_grid');

                {% if has_permission('Create_Shot') %}
                    var create_shot_button = dialogCaller({
                        label: 'New Shot',
                        dialog_id: 'shot_dialog',
                        content_creator: dialogs.create_shot_dialog,
                        attach_to: 'list_shots_create_shot_button',
                        related_field_updater: shot_data_grid_updater,
                        data_id: '{{ project.id }}'
                    });
                    create_shot_button.startup();
                {% endif%}


                var status_memory = new JsonRest({
                    target: 'get/statuses_for/Shot'
                });

                status_memory.query().then(function (data) {
                    shot_data_grid_updater();
                });


                function shot_data_grid_updater() {

                    var shot_memory = new JsonRest({
                        target: '/get/shots/{{ project.id }}'
                    });

                    shot_memory.query().then(function (data) {

                        var columns = [
                            {
                                label: "Thumbnail",
                                field: 'thumbnail',
                                sortable: false,
                                get: function (object) {
                                    return object; // return entire item for formatter to use
                                },
                                formatter: function (value) {
                                    return '<img width= "100px"; src="{{ request.static_url("stalker:static/stalker/images/Placeholder_shot.png") }}">';
                                }
                            },
                            {
                                field: 'status',
                                label: "Status",
                                get: function (object) {
                                    return object; // return entire item for formatter to use
                                },
                                formatter: function (item) {

                                    var bg_color = '#' + item.status_bg_color.toString(16);
                                    var fg_color = '#' + item.status_fg_color.toString(16);


                                    return '<span style="color:' + bg_color + '; background-color:' + bg_color + '; ">....</span><span style="color:' + bg_color + '; ">  ' + item.status + '</span>';
                                }

                            },
                            {
                                field: 'name',
                                label: "Name",
                                get: function (object) {
                                    return object; // return entire item for formatter to use
                                },
                                formatter: function (value) {
                                    {% if has_permission('Read_Shot')%}

                                        var targetPane = "'shots_content_pane'";
                                        var address = "'view/shot/" + value.id + "'";

                                        return '<a href="javascript:redirectLink(' + targetPane + ',' + address + ');">' + value.name + '</a>';
                                    {% else %}

                                        return  value.user_name;

                                    {% endif %}

                                }
                            },
                            {
                                field: 'user_name',
                                label: "Created By",
                                get: function (object) {
                                    return object; // return entire item for formatter to use
                                },
                                formatter: function (value) {

                                    {% if has_permission('Read_User')%}

                                        var targetPane = "'central_content'";
                                        var address = "'view/user/" + value.user_id + "'";

                                        return '<a href="javascript:redirectLink(' + targetPane + ',' + address + ');">' + value.user_name + '</a>';
                                    {% else %}

                                        return  value.user_name;

                                    {% endif %}
                                }
                            },
                            {
                                field: 'sequences',
                                label: "Sequences",
                                get: function (object) {
                                    return object; // return entire item for formatter to use
                                },
                                formatter: function (value) {
                                    return value.sequences + '<br/>';
                                }
                            },
                            {
                                field: 'description',
                                label: "Description"
                            }
                        ];

                        shots_data_grid.renderArray(data);
                        shots_data_grid.set('columns', columns);

                    });
                }
            });
</script>

