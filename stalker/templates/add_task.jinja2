<div class='dijitDialogPaneContentArea'> 
  <form id='add_task_form'>
    <table style='width: 100%;'>
      {# TASK OF TYPE
      
      Tasks should be assigned to a TaskableEntity while they are created. So the
      attribute task_of should be chosen by using a selection box. The user can
      filter the type of the taskable entity by selecting the type of the
      TaskableEntity from a list containing "Project, Sequence, Shot or Asset" then
      another Filtering select should be filled with appropriate entities.
      
      Tasks are created under a Project, Sequence, Shot or an Asset detail page. So
      we should be aware of who is going to be placed to the task_of attribute.
      
      #}
    
      {# TASK_OF #}
      <tr>
        <td class='label_column'>
          <label for='task_task_of'>Task Of</label>
        </td>
        <td class='input_column'>
          <input id='task_task_of'>
        </td>
      </tr>
    
      {# NAME #}
      <tr>
        <td class='label_column'>
          <label for='task_name'>Name</label>
        </td>
        <td class='input_column'>
          <input id='task_name'>
        </td>
      </tr>
      
      {# DESCRIPTION #}
      <tr>
        <td class='label_column'>
          <label for='task_description'>Description</label>
        </td>
        <td class='input_column'>
          <input id='task_description'>
        </td>
      </tr>
      
      {# MILESTONE
      is it a Milestone or not
      this should disable the resources field, without emptying it
      #}
      <tr>
        <td class='label_column'>
          <label for='task_is_milestone'>Is Milestone</label>
        </td>
        <td class='input_column'>
          <input id="task_is_milestone" type="checkbox">
        </td>
      </tr>
      
      {# RESOURCES #}
      <tr>
        <td class='label_column'>
          <label for='task_resources'>Resources</label>
        </td>
        <td class='input_column'>
          <input id='task_resources'>
        </td>
      </tr>
      
      {# STATUS #}
      <tr>
        <td class='label_column'>
         <label for='task_status'>Status</label>
        </td>
        {%  if not status_list %}
          {# There is no status List so add a button to call add StatusList #}
          <td class='input_column'>
            --NO STATUS LIST FOR SHOT--
          </td>
          <td class='button_column'>
            <button id='task_add_status_list_button'>Add New Status List</button>
          </td>
        {% else %}
          {# There are a suitable StatusList just task the statuses #}
          <td class='input_column'>
            <input id='task_status'>
          </td>
          <td class='button_column'>
            <button id='task_edit_status_list_button'>Edit</button>
          </td>
        {% endif %}
      </tr>
      
    </table>
  </form>
</div>

<div class='dijitDialogPaneActionBar'>
  <button id='task_add_button'>Add</button>
  <button id='task_cancel_button'>Cancel</button>
</div>

<script type='text/javascript'>
  require(['dijit/registry', 'dojo/request/xhr', 'dojo/on',
    'dojo/store/Memory', 'dijit/form/Form', 'dijit/form/ValidationTextBox',
    'dijit/form/TextBox', 'dijit/form/FilteringSelect',
    'dijit/form/ComboBox', 'dijit/form/Button', 'dijit/form/CheckBox',
    'dojox/form/MultiComboBox', 'dojo/store/JsonRest',
    'dojo/ready'
  ],
  function(registry, xhr, on, Memory, Form, ValidationTextBox, TextBox,
           FilteringSelect, ComboBox, Button, CheckBox, MultiComboBox,
           JsonRest){
    
    // ***********************************************************************
    // FORM
    var add_task_form = new Form({
      id: 'add_task_form',
      method: 'POST',
      onSubmit: function(event){
        if (this.validate()){
          
          // get the form data
          var form_data = {};
          var myFormData = dijit.byId('add_task_form').get('value');
          form_data.name = myFormData.name;
          form_data.description = myFormData.description;
{#          form_data.project_id = myFormData.project;#}
{#          form_data.sequence_id = myFormData.sequence;#}
{#          form_data.type = myFormData.type;#}
{#          form_data.status_id = myFormData.status;#}
          form_data.submitted = 'add';
          
          var deferred = xhr.post(
            '{{ request.route_url(
                "add_task",
                taskable_entity_id=taskable_entity.id) }}',
            {
              method: 'POST',
              data: form_data
            }
          );
          
          // update the caller dialog
          var dialog = dijit.byId('add_task_dialog');
          var parent = dialog.get('parent');
          if (parent != null){
            parent.refresh();
          }
          
          // destroy dialog
          dialog.destroyRecursive();
        }
      }
    }, 'add_task_form');
    
    add_task_form.get_form_data = function(){
      {# returns the data currently entered in the form
      
      this can be used to fill the form and also for posting data
      #}
      // prepare data to be submitted
    };
    
    // add the restore_form_data function
    add_task_form.restore_form_data = function(form_data){
      this.set('value', form_data);
    };
    
    // ***********************************************************************
    // TASK OF
    var task_of = new TextBox({
      name: 'task_of',
      label: 'Task Of',
      value: '{{ taskable_entity.name }} ({{ taskable_entity.entity_type }})',
      disabled: true
    }, 'task_task_of');
    task_of.startup();
    
    // ***********************************************************************
    // NAME
    var name_textBox = new ValidationTextBox({
      name: 'name',
      label: 'Name',
      value: '',
      placeHolder: 'Enter a name',
      required: true
    }, 'task_name');
    name_textBox.startup();
    
    // ***********************************************************************
    // DESCRIPTION
    var description_textBox = new TextBox({
      name: 'description',
      label: 'Description',
      placeHolder: 'Enter description'
    }, 'task_description');
    description_textBox.startup();
    
    // ***********************************************************************
    // IS MILESTONE
    var is_milestone_checkBox = new CheckBox({
      name: 'is_milestone_checkBox',
      label: 'Is Milestone',
      value: 'checked',
      checked: false
    });
    is_milestone_checkBox.startup();
    
    // ***********************************************************************
    // RESOURCES
    var users_jsonRest = new JsonRest({
      target:"get/users"
    });
    
    var resources_multiComboBox = new MultiComboBox({
      searchAttr: 'name'
    }, "task_resources");
    resources_multiComboBox.startup();
    
    var result = users_jsonRest.query().then(function(data){
      var user_memory = new Memory({data: data});
      resources_multiComboBox.set('store', user_memory);
    });
    
    // ***********************************************************************
    // STATUS OR STATUS_LIST
    {% if not status_list %}
      // ADD STATUS LIST BUTTON
      var add_status_list_button = create_add_data_button(
        dijit.byId('add_task_form').getParent(),
        'Add',
        'add_status_list_dialog',
        create_add_status_list_dialog,
        'task_add_status_list_button'
      );
      add_status_list_button.startup();
    {% else %}
      // ADD STATUS
      var status_memory = new Memory({
        data: [
          {% for status in status_list.statuses %}
            {
              name: '{{ status.name }} / {{ status.code }}',
              id: '{{ status.id }}'
            },
          {% endfor %}
        ]
      });
      
      var status_select = new FilteringSelect({
        name: 'status',
        required: true,
        store: status_memory,
        value: status_memory.data[0].id
      }, 'task_status');
      status_select.startup();
    {% endif %}
    
    // EDIT STATUS LIST BUTTON
    var edit_status_list_button = create_edit_data_button(
      dijit.byId('add_task_form').getParent(),
      'Edit',
      'edit_status_list_dialog',
      create_edit_status_list_dialog,
      'task_edit_status_list_button',
      function(){
        return {{ status_list.id }};
      },
      add_task_form.get('value')
    );
    edit_status_list_button.startup();
    
    // ********************************************************************
    // ADD BUTTON
    var add_button = new Button({
      label: 'Add',
      type: 'button',
      onClick: function(){
        return add_task_form.submit();
      }
    }, 'task_add_button');
    add_button.startup();
    
    // ********************************************************************
    // CANCEL BUTTON
    var cancel_button = new Button({
      label: 'Cancel',
      type: 'button',
      onClick: function(){
        dijit.byId('add_task_dialog').destroyRecursive();
      }
    }, 'task_cancel_button');
    cancel_button.startup();
    
    add_task_form.startup();
    
  });
</script>

