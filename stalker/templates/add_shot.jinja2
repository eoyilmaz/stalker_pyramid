<div class='dijitDialogPaneContentArea'> 
  <form id='add_shot_form'>
    <table style='width: 100%;'>
      
      {# NAME #}
      <tr>
        <td class='label_column'>
          <label for='shot_name'>Name</label>
        </td>
        <td class='input_column'>
          <input id='shot_name'>
        </td>
      </tr>
      
      {# CODE #}
      <tr>
        <td class='label_column'>
          <label for='shot_code'>Code</label>
        </td>
        <td class='input_column'>
          <input id='shot_code'>
        </td>
      </tr>
      
      {# PROJECT #}
      <tr>
        <td class='label_column'>
          <label for='shot_project'>Project</label>
        </td>
        <td class='input_column'>
          <input id='shot_project'>
        </td>
      </tr>
    
      {# SEQUENCE #}
      <tr>
        <td class='label_column'>
          <label for='shot_sequence'>Sequence</label>
        </td>
        <td class='input_column'>
          <input id='shot_sequence'>
        </td>
        <td class='button_column'>
          <button id='shot_add_sequence_button'>Add</button>
          <button id='shot_edit_sequence_button'>Edit</button>
        </td>
      </tr>
      
      {# STATUS LIST #}
      <tr>
        <td class='label_column'>
          <label for='shot_status_list'>Status List</label>
        </td>
        <td class='input_column'>
          <input id='shot_status_list'>
        </td>
        <td class='button_column'>
          <button id='shot_add_status_list_button'>Add</button>
          <button id='shot_edit_status_list_button'>Edit</button>
        </td>
      </tr>
      
      {# STATUS #}
      <tr>
        <td class='label_column'>
          <label for='shot_status'>Status</label>
        </td>
        <td class='input_column'>
          <input id='shot_status'>
        </td>
      </tr>

    </table>      
  </form>
</div>

<div class='dijitDialogPaneActionBar'>
  <button id='shot_add_button'>Add</button>
  <button id='shot_cancel_button'>Cancel</button>
</div>

<script type='text/javascript'>
  require(['dijit/registry', 'dojo/store/Memory', 'dijit/form/Form',
    'dijit/form/ValidationTextBox', 'dijit/form/TextBox',
    'dijit/form/FilteringSelect', 'dijit/form/ComboBox', 'dijit/form/Button',
    'dojo/store/JsonRest', 'stalker/submitForm', 'stalker/fieldUpdater',
    'stalker/dialogCaller', 'dojo/ready'],
    function(registry, Memory, Form, ValidationTextBox, TextBox,
             FilteringSelect, ComboBox, Button, JsonRest, submitForm,
             fieldUpdater, dialogCaller){
      
      // **********************************************************************
      // Form
      var add_shot_form = new Form({
        id: 'add_shot_form'
      }, 'add_shot_form');
      
      
      
      
      // **********************************************************************
      // Name
      var name_textBox = new ValidationTextBox({
        name: 'name',
        label: 'Name',
        placeHolder: 'Enter a name',
        required: true
      }, 'shot_name');
      name_textBox.startup();
      
      
      
      
      // **********************************************************************
      // Code
      var code_textBox = new TextBox({
        name: 'code',
        label: 'Code',
        value: '',
        placeHolder: 'Enter a code'
      }, 'shot_code');
      name_textBox.startup();



      
      // **********************************************************************
      // Project
      var project_filtering_select;

      {% if project %}
        project_filtering_select = new TextBox({
          name: 'project_id',
          label: 'Project',
          value: '{{ project.name }} ({{ project.entity_type }})',
          disabled: true
        }, 'shot_project');
      project_filtering_select.startup();

      {% else %}
        var project_memory = new Memory({
          data: [
            {% for project in projects %}
              {
                name: '{{ project.name }}',
                id: '{{ project.id }}'
              },
            {% endfor %}
          ]
        });

      project_filtering_select = new FilteringSelect({
        name: 'project_id',
        required: true,
        store: project_memory,
        placeHolder: 'Select A Project',
        onChange: function(){
          sequence_field_updater();
        }
      }, 'shot_project');
      project_filtering_select.startup();
      {% endif %}


      // **********************************************************************
      // Sequence
      var sequence_memory = new JsonRest({
        target: '/get/sequences/'
      });

      var sequence_filtering_select = new FilteringSelect({
        name: 'sequence_id',
        required: true,
        disabled: true,
        label: 'Sequence'
      }, 'shot_sequence');
      sequence_filtering_select.startup();


      // The Updater
      var sequence_field_updater;

      {% if project %}

        sequence_field_updater = fieldUpdater({
          memory: sequence_memory,
          query_data: function(){
            return {{ project.id }};
          },
          widget: sequence_filtering_select
        });
        sequence_filtering_select.set('disabled', false);
        sequence_field_updater();

      {% else %}
        sequence_field_updater = fieldUpdater({
          memory: sequence_memory,
          query_data: function(){
            sequence_filtering_select.set('disabled', false);
            return project_filtering_select.get('value');
          },
          widget: sequence_filtering_select
        });
      {% endif %}

        // Add Sequence Button
      var add_sequence_button = dialogCaller({
        label: 'Add',
        dialog_id: 'add_sequence_dialog',
        content_creator: create_add_sequence_dialog,
        attach_to: 'shot_add_sequence_button',
        related_field_updater: sequence_field_updater,
        data_id: function(){
          return project_filtering_select.get('value');
        }
      });
      add_sequence_button.startup();
      
      // Edit Sequence Button
      var edit_sequence_button = dialogCaller({
        label: 'Edit',
        dialog_id: 'edit_sequence_dialog',
        content_creator: create_edit_sequence_dialog,
        attach_to: 'shot_edit_sequence_button',
        related_field_updater: sequence_field_updater,
        data_id: function(){
          return sequence_filtering_select.get('value')
        }

      });
      edit_sequence_button.startup();
      
      
      
      
      // **********************************************************************
      // Status_List
      //
      // The Memory
      var status_list_memory = new JsonRest({
        target: 'get/status_lists_for/Shot'
      });
      
      // The Field
      var status_list_filtering_select = new FilteringSelect({
        name: 'status_list_id',
        label: 'Status List',
        required: true,
        onChange: function(){
          status_updater({animate: true});
        }
      }, 'shot_status_list');
      status_list_filtering_select.startup();
      
      // The Updater
      var status_list_field_updater = fieldUpdater({
        'memory': status_list_memory,
        'widget': status_list_filtering_select
      });
      status_list_field_updater({animate: false});
      
      // Add Status List Button
      var add_status_list_button = dialogCaller({
        label: 'Add',
        dialog_id: 'add_status_list_dialog',
        content_creator: create_add_status_list_dialog,
        attach_to: 'shot_add_status_list_button',
        related_field_updater: status_list_field_updater,
        data_id: 'Shot'
      });
      add_status_list_button.startup();
      
      // Edit Status List Button
      var edit_status_list_button = dialogCaller({
        label: 'Edit',
        dialog_id: 'edit_status_list_dialog',
        content_creator: create_edit_status_list_dialog,
        attach_to: 'shot_edit_status_list_button',
        related_field_updater: status_list_field_updater,
        data_id: function(){
          return status_list_filtering_select.get('value');
        }
      });
      edit_status_list_button.startup();
      
      
      
      
      // **********************************************************************
      // Status
      //
      // The Memory
      var status_memory = new JsonRest({
        target: 'get/statuses_of/'
      });
      
      // The Field
      var status_filtering_select = new FilteringSelect({
        name: 'status_id',
        label: 'Status',
        required: true,
        store: status_memory,
        disabled: true
      }, 'shot_status');
      status_filtering_select.startup();
      
      // The Updater
      var status_updater = fieldUpdater({
        memory: status_memory,
        query_data: function(){
          status_filtering_select.set('disabled', false);
          var widget = registry.byId('shot_status_list');
          return widget.get('value');
        },
        widget: status_filtering_select
      });
      // don't call the updater now, the status_list may not been set yet!!!
      
      
      
      
      // **********************************************************************
      // Add Button
      var add_button = new Button({
        label: 'Add',
        type: 'button',
        onClick: function(){
          submitForm({
            dialog: registry.byId('add_shot_dialog'),
            form: add_shot_form,
            additional_data: {
              submitted: 'add'
            },
            url: '{{ request.route_url('add_shot', project_id=project.id) }}',
            method: 'POST'
          });
        }
      }, 'shot_add_button');
      add_button.startup();
      
      
      
      
      // **********************************************************************
      // Cancel Button
      var cancel_button = new Button({
        label: 'Cancel',
        type: 'button',
        onClick: function(){
          registry.byId('add_shot_dialog').destroyRecursive();
        }
      }, 'shot_cancel_button');
      cancel_button.startup();
      
      add_shot_form.startup();
      
  });
</script>
