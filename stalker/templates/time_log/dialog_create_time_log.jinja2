{# Stalker a Production Asset Management System
 Copyright (C) 2009-2013 Erkan Ozgur Yilmaz
 
 This file is part of Stalker.
 
 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation;
 version 2.1 of the License.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
#}
<div class='dijitDialogPaneContentArea'>
    <form id='time_log_form'>
        <table style='width: 100%'>

            {# TASK #}
            <tr>
                <td class='label_column'>
                    <label for='time_log_task'>Task</label>
                </td>
                <td class='input_column'>
                    <input id='time_log_task'>
                </td>
            </tr>

            {# RESOURCE #}
            <tr>
                <td class='label_column'>
                    <label for='time_log_resource'>Resource</label>
                </td>
                <td class='input_column'>
                    <input id='time_log_resource'>
                </td>
            </tr>

            {# START #}
            <tr>
                <td class='label_column'>
                    <label for='time_log_start_date'>Start Date</label>
                </td>
                <td class='input_column'>
                    <input id='time_log_start_date'>
                    <input id='time_log_start_time'>
                </td>
            </tr>

            {# END #}
            <tr>
                <td class='label_column'>
                    <label for='time_log_end_date'>End Date</label>
                </td>
                <td class='input_column'>
                    <input id='time_log_end_date'>
                    <input id='time_log_end_time'>
                </td>
            </tr>

            {# HOURS TO COMPLETE#}
            <tr>
                <td class='label_column'>
                    <label for='time_log_hours_to_complete'>Hours To
                                                            Complete</label>
                </td>
                <td class='input_column'>
                    <input id='time_log_hours_to_complete'>

                    <div style='float: left; margin-left: 3px; margin-top: 2px'>
                        <input id='time_log_is_complete' type='checkbox'>
                        <label for='time_log_is_complete'>is complete?</label>
                    </div>
                </td>
            </tr>

            {# NOTES #}
            <tr>
                <td class='label_column'>
                    <label for='time_log_notes'>Notes</label>
                </td>
                <td class='input_column'>
                    <input id='time_log_notes'>
                </td>
            </tr>

        </table>
    </form>
</div>

<div class='dijitDialogPaneActionBar'>
    <button id='time_log_ok_button'>Ok</button>
    <button id='time_log_cancel_button'>Cancel</button>
</div>

<script type="text/javascript">
    require([
        'dijit/form/Form',
        'dijit/form/TextBox',
        'dijit/form/FilteringSelect',
        'dijit/form/Button',
        'dijit/form/SimpleTextarea',
        'dijit/form/NumberSpinner',
        'dijit/form/CheckBox',
        'dijit/form/DateTextBox',
        'dijit/form/TimeTextBox',

        'dojo/store/Memory',
        'dojo/date/stamp',

        'stalker/submitForm',

        'dojo/domReady!'
    ], function (Form, TextBox, FilteringSelect, Button, SimpleTextarea,
                 NumberSpinner, CheckBox, DateTextBox, TimeTextBox, Memory,
                 stamp, submitForm) {

        // ****************************************************************
        // Form
        var time_log_form = new Form({}, 'time_log_form');
        var dialog = time_log_form.getParent();

        // ****************************************************************
        // Task
        var task_textBox = new TextBox({
            name: 'task_name',
            label: 'Task',
            value: '{{ task.name }}',
            disabled: true,
            required: true
        }, 'time_log_task');
        task_textBox.startup();

        // ****************************************************************
        // Resource
        var resource_memory = new Memory({
            data: [
                {% for resource in task.resources %}
                    {
                        name: '{{ resource.name }}',
                        id: {{ resource.id }}
                    },
                {% endfor %}
            ]
        });

        var resource_filteringSelect = new FilteringSelect({
            name: 'resource_id',
            label: 'Resource',
            store: resource_memory,
            required: true
        }, 'time_log_resource');
        resource_filteringSelect.startup();

        // if there is only 1 resource automatically select it
        if (resource_memory.data.length == 1) {
            resource_filteringSelect.set('value', resource_memory.data[0].id);
        }


        // ****************************************************************
        // Start Date

        // Date
        var start_dateTextBox = new DateTextBox({
            name: 'start_date',
            label: 'Start Date',
            value: new Date(),// set it today by default
            required: true,
            datePattern: 'dd-mm-yyyy',
            style: 'width: 90px;',
            onChange: function () {
                if (this.focused) {
                    update_hours_to_complete();
                }
            }
        }, 'time_log_start_date');
        start_dateTextBox.startup();

        // Time
        var start_time_timeTextBox = new TimeTextBox({
            name: 'start_time',
            value: 'T09:00:00',
            style: 'width: 85px;',
            constraints: {
                timePattern: 'HH:mm:ss',
                clickableIncrement: 'T01:00:00',
                visibleIncrement: 'T01:00:00',
                visibleRange: 'T01:00:00'
            }
        }, 'time_log_start_time');
        start_time_timeTextBox.startup();


        // ****************************************************************
        // End Date

        // Date
        var end_dateTextBox = new DateTextBox({
            name: 'end_date',
            label: 'End Date',
            value: new Date(), // set it today by default
            required: true,
            datePattern: 'dd-mm-yyyy',
            style: 'width: 90px;',
            onChange: function () {
                if (this.focused) {
                    update_hours_to_complete();
                }
            }
        }, 'time_log_end_date');
        end_dateTextBox.startup();

        // Time 
        var end_time_timeTextBox = new TimeTextBox({
            name: 'end_time',
            value: 'T18:00:00',
            style: 'width: 85px',
            constraints: {
                timePattern: 'HH:mm:ss',
                clickableIncrement: 'T01:00:00',
                visibleIncrement: 'T01:00:00',
                visibleRange: 'T01:00:00'
            },
            onChange: function () {
                if (this.focused) {
                    update_hours_to_complete();
                }
            }
        }, 'time_log_end_time');
        end_time_timeTextBox.startup();

        // ****************************************************************
        // Hours To Complete
        var hours_to_complete_numberSpinner = new NumberSpinner({
            name: 'hours_to_complete',
            value: 0,
            constraints: {min: 0},
            style: 'width: 90px; float: left;',
            disabled: true
        }, 'time_log_hours_to_complete');
        hours_to_complete_numberSpinner.startup();

        // CheckBox
        var is_complete_checkBox = new CheckBox({
            name: 'is_complete',
            value: 'checked',
            label: 'is complete?',
            checked: false,
            onChange: function (new_value) {
                // disable the hours_to_complete if checked
                // and set the value to 0
                if (new_value) {
                    hours_to_complete_numberSpinner.set('value', 0);
                    extra_hours_numberSpinner.set('disabled', true);
                    extra_hours_numberSpinner.set('value', 0);
                } else {
                    extra_hours_numberSpinner.set('disabled', false);
                    update_hours_to_complete();
                }
            }
        }, 'time_log_is_complete');

        // ****************************************************************
        // Calculate remaining hours
        var update_hours_to_complete = function () {
            // total hours of time_logs should have been given by Stalker
            // calculate the remaining hours
            var total_logged_seconds = {{ task.total_logged_seconds }};
            var remaining_seconds = {{ task.remaining_seconds }};

            // get the time difference from interface
            var start_date = new Date(start_dateTextBox.value);
            var end_date = new Date(end_dateTextBox.value);

            var start_time = new Date(start_time_timeTextBox.value);
            var end_time = new Date(end_time_timeTextBox.value);

            start_date.setHours(start_time.getHours());
            end_date.setHours(end_time.getHours());

            var timing_resolution = 3600000; // 1 hour
            var duration_millis = end_date.getTime() - start_date.getTime();
            // round the duration millis
            duration_millis = (((duration_millis + timing_resolution * 0.5) / timing_resolution) >> 0 ) * timing_resolution;
            var duration_seconds = duration_millis / 1000;
            // subtract already logged time

            var remaining_seconds_after_this_time_log = remaining_seconds - duration_seconds;
            var remaining_hours_after_this_time_log = remaining_seconds_after_this_time_log / 3600;

            hours_to_complete_numberSpinner.set('value', remaining_hours_after_this_time_log);
        };

        // run it to auto calculate the remaining hours first
        update_hours_to_complete();

        // ****************************************************************
        // Notes
        var notes = new SimpleTextarea({
            name: 'notes',
            style: 'width: 176px;'
        }, 'time_log_notes');
        notes.startup();

        // ****************************************************************
        // Ok Button
        var ok_button = new Button({
            label: 'Ok',
            type: 'button',
            onClick: function () {

                // first warn the user about their negative remaining hours
                if (hours_to_complete_numberSpinner.value < 0) {
                    alert('You are reporting \n\n' +
                            Math.abs(hours_to_complete_numberSpinner.value) +
                            ' extra hours'
                    );
                }

                submitForm({
                    dialog: dialog,
                    form: time_log_form,
                    additional_data: {
                        start_date: stamp.toISOString(start_dateTextBox.value),
                        end_date: stamp.toISOString(end_dateTextBox.value),
                        start_time: stamp.toISOString(start_time_timeTextBox.value),
                        end_time: stamp.toISOString(end_time_timeTextBox.value)
                    },
                    url: '{{ request.route_url('create_time_log', task_id=task.id) }}',
                    method: 'POST'
                });
            }
        }, 'time_log_ok_button');
        ok_button.startup();


        // ****************************************************************
        // Cancel Button
        var cancel_button = new Button({
            label: 'Cancel',
            type: 'button',
            onClick: function () {
                dialog.destroyRecursive();
            }
        }, 'time_log_cancel_button');
        cancel_button.startup();


        time_log_form.startup();


    });
</script>
