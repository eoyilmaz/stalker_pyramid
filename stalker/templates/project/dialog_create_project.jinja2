{# Stalker a Production Asset Management System
 Copyright (C) 2009-2013 Erkan Ozgur Yilmaz
 
 This file is part of Stalker.
 
 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation;
 version 2.1 of the License.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
#}
<div class='dijitDialogPaneContentArea'>
    <form id='project_form'>
        <table style='width: 100%;'>

            {# NAME #}
            <tr>
                <td class='label_column'>
                    <label for='project_name'>Name</label>
                </td>
                <td class='input_column'>
                    <input id='project_name'>
                </td>
            </tr>

            {# CODE #}
            <tr>
                <td class='label_column'>
                    <label for='project_code'>Code</label>
                </td>
                <td class='input_column'>
                    <input id='project_code'>
                </td>
            </tr>

            {# START DATE #}
            <tr>
                <td class='label_column'>
                    <label for='project_start'>Start Date</label>
                </td>
                <td class='input_column'>
                    <input id='project_start'>
                </td>
            </tr>

            {# END DATE #}
            <tr>
                <td class='label_column'>
                    <label for='project_end'>End Date</label>
                </td>
                <td class='input_column'>
                    <input id='project_end'>
                </td>
            </tr>

            {# DURATION #}
            <tr>
                <td class='label_column'>
                    <label for='project_duration'>Duration</label>
                </td>
                <td class='input_column'>
                    <input id="project_duration">
                </td>
            </tr>

            {# IMAGE FORMAT #}
            <tr>
                <td class='label_column'>
                    <label for='project_image_format'>Image Format</label>
                </td>
                <td class='input_column'>
                    <input id='project_image_format'>
                </td>
                <td class='button_column'>
                    <button id='project_create_image_format_button'>New
                    </button>
                    <button id='project_update_image_format_button'>Update
                    </button>
                </td>
            </tr>

            {# FPS #}
            <tr>
                <td class='label_column'>
                    <label for='project_fps'>FPS</label>
                </td>
                <td class='input_column'>
                    <input id='project_fps'>
                </td>
            </tr>

            {# REPOSITORY #}
            <tr>
                <td class='label_column'>
                    <label for='project_repository'>Repository</label>
                </td>
                <td class='input_column'>
                    <input id='project_repository'>
                </td>
                <td class='button_column'>
                    <button id='project_create_repository_button'>New</button>
                    <button id='project_update_repository_button'>Update
                    </button>
                </td>
            </tr>

            {# STRUCTURE #}
            <tr>
                <td class='label_column'>
                    <label for='project_structure'>Structure</label>
                </td>
                <td class='input_column'>
                    <input id='project_structure'>
                </td>
                <td class='button_column'>
                    <button id='project_create_structure_button'>New</button>
                    <button id='project_update_structure_button'>Update
                    </button>
                </td>
            </tr>

            {# LEAD #}
            <tr>
                <td class='label_column'>
                    <label for='project_lead'>Lead</label>
                </td>
                <td class='input_column'>
                    <input id='project_lead'>
                </td>
                <td class='button_column'>
                    <button id='project_create_lead_button'>New</button>
                    <button id='project_update_lead_button'>Update</button>
                </td>
            </tr>

            {# STATUS#}
            <tr>
                <td class='label_column'>
                    <label for='project_status'>Status</label>
                </td>
                <td class='input_column'>
                    <input id='project_status'>
                </td>
                <td class='button_column'>
                    <button id='project_add_status_button'>Add Status</button>
                </td>
            </tr>

        </table>
    </form>
</div>

<div class='dijitDialogPaneActionBar'>
    <button id='project_submit_button'>Ok</button>
    <button id='project_cancel_button'>Cancel</button>
</div>

<script type='text/javascript'>
require([
    'dojo/store/JsonRest',
    'dojo/date',
    'dojo/date/stamp',
    'dojo/date/locale',

    'dijit/registry',
    'dijit/form/Form',
    'dijit/form/ValidationTextBox',
    'dijit/form/TextBox',
    'dijit/form/NumberTextBox',
    'dijit/form/FilteringSelect',
    'dijit/form/Button',
    'dijit/form/DateTextBox',

    'stalker/dialogs',
    'stalker/submitForm',
    'stalker/fieldUpdater',
    'stalker/dialogCaller',
    'stalker/dialogCreator',

    'dojo/domReady!'
], function (JsonRest, date, stamp, locale, registry, Form, ValidationTextBox,
             TextBox, NumberTextBox, FilteringSelect, Button, DateTextBox,
             dialogs, submitForm, fieldUpdater, dialogCaller, dialogCreator) {

    var url;
    var name;
    var code;
    var start_date_value = new Date(); // set it today by default
    var end_date_value = new Date(); // set it today by default
    var imf_filteringSelect_selected_value = '';
    var fps = 25;
    var repository_filteringSelect_selected_value = '';
    var structure_filteringSelect_selected_value = '';
    var lead_filteringSelect_selected_value = '';
    var status_filteringSelect_selected_value = '';

    {% if mode=='CREATE' %}
        url = '{{ request.route_url("create_project") }}';
    {% elif mode=='UPDATE' %}
        url = '{{ request.route_url("update_project") }}';
        name = '{{ project.name }}';
        code = '{{ project.code }}';
        start_date_value = new Date(parseInt({{ project.start.strftime('%s') }}) * 1000);
        end_date_value = new Date(parseInt({{ project.end.strftime('%s') }}) * 1000);
        imf_filteringSelect_selected_value = '{{ project.image_format.id }}';
        fps = {{ project.fps }};
        repository_filteringSelect_selected_value = '{{ project.repository.id }}';
        structure_filteringSelect_selected_value = '{{ project.structure.id }}';
        lead_filteringSelect_selected_value = '{{ project.lead.id }}';
        status_filteringSelect_selected_value = '{{ project.status.id }}';
    {% endif %}


    // ************************************************************************
    // Form
    var project_form = new Form({}, 'project_form');

    // get the dialog
    var dialog = project_form.getParent();


    // ************************************************************************
    // Name
    var name_textBox = new ValidationTextBox({
        name: 'name',
        label: 'Name',
        required: true,
        placeHolder: 'Enter a name',
        value: name
    }, 'project_name');
    name_textBox.startup();


    // ************************************************************************
    // Code
    var code_textBox = new ValidationTextBox({
        name: 'code',
        label: 'Code',
        required: true,
        placeHolder: 'Enter a code',
        value: code,
        {% if mode=='UPDATE' %}
            disabled: true
            // cannot change the code for an already created project
        {% endif %}
    }, 'project_code');
    name_textBox.startup();


    // **********************************************************************
    // Start Date
    var start_dateTextBox = new DateTextBox({
        name: 'start',
        label: 'Start Date',
        value: start_date_value,
        required: true,
        datePattern: 'dd-mm-yyyy',
        onChange: function () {
            if (this.focused) {
                update_dates(
                        start_dateTextBox.getValue(),
                        end_dateTextBox.getValue(),
                        null
                );
            }
        }
    }, 'project_start');
    start_dateTextBox.startup();

    // **********************************************************************
    // End Date
    var end_dateTextBox = new DateTextBox({
        name: 'end',
        label: 'End Date',
        value: end_date_value,
        required: true,
        datePattern: 'dd-mm-yyyy',
        onChange: function () {
            if (this.focused) {
                update_dates(
                        start_dateTextBox.getValue(),
                        end_dateTextBox.getValue(),
                        null
                );
            }
        }
    }, 'project_end');
    end_dateTextBox.startup();


    // **********************************************************************
    // Duration
    var duration_numberTextBox = new NumberTextBox({
        name: 'duration',
        label: 'Duration',
        value: 0,
        onKeyUp: function () {
            if (this.focused) {
                update_dates(
                        start_dateTextBox.getValue(),
                        null,
                        this.get('value')
                )
            }
        }
    }, 'project_duration');
    duration_numberTextBox.startup();

    var update_dates = function (start, end, duration) {
        if (duration == null) {
            // update the duration
            duration_numberTextBox.set(
                    'value',
                    date.difference(start, end)
            );
        } else if (end == null) {
            // update end date
            end_dateTextBox.set(
                    'value',
                    date.add(
                            start,
                            'day',
                            duration
                    )
            );
        }
    };
    update_dates(
        start_dateTextBox.getValue(),
        end_dateTextBox.getValue(),
        null
    );


    // ********************************************************************
    // Image Format
    //
    // The memory
    var imf_memory = new JsonRest({
        target: '/get/image_formats'
    });

    // The Field
    var imf_filteringSelect = new FilteringSelect({
        name: 'image_format',
        label: 'Image Format',
        required: true
    }, 'project_image_format');
    imf_filteringSelect.startup();

    var imf_data_length = 0;

    var set_imf_filteringSelect_value = function (data) {
        // TODO: crossing scopes, this is ugly!!! please fix this!!!
        // data comes from the fieldUpdater
        // the internal vars are coming from outside of the current functions'
        // scope, please pass anything with parameters instead of hacking the
        // scope
        //
        // Yes I know ecmaScript can handle it, but it is not a good practice
        // 
        if (imf_data_length != 0 && imf_data_length < data.length) {
            imf_filteringSelect_selected_value = data[data.length - 1].id;
        }
        imf_filteringSelect.set('value', imf_filteringSelect_selected_value);
        imf_data_length = data.length;
    };

    // ***********
    // The Updater
    //
    // supply a function to refresh the content of the format
    var imf_field_updater = fieldUpdater({
        'memory': imf_memory,
        'widget': imf_filteringSelect,
        'selected': imf_filteringSelect_selected_value,
        'callBack': set_imf_filteringSelect_value
    });

    // run the function once to fill the data for the first time
    imf_field_updater({animate: false});

    // New Image Format Button
    var create_image_format_button = dialogCaller({
        label: 'New',
        dialog_id: 'image_format_dialog',
        content_creator: dialogs.create_image_format_dialog,
        attach_to: 'project_create_image_format_button',
        related_field_updater: imf_field_updater
    });
    create_image_format_button.startup();

    // Update Image Format Button
    var update_image_format_button = dialogCaller({
        label: 'Update',
        dialog_id: 'image_format_dialog',
        content_creator: dialogs.update_image_format_dialog,
        attach_to: 'project_update_image_format_button',
        related_field_updater: imf_field_updater,
        data_id: function () {
            imf_filteringSelect_selected_value = imf_filteringSelect.get('value');
            return imf_filteringSelect_selected_value;
        }
    });
    update_image_format_button.startup();


    // ********************************************************************
    // FPS
    var fps_numberTextBox = new NumberTextBox({
        name: 'fps',
        label: 'FPS',
        value: fps,
        placeHolder: '',
        required: true
    }, 'project_fps');
    fps_numberTextBox.startup();


    // ********************************************************************
    // REPOSITORY
    // The Memory
    var repository_memory = new JsonRest({
        target: '/get/repositories'
    });

    var repository_filteringSelect = new FilteringSelect({
        name: 'repository_id',
        label: 'Repository',
        required: true
    }, 'project_repository');
    repository_filteringSelect.startup();

    var repository_data_length = 0;
    var set_repository_filteringSelect_value = function (data) {
        //
        // TODO: please see my comments on image format callBackFunction
        //
        if (repository_data_length != 0 && repository_data_length < data.length) {
            repository_filteringSelect_selected_value = data[data.length - 1].id;
        }
        repository_filteringSelect.set('value', repository_filteringSelect_selected_value);
        repository_data_length = data.length;
    };

    // The Updater
    var repo_field_updater = fieldUpdater({
        'memory': repository_memory,
        'widget': repository_filteringSelect,
        'selected': repository_filteringSelect_selected_value,
        'callBack': set_repository_filteringSelect_value
    });
    // run the function to fill the data
    repo_field_updater({animate: false});

    // New Repository Button
    var create_repository_button = dialogCaller({
        label: 'New',
        dialog_id: 'repository_dialog',
        content_creator: dialogs.create_repository_dialog,
        attach_to: 'project_create_repository_button',
        related_field_updater: repo_field_updater
    });
    create_repository_button.startup();

    // Update Repository Button
    var update_repository_button = dialogCaller({
        label: 'Update',
        dialog_id: 'repository_dialog',
        content_creator: dialogs.update_repository_dialog,
        attach_to: 'project_update_repository_button',
        related_field_updater: repo_field_updater,
        data_id: function () {
            repository_filteringSelect_selected_value = repository_filteringSelect.get('value');
            return repository_filteringSelect.get('value');
        }
    });
    update_repository_button.startup();


    // ********************************************************************
    // STRUCTURE
    //
    // The memory
    var structure_memory = new JsonRest({
        target: '/get/structures'
    });

    // The Field
    var structure_filteringSelect = new FilteringSelect({
        name: 'structure_id',
        label: 'Structure',
        required: true
    }, 'project_structure');
    structure_filteringSelect.startup();


    var structure_data_length = 0;
    var set_structure_filteringSelect_value = function (data) {

        if (structure_data_length != 0 && structure_data_length < data.length) {
            structure_filteringSelect_selected_value = data[data.length - 1].id;
        }
        structure_filteringSelect.set('value', structure_filteringSelect_selected_value);
        structure_data_length = data.length;
    };

    // The Updater
    var structure_field_updater = fieldUpdater({
        'memory': structure_memory,
        'widget': structure_filteringSelect,
        'selected': structure_filteringSelect_selected_value,
        'callBack': set_structure_filteringSelect_value
    });
    // call the updater to fill the field for the first time
    structure_field_updater({animate: false});

    // New Structure Button
    var create_structure_button = dialogCaller({
        label: 'New',
        dialog_id: 'structure_dialog',
        content_creator: dialogs.create_structure_dialog,
        attach_to: 'project_create_structure_button',
        related_field_updater: structure_field_updater
    });
    create_structure_button.startup();


    // UPDATE STRUCTURE BUTTON
    var update_structure_button = dialogCaller({
        label: 'Update',
        dialog_id: 'structure_dialog',
        content_creator: dialogs.update_structure_dialog,
        attach_to: 'project_update_structure_button',
        related_field_updater: structure_field_updater,
        data_id: function () {
            structure_filteringSelect_selected_value = structure_filteringSelect.get('value');
            return structure_filteringSelect_selected_value;
        }
    });
    update_structure_button.startup();


    // ********************************************************************
    // LEAD
    var lead_memory = new JsonRest({
        target: '/get/users'
    });

    // The Field
    var lead_filteringSelect = new FilteringSelect({
        name: 'lead_id',
        label: 'User',
        required: true
    }, 'project_lead');
    lead_filteringSelect.startup();

    var lead_data_length = 0;
    var set_lead_filteringSelect_value = function (data) {
        if (lead_data_length != 0 && lead_data_length < data.length) {
            lead_filteringSelect_selected_value = data[data.length - 1].id;
        }
        lead_filteringSelect.set('value', lead_filteringSelect_selected_value);
        lead_data_length = data.length;
    };

    // The Updater
    var lead_field_updater = fieldUpdater({
        'memory': lead_memory,
        'widget': lead_filteringSelect,
        'selected': lead_filteringSelect_selected_value,
        'callBack': set_lead_filteringSelect_value
    });
    lead_field_updater({animate: false});

    // New Lead Button
    var create_lead_button = dialogCaller({
        label: 'New',
        dialog_id: 'user_dialog',
        content_creator: dialogs.create_user_dialog,
        attach_to: 'project_create_lead_button',
        related_field_updater: lead_field_updater
    });
    create_lead_button.startup();

    // Update Lead Button
    var update_lead_button = dialogCaller({
        label: 'Update',
        dialog_id: 'user_dialog',
        content_creator: dialogs.update_user_dialog,
        attach_to: 'project_update_lead_button',
        related_field_updater: lead_field_updater,
        data_id: function () {
            lead_filteringSelect_selected_value = lead_filteringSelect.get('value');
            return lead_filteringSelect_selected_value;
        }
    });
    update_lead_button.startup();

    // ********************************************************************
    // Status List
    //
    // The Memory
    var status_memory = new JsonRest({
        target: 'get/statuses_for/Project'
    });

    // The Field
    var status_filteringSelect = new FilteringSelect({
        name: 'status_id',
        label: 'Status',
        required: true
    }, 'project_status');
    status_filteringSelect.startup();


    var update_add_status_button_function = function (data) {
        //
        // if there are no Status,
        //     set the button function to create a status list
        //
        // if there are any Status,
        //     set the button function to update the status list
        //
        if (data.length > 0) { // Some Status exists
            add_status_button.set('onClick', function () {
                var myDialog = dialogCreator({
                    dialog_id: 'status_list_dialog',
                    data_id: 'Project',
                    content_creator: dialogs.update_status_list_dialog,
                    related_field_updater: status_field_updater
                });
                console.debug(myDialog);
                myDialog.show();
            });
        } else { // No Status
            add_status_button.set('onClick', function () {
                var myDialog = dialogCreator({
                    dialog_id: 'status_list_dialog',
                    data_id: 'Project',
                    content_creator: dialogs.create_status_list_dialog,
                    related_field_updater: status_field_updater
                });
                myDialog.show();
            });
        }
    };

    // The Updater
    var status_field_updater = fieldUpdater({
        'memory': status_memory,
        'widget': status_filteringSelect,
        'selected': status_filteringSelect_selected_value,
        'callBack': update_add_status_button_function
    });

    var add_status_button = Button({
        label: 'Add Status'
    }, 'project_add_status_button');


    status_field_updater({animate: true});

    // ********************************************************************
    // Ok Button
    var ok_button = new Button({
        label: 'OK',
        type: 'button',
        onClick: function () {
            submitForm({
                dialog: dialog,
                form: project_form,
                additional_data: {
                    start: stamp.toISOString(start_dateTextBox.value),
                    end: stamp.toISOString(end_dateTextBox.value),
                    {% if mode=='UPDATE' %}
                        'project_id': {{ project.id }}
                    {% endif %}
                },
                url: url,
                method: 'POST'
            });
        }
    }, 'project_submit_button');
    ok_button.startup();

    // ********************************************************************
    // Cancel Button
    var cancel_button = new Button({
        label: 'Cancel',
        type: 'button',
        onClick: function () {
            dialog.destroyRecursive();
        }
    }, 'project_cancel_button');
    cancel_button.startup();

    project_form.startup();
});
</script>

