<!-- Stalker a Production Asset Management System
 Copyright (C) 2009-2013 Erkan Ozgur Yilmaz

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation;
 version 2.1 of the License.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
-->
<div class='dijitDialogPaneContentArea'> 
  <form id='create_project_form'>
    <table style='width: 100%;'>
      
      {# NAME #}
      <tr>
        <td class='label_column'>
          <label for='project_name'>Name</label>
        </td>
        <td class='input_column'>
          <input id='project_name'>
        </td>
      </tr>
      
      {# CODE #}
      <tr>
        <td class='label_column'>
          <label for='project_code'>Code</label>
        </td>
        <td class='input_column'>
          <input id='project_code'>
        </td>
      </tr>

       {# START DATE #}
       <tr>
         <td class='label_column'>
           <label for='project_start'>Start Date</label>
         </td>
         <td class='input_column'>
           <input id='project_start'>
         </td>
        </tr>

        {# END DATE #}
        <tr>
            <td class='label_column'>
                <label for='project_end'>End Date</label>
            </td>
            <td class='input_column'>
                <input id='project_end'>
            </td>
        </tr>

        {# DURATION #}
        <tr>
            <td class='label_column'>
                <label for='project_duration'>Duration</label>
            </td>
            <td class='input_column'>
                <input id="project_duration">
            </td>
        </tr>
  
      {# IMAGE FORMAT #}
      <tr>
        <td class='label_column'>
          <label for='project_image_format'>Image Format</label>
        </td>
        <td class='input_column'>
          <input id='project_image_format'>
        </td>
        <td class='button_column'>
          <button id='project_create_image_format_button'>New</button>
          <button id='project_update_image_format_button'>Update</button>
        </td>
      </tr>
      
      {# FPS #}
      <tr>
        <td class='label_column'>
          <label for='project_fps'>FPS</label>
        </td>
        <td class='input_column'>
          <input id='project_fps'>
        </td>
      </tr>
      
      {# REPOSITORY #}
      <tr>
        <td class='label_column'>
          <label for='project_repository'>Repository</label>
        </td>
        <td class='input_column'>
          <input id='project_repository'>
        </td>
        <td class='button_column'>
          <button id='project_create_repository_button'>New</button>
          <button id='project_update_repository_button'>Update</button>
        </td>
      </tr>
      
      {# STRUCTURE #}
      <tr>
        <td class='label_column'>
          <label for='project_structure'>Structure</label>
        </td>
        <td class='input_column'>
          <input id='project_structure'>
        </td>
        <td class='button_column'>
          <button id='project_create_structure_button'>New</button>
          <button id='project_update_structure_button'>Update</button>
        </td>
      </tr>
      
      {# LEAD #}
      <tr>
        <td class='label_column'>
          <label for='project_lead'>Lead</label>
        </td>
        <td class='input_column'>
          <input id='project_lead'>
        </td>
        <td class='button_column'>
          <button id='project_create_lead_button'>New</button>
          <button id='project_update_lead_button'>Update</button>
        </td>
      </tr>
      
      {# STATUS LIST #}
      <tr>
        <td class='label_column'>
          <label for='project_status_list'>Status List</label>
        </td>
        <td class='input_column'>
          <input id='project_status_list'>
        </td>
        <td class='button_column'>
          <button id='project_create_status_list_button'>New</button>
          <button id='project_update_status_list_button'>Update</button>
        </td>
      </tr>

    </table>      
  </form>
</div>

<div class='dijitDialogPaneActionBar'>
  <button id='project_submit_button'>Ok</button>
  <button id='project_cancel_button'>Cancel</button>
</div>

<script type='text/javascript'>
  require(['dijit/registry',  'dijit/form/Form',
    'dijit/form/ValidationTextBox', 'dijit/form/TextBox',
    'dijit/form/NumberTextBox', 'dijit/form/FilteringSelect',
    'dijit/form/Button', 'dojo/store/JsonRest', 'dojo/date', 'dojo/date/stamp',
    'dojo/date/locale', 'dijit/form/DateTextBox', 'stalker/submitForm',
    'stalker/fieldUpdater', 'stalker/dialogCaller', 'dojo/ready'],
    function(registry,  Form, ValidationTextBox, TextBox,
             NumberTextBox, FilteringSelect, Button, JsonRest,date, stamp, locale,
             DateTextBox, submitForm, fieldUpdater, dialogCaller, ready){
      
      ready(function(){
        // ********************************************************************
        // Form
        var create_project_form = new Form({
          id: 'create_project_form'
        }, 'create_project_form');
        
        
        // ********************************************************************
        // Name
        var name_textBox = new ValidationTextBox({
          name: 'name',
          label: 'Name',
          required: true,
          placeHolder: 'Enter a name'
        }, 'project_name');
        name_textBox.startup();
        
        
        
        
        // ********************************************************************
        // Code
        var code_textBox = new ValidationTextBox({
          name: 'code',
          label: 'Code',
          required: true,
          placeHolder: 'Enter a code'
        }, 'project_code');
        name_textBox.startup();



         // **********************************************************************
         // Start Date
        var start_dateTextBox = new DateTextBox({
          name: 'start',
          label: 'Start Date',
          value: new Date(),// set it today by default
          required: true,
          datePattern: 'dd-mm-yyyy',
          onChange: function(){
            if (this.focused){
              update_dates(
                start_dateTextBox.getValue(),
                end_dateTextBox.getValue(),
                null
                );
              }
            }
        }, 'project_start');
        start_dateTextBox.startup();

        // **********************************************************************
        // End Date
        var end_dateTextBox = new DateTextBox({
            name: 'end',
            label: 'End Date',
            value: new Date(), // set it today by default
            required: true,
            datePattern: 'dd-mm-yyyy',
            onChange: function(){
                if (this.focused){
                    update_dates(
                      start_dateTextBox.getValue(),
                      end_dateTextBox.getValue(),
                      null
                    );
                }
            }
        }, 'project_end');
        end_dateTextBox.startup();




        // **********************************************************************
        // Duration
        var duration_numberTextBox = new NumberTextBox({
          name: 'duration',
          label: 'Duration',
          value: 0,
          onKeyUp: function(){
              if (this.focused){
                  update_dates(
                    start_dateTextBox.getValue(),
                    null,
                    this.get('value')
                  )
              }
          }
        }, 'project_duration');
        duration_numberTextBox.startup();

        var update_dates = function(start, end, duration){
          if (duration == null){
            // update the duration
            duration_numberTextBox.set(
              'value',
              date.difference(start, end)
            );
          } else if (end == null) {
            // update end date
            end_dateTextBox.set(
              'value',
              date.add(
                start,
                'day',
                duration
              )
            );
          }
        };
        //update_dates();
        
        
        
        
        // ********************************************************************
        // Image Format
        // 
        // The memory
        var imf_memory = new JsonRest({
          target: '/get/image_formats'
        });
        
        // The Field
        var imf_filteringSelect = new FilteringSelect({
          name: 'image_format',
          label: 'Image Format',
          required: true
        }, 'project_image_format');
        imf_filteringSelect.startup();
        
        // The Updater
        // supply a function to refresh the content of the format
        var imf_field_updater = fieldUpdater({
          'memory': imf_memory,
          'widget': imf_filteringSelect
        });
        // run the function to fill the data for the first time
        imf_field_updater({animate: false});
        
        // New Image Format Button
        var create_image_format_button = dialogCaller({
          label: 'New',
          dialog_id: 'create_image_format_dialog',
          content_creator: create_image_format_dialog_creator,
          attach_to: 'project_create_image_format_button',
          related_field_updater: imf_field_updater
        });
        create_image_format_button.startup();
        
        // Update Image Format Button
        var update_image_format_button = dialogCaller({
          label: 'Update',
          dialog_id: 'update_image_format_dialog',
          content_creator: update_image_format_dialog_creator,
          attach_to: 'project_update_image_format_button',
          related_field_updater: imf_field_updater,
          data_id: function(){
            return imf_filteringSelect.get('value');
          }
        });
        update_image_format_button.startup();
        
        
        
        
        // ********************************************************************
        // FPS
        var fps_numberTextBox = new NumberTextBox({
          name: 'fps',
          label: 'FPS',
          value: 25,
          placeHolder: '',
          required: true
        }, 'project_fps');
        fps_numberTextBox.startup();
        
        
        
        
        // ********************************************************************
        // REPOSITORY
        // The Memory
        var repository_memory = new JsonRest({
          target: '/get/repositories'
        });
        
        var repository_filteringSelect = new FilteringSelect({
          name: 'repository',
          label: 'Repository',
          required: true
        }, 'project_repository');
        repository_filteringSelect.startup();
        
        // The Updater
        var repo_field_updater = fieldUpdater({
          'memory': repository_memory,
          'widget': repository_filteringSelect
        });
        // run the function to fill the data
        repo_field_updater({animate: false});
     
        // New Repository Button
        var create_repository_button = dialogCaller({
          label: 'New',
          dialog_id: 'create_repository_dialog',
          content_creator: create_repository_dialog_creator,
          attach_to: 'project_create_repository_button',
          related_field_updater: repo_field_updater
        });
        create_repository_button.startup();
        
        // Update Repository Button
        var update_repository_button = dialogCaller({
          label: 'Update',
          dialog_id: 'update_repository_dialog',
          content_creator: update_repository_dialog_creator,
          attach_to: 'project_update_repository_button',
          related_field_updater: repo_field_updater,
          data_id: function(){
            return repository_filteringSelect.get('value');
          }
        });
        update_repository_button.startup();
        
        
        
        
        // ********************************************************************
        // STRUCTURE
        // 
        // The memory
        var structure_memory = new JsonRest({
          target: '/get/structures'
        });
        
        // The Field
        var structure_filteringSelect = new FilteringSelect({
          name: 'structure',
          label: 'Structure',
          required: true
        }, 'project_structure');
        structure_filteringSelect.startup();
        
        // The Updater
        var structure_field_updater = fieldUpdater({
          'memory': structure_memory,
          'widget': structure_filteringSelect
        });
        // call the updater to fill the field for the first time
        structure_field_updater({animate: false});
        
        // New Structure Button
        var create_structure_button = dialogCaller({
          label: 'New',
          dialog_id: 'create_structure_dialog',
          content_creator: create_structure_dialog_creator,
          attach_to: 'project_create_structure_button',
          related_field_updater: structure_field_updater
        });
        create_structure_button.startup();
        
        // UPDATE STRUCTURE BUTTON
        var update_structure_button = dialogCaller({
          label:'Update',
          dialog_id: 'update_structure_dialog',
          content_creator: update_structure_dialog_creator,
          attach_to: 'project_update_structure_button',
          related_field_updater: structure_field_updater,
          data_id: function(){
            return structure_filteringSelect.get('value')
          }
        });
        update_structure_button.startup();
        
        
        
        
        // ********************************************************************
        // LEAD
        var lead_memory = new JsonRest({
          target: '/get/users'
        });
        
        // The Field
        var lead_filteringSelect = new FilteringSelect({
          name: 'lead',
          label: 'User',
          required: true
        }, 'project_lead');
        lead_filteringSelect.startup();
        
        // The Updater
        var lead_field_updater = fieldUpdater({
          'memory': lead_memory,
          'widget': lead_filteringSelect
        });
        lead_field_updater({animate: false});
        
        // New Lead Button
        var create_lead_button = dialogCaller({
          label: 'New',
          dialog_id: 'create_user_dialog',
          content_creator: create_user_dialog_creator,
          attach_to: 'project_create_lead_button',
          related_field_updater: lead_field_updater
        });
        create_lead_button.startup();
        
        // Update Lead Button
        var update_lead_button = dialogCaller({
          label: 'Update',
          dialog_id: 'update_user_dialog',
          content_creator: update_user_dialog_creator,
          attach_to: 'project_update_lead_button',
          related_field_updater: lead_field_updater,
          data_id: function(){
            return lead_filteringSelect.get('value')
          }
        });
        update_lead_button.startup();
        
        
        
        
        // ********************************************************************
        // Status List
        //
        // The Memory
        var status_list_memory = new JsonRest({
          target: 'get/status_lists_for/Project'
        });
        
        // The Field
        var status_list_filteringSelect = new FilteringSelect({
          name: 'status_list',
          label: 'Status List',
          required: true
        }, 'project_status_list');
        status_list_filteringSelect.startup();
        
        // The Updater
        var status_list_field_updater = fieldUpdater({
          'memory': status_list_memory,
          'widget': status_list_filteringSelect
        });
        status_list_field_updater({animate: false});
        
        // New Status List Button
        var create_status_list_button = dialogCaller({
          label: 'New',
          dialog_id: 'create_status_list_dialog',
          content_creator: create_status_list_dialog_creator,
          attach_to: 'project_create_status_list_button',
          related_field_updater: status_list_field_updater,
          data_id: 'Project'
        });
        create_status_list_button.startup();
        
        // Update Status List Button
        var update_status_list_button = dialogCaller({
          label: 'Update',
          dialog_id: 'update_status_list_dialog',
          content_creator: update_status_list_dialog_creator,
          attach_to: 'project_update_status_list_button',
          related_field_updater: status_list_field_updater,
          data_id: function(){
              return status_list_filteringSelect.get('value');
          }
        });
        update_status_list_button.startup();
        
        // ********************************************************************
        // SUBMIT BUTTON
        var submit_button = new Button({
          label: 'OK',
          type: 'button',
          onClick: function(){
            submitForm({
              dialog: registry.byId('create_project_dialog'),
              form: create_project_form,
              additional_data: {
                submitted: 'create',
                start: stamp.toISOString(start_dateTextBox.value),
                end: stamp.toISOString(end_dateTextBox.value)
              },
              url: '{{ request.route_url("create_project") }}',
              method: 'POST'
            });
          }
        }, 'project_submit_button');
        submit_button.startup();
        
        // ********************************************************************
        // CANCEL BUTTON
        var cancel_button = new Button({
          label: 'Cancel',
          type: 'button',
          onClick: function(){
            registry.byId('create_project_dialog').destroyRecursive();
          }
        }, 'project_cancel_button');
        cancel_button.startup();
        
        create_project_form.startup();
      
      });
  });
</script>

