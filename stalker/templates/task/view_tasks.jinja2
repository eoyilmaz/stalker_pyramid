
<div id="gantEditorTemplates" style="display:none;">
  <div class="__template__" type="GANTBUTTONS"><!--
  <div class="ganttButtonBar">
    <div class="buttons">
    
    {% if entity.entity_type != 'User' %}
{#    <button onclick="$('#workSpace').trigger('undo.gantt');" class="button textual" title="undo"><span class="teamworkIcon">&#39;</span></button>#}
{#    <button onclick="$('#workSpace').trigger('redo.gantt');" class="button textual" title="redo"><span class="teamworkIcon">&middot;</span></button>#}
{#    <span class="ganttButtonSeparator"></span>#}
{#    <button onclick="$('#workSpace').trigger('addAboveCurrentTask.gantt');" class="button textual" title="insert above"><span class="teamworkIcon">l</span></button>#}
{#    <button onclick="$('#workSpace').trigger('addBelowCurrentTask.gantt');" class="button textual" title="insert below"><span class="teamworkIcon">X</span></button>#}
{#    <span class="ganttButtonSeparator"></span>#}
{#    <button onclick="$('#workSpace').trigger('indentCurrentTask.gantt');" class="button textual" title="indent task"><span class="teamworkIcon">.</span></button>#}
{#    <button onclick="$('#workSpace').trigger('outdentCurrentTask.gantt');" class="button textual" title="unindent task"><span class="teamworkIcon">:</span></button>#}
{#    <span class="ganttButtonSeparator"></span>#}
{#    <button onclick="$('#workSpace').trigger('moveUpCurrentTask.gantt');" class="button textual" title="move up"><span class="teamworkIcon">k</span></button>#}
{#    <button onclick="$('#workSpace').trigger('moveDownCurrentTask.gantt');" class="button textual" title="move down"><span class="teamworkIcon">j</span></button>#}
    {% endif %}
    <span class="ganttButtonSeparator"></span>
    <button onclick="$('#workSpace').trigger('zoomMinus.gantt');" class="button textual" title="zoom out"><span class="teamworkIcon">)</span></button>
    <button onclick="$('#workSpace').trigger('zoomPlus.gantt');" class="button textual" title="zoom in"><span class="teamworkIcon">(</span></button>
    <span class="ganttButtonSeparator"></span>
{#    {% if entity.entity_type != 'User' %}#}
{#    <button onclick="$('#workSpace').trigger('deleteCurrentTask.gantt');" class="button textual" title="delete"><span class="teamworkIcon">&cent;</span></button>#}
{#    {% endif %}#}
      &nbsp; &nbsp; &nbsp; &nbsp;
{#      {% if entity.entity_type != 'User' %}#}
{#      <button id='view_tasks_add_asset_button'>Add Asset</button>#}
{#      <button id='view_tasks_add_sequence_button'>Add Sequence</button>#}
{#      <button id='view_tasks_add_shot_button'>Add Shot</button>#}

    {% if entity.entity_type != 'User' %}
      <button id='view_tasks_gantt_refresh_button'>Revert To Saved</button>
      <button id='view_tasks_add_task_button'>Add Task</button>
      <button id='view_tasks_gantt_save_button'>Save</button>
    {% endif %}
    </div></div>
  --></div>

  <div class="__template__" type="TASKSEDITHEAD"><!--
  <table class="gdfTable" cellspacing="0" cellpadding="0" style='width: 1000px'>
    <thead>
    <tr style="height:40px">
      <th class="gdfColHeader gdfResizable" style="width:20px;"></th>
      <th class="gdfColHeader gdfResizable" style="width:250px;">name</th>
      <th class="gdfColHeader gdfResizable" style="width:75px;">start</th>
      <th class="gdfColHeader gdfResizable" style="width:75px;">end</th>
      <th class="gdfColHeader gdfResizable" style="width:35px;">dur.</th>
      <th class="gdfColHeader gdfResizable" style="width:60px;">dep.</th>
      <th class="gdfColHeader gdfResizable" style="width:400px; text-align: left;">resources</th>
      <th class="gdfColHeader gdfResizable" style="width:785px;"></th>
    </tr>
    </thead>
  </table>
  --></div>

  <div class="__template__" type="TASKROW"><!--
  <tr taskId="(#=obj.id#)" class="taskEditRow" level="(#=level#)">
    <th class="gdfCell" align="right"><span class="taskRowIndex">(#=obj.getRow()+1#)</span></th>
    <td class="gdfCell indentCell" style="padding-left:(#=obj.level*10#)px;"><input type="text" name="name" value="(#=obj.name#)" style="(#=obj.level>0?'border-left:2px dotted orange':''#)"></td>
    <td class="gdfCell"><input type="text" name="start"  value="" class="date"></td>
    <td class="gdfCell"><input type="text" name="end" value="" class="date"></td>
    <td class="gdfCell"><input type="text" name="duration" value="(#=obj.duration#)"></td>
    <td class="gdfCell"><input type="text" name="depends" value="(#=obj.depends#)" (#=obj.hasExternalDep?"readonly":""#)></td>
    <td class="gdfCell taskAssigs">(#=obj.getAssigsString()#)</td>
  </tr>
--></div>

  <div class="__template__" type="TASKEMPTYROW"><!--
  <tr class="taskEditRow emptyRow" >
    <th class="gdfCell" align="right"></th>
    <td class="gdfCell"></td>
    <td class="gdfCell"></td>
    <td class="gdfCell"></td>
    <td class="gdfCell"></td>
    <td class="gdfCell"></td>
    <td class="gdfCell" align="left"></td>
    <td class="gdfCell"></td>
  </tr>
--></div>

  <div class="__template__" type="TASKBAR"><!--
  <div class="taskBox" taskId="(#=obj.id#)" >
    <div class="layout (#=obj.hasExternalDep?'extDep':''#)">
{#      <div class="taskStatus" status="(#=obj.status#)"></div>#}
      <div class="taskProgress" style="width:(#=obj.progress>100?100:obj.progress#)%; background-color:(#=obj.progress>100?'red':'rgb(153,255,51);'#);"></div>
      <div class="milestone (#=obj.startIsMilestone?'active':''#)" ></div>

      <div class="taskLabel">(#=obj.name#)</div>
      <div class="milestone end (#=obj.endIsMilestone?'active':''#)"></div>
      <div class="taskDepLabel">(#=obj.getAssigsString()#)</div>
    </div>
  </div>
  --></div>


  <div class="__template__" type="CHANGE_STATUS"><!--
    <div class="taskStatusBox">
      <div class="taskStatus cvcColorSquare" status="STATUS_ACTIVE" title="active"></div>
      <div class="taskStatus cvcColorSquare" status="STATUS_DONE" title="completed"></div>
      <div class="taskStatus cvcColorSquare" status="STATUS_FAILED" title="failed"></div>
      <div class="taskStatus cvcColorSquare" status="STATUS_SUSPENDED" title="suspended"></div>
      <div class="taskStatus cvcColorSquare" status="STATUS_UNDEFINED" title="undefined"></div>
    </div>
  --></div>





  <div class="__template__" type="ASSIGNMENT_ROW"><!--
  <tr taskId="(#=obj.task.id#)" assigId="(#=obj.assig.id#)" class="assigEditRow" >
    <td ><select name="resourceId"  class="formElements" (#=obj.assig.id.indexOf("tmp_")==0?"":"disabled"#) ></select></td>
    <td ><select type="select" name="roleId"  class="formElements"></select></td>
    <td ><input type="text" name="effort" value="(#=getMillisInHoursMinutes(obj.assig.effort)#)" size="5" class="formElements"></td>
    <td align="center"><span class="teamworkIcon delAssig" style="cursor: pointer">d</span></td>
  </tr>
  --></div>
</div>


<div id="workSpace"
     style="padding:0px;
      overflow-y:auto;
      overflow-x:hidden;
      border:1px solid #e5e5e5;
      position:relative;
      margin:0 5px;
      width:100%;
      height:94%;">
</div>

<script type="text/javascript">
  require(['dijit/registry',
           'dojo/data/ObjectStore', 'dojox/grid/DataGrid', 'dijit/form/Button',
           'stalker/dialogCaller', 'dojo/store/JsonRest', 'dojo/request/xhr',
           'dojo/_base/lang', 'dojo/query', 'dojo/Deferred', 'dijit/Menu',
           'dijit/MenuItem', 'dijit/MenuSeparator', 'dojo/ready'],
    function(registry, ObjectStore, DataGrid, Button, dialogCaller, JsonRest,
             xhr, lang, query, Deferred, Menu, MenuItem, MenuSeparator, ready){
      
      ready(function(){
        $('#gantttemplates').loadTemplates();
        var ge = new GanttMaster();
        ge.init($("#workSpace"));
        
        // The Memory
        var tasks_memory = new JsonRest({
          target: '/get/tasks/{{ entity.id }}'
        });
      
        function loadGanttFromServer() {
          tasks_memory.query().then(function(data){
            
            
            data = lang.mixin(data,{'canWrite': 1, 'canWriteOnParent': 1});
            
            var promise = ge.loadProject(data, Deferred);
            promise.then(function(){
              // now add the context menu to tasks
              var task_box_nodes = query('.taskBox');
              
              // TODO: add context menu here
              // Standart menu items
              //
              // View Summary
              // ============
              // Edit
              // Add Child
              // Add Booking
              // ============
              // Delete
              // 
              
              var menu = new Menu({
                targetNodeIds: ['workSpace'],
                selector: '.taskBox'
              });
              
              menu.addChild(
                new MenuItem({
                  label: 'View Task Summary',
                  onClick: function(){
                    var node = this.getParent().currentTarget;
                    // get task id
                    var task_id = node.getAttribute('taskid');
                    alert('task id: ' + task_id);
                  }
                })
              );
              
              {% if entity.entity_type != 'User' %}
              
              menu.addChild(new MenuSeparator());
              
              menu.addChild(
                new MenuItem({
                  label: 'Edit Task',
                  onClick: function(){
                    var node = this.getParent().currentTarget;
                    // get task id
                    var task_id = node.getAttribute('taskId');
                    // create and call edit_task dialog
                    var dialog = dijit.byId('edit_task_dialog');
                    if (dialog == null){
                      dialog = create_edit_task_dialog(task_id);
                    }
                    
                    dialog.set(
                      'related_field_updater',
                      loadGanttFromServer
                    );
                    dialog.show();
                    
                  }
                })
              );
              
              menu.addChild(
                new MenuItem({
                  label: 'Add Child Task',
                  onClick: function(){
                    var node = this.getParent().currentTarget;
                    var task_id = node.getAttribute('taskId');
                    var dialog = dijit.byId('add_task_dialog');
                    if (dialog == null){
                      dialog = create_add_task_dialog(task_id);
                    }
                    dialog.set(
                      'related_field_updater',
                      loadGanttFromServer
                    );
                    dialog.show();
                  }
                })
              );
              
              {% endif %}
              
              menu.addChild(
                new MenuItem({
                  label: 'Add Booking'
                })
              );
              
              {% if entity.entity_type != 'User' %}
              menu.addChild(new MenuSeparator());
              
              menu.addChild(
                new MenuItem({
                  label: 'Delete Task'
                })
              );
              
              menu.startup();
              {% endif %}
             
            });
          });
        }
        
        loadGanttFromServer();
        
        
        function saveGanttOnServer() {
        
          //this is a simulation: save data to the local storage or to the textarea
{#          saveInLocalStorage();#}
          
          
          var prj = ge.saveProject();
          
          delete prj.resources;
          delete prj.roles;
          
          if (ge.deletedTaskIds.length>0) {
            if (!confirm("TASK_THAT_WILL_BE_REMOVED\n"+ge.deletedTaskIds.length)) {
              return;
            }
          }
          
          var deffered = xhr.post(
            '/edit/tasks',
            {
              method: 'POST',
              data: {CM:'save_tasks', prj: JSON.stringify(prj)}
            }
          );
          
          deffered.then(function(){
            // load the project from server again
            //loadGanttFromServer();
          }, function(err){
            alert(err);
          });
          
        }
        
        function clearGantt() {
          ge.reset();
        }
        
        function loadI18n() {
          GanttMaster.messages = {
            "CHANGE_OUT_OF_SCOPE":"NO_RIGHTS_FOR_UPDATE_PARENTS_OUT_OF_EDITOR_SCOPE",
            "START_IS_MILESTONE":"START_IS_MILESTONE",
            "END_IS_MILESTONE":"END_IS_MILESTONE",
            "TASK_HAS_CONSTRAINTS":"TASK_HAS_CONSTRAINTS",
            "GANTT_ERROR_DEPENDS_ON_OPEN_TASK":"GANTT_ERROR_DEPENDS_ON_OPEN_TASK",
            "GANTT_ERROR_DESCENDANT_OF_CLOSED_TASK":"GANTT_ERROR_DESCENDANT_OF_CLOSED_TASK",
            "TASK_HAS_EXTERNAL_DEPS":"TASK_HAS_EXTERNAL_DEPS",
            "GANTT_ERROR_LOADING_DATA_TASK_REMOVED":"GANTT_ERROR_LOADING_DATA_TASK_REMOVED",
            "ERROR_SETTING_DATES":"ERROR_SETTING_DATES",
            "CIRCULAR_REFERENCE":"CIRCULAR_REFERENCE",
            "CANNOT_DEPENDS_ON_ANCESTORS":"CANNOT_DEPENDS_ON_ANCESTORS",
            "CANNOT_DEPENDS_ON_DESCENDANTS":"CANNOT_DEPENDS_ON_DESCENDANTS",
            "INVALID_DATE_FORMAT":"INVALID_DATE_FORMAT",
            "TASK_MOVE_INCONSISTENT_LEVEL":"TASK_MOVE_INCONSISTENT_LEVEL",
        
            "GANTT_QUARTER_SHORT":"Q",
            "GANTT_SEMESTER_SHORT":"S"
          };
        }
        
        //-------------------------------------------  Get project file as JSON (used for migrate project from gantt to Teamwork) ------------------------------------------------------
        function getFile() {
          $("#gimBaPrj").val(JSON.stringify(ge.saveProject()));
          $("#gimmeBack").submit();
          $("#gimBaPrj").val("");
        }
        
{#        {% if entity.entity_type != 'User' %}#}
{#          var add_asset_button = dialogCaller({#}
{#            label: 'Add Asset',#}
{#            dialog_id: 'add_asset_dialog',#}
{#            content_creator: create_add_asset_dialog,#}
{#            attach_to: 'view_tasks_add_asset_button',#}
{#            related_field_updater: loadGanttFromServer, #}
{#            data_id: '{{ entity.id }}'#}
{#          });#}
{#          add_asset_button.startup();#}
{#          #}
{#          var add_sequence_button = dialogCaller({#}
{#            label: 'Add Sequence',#}
{#            dialog_id: 'add_sequence_dialog',#}
{#            content_creator: create_add_sequence_dialog,#}
{#            attach_to: 'view_tasks_add_sequence_button',#}
{#            related_field_updater: loadGanttFromServer, #}
{#            data_id: '{{ entity.id }}'#}
{#          });#}
{#          add_sequence_button.startup();#}
{# #}
{#          var add_shot_button = dialogCaller({#}
{#            label: 'Add Shot',#}
{#            dialog_id: 'add_shot_dialog',#}
{#            content_creator: create_add_shot_dialog,#}
{#            attach_to: 'view_tasks_add_shot_button',#}
{#            related_field_updater: loadGanttFromServer, #}
{#            data_id: '{{ entity.id }}'#}
{#          });#}
{#          add_shot_button.startup();#}
{#          #}
        {% if entity.entity_type != 'User' %}
          var revert_gantt_button = new Button({
            label: 'Revert To Saved',
            onClick: function(){
              loadGanttFromServer();
            }
          }, 'view_tasks_gantt_refresh_button');
          revert_gantt_button.startup();
          
          var add_task_button = dialogCaller({
            label: 'Add Task',
            dialog_id: 'add_task_dialog',
            content_creator: create_add_task_dialog,
            attach_to: 'view_tasks_add_task_button',
            related_field_updater: loadGanttFromServer, 
            data_id: '{{ entity.id }}'
          });
          add_task_button.startup();
          
          // TODO: This should be disabled upon permission not according to the existence of a template variable
          var save_gantt_button = new Button({
            label: 'Save',
            onClick: function(){
              saveGanttOnServer();
            }
          }, 'view_tasks_gantt_save_button')
          save_gantt_button.startup();
          
        {% endif %}
      });
  });
</script>

<script type="text/javascript">
  $.JST.loadDecorator("ASSIGNMENT_ROW", function(assigTr, taskAssig) {
    
    var resEl = assigTr.find("[name=resourceId]");
    for (var i in taskAssig.task.master.resources) {
      var res = taskAssig.task.master.resources[i];
      var opt = $("<option>");
      opt.val(res.id).html(res.name);
      if (taskAssig.assig.resourceId == res.id)
        opt.attr("selected", "true");
      resEl.append(opt);
    }

    var roleEl = assigTr.find("[name=roleId]");
    for (var i in taskAssig.task.master.roles) {
      var role = taskAssig.task.master.roles[i];
      var optr = $("<option>");
      optr.val(role.id).html(role.name);
      if (taskAssig.assig.roleId == role.id)
        optr.attr("selected", "true");
      roleEl.append(optr);
    }

    if (taskAssig.task.master.canWrite) {
      assigTr.find(".delAssig").click(function() {
        var tr = $(this).closest("[assigId]").fadeOut(200, function() {
          $(this).remove();
        });
      });
    }

  });
</script>

