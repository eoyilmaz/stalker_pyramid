{# Stalker a Production Asset Management System
 Copyright (C) 2009-2013 Erkan Ozgur Yilmaz
 
 This file is part of Stalker.
 
 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation;
 version 2.1 of the License.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
#}
<div class='dijitDialogPaneContentArea'> 
  <form id='create_task_form'>
    <table style='width: 100%;'>
      
      {# PROJECT #}
      <tr>
        <td class='label_column'>
          <label for='task_project'>Project</label>
        </td>
        <td class='input_column'>
          <input id='task_project'>
        </td>
      </tr>
      
      {# PARENT #}
      <tr>
        <td class='label_column'>
          <label for='task_parent'>Parent</label>
        </td>
        <td class='input_column' colspan="2">
          <input id='task_parent'>
        </td>
      </tr>
      
      {# NAME #}
      <tr>
        <td class='label_column'>
          <label for='task_name'>Name</label>
        </td>
        <td class='input_column'>
          <input id='task_name'>
        </td>
      </tr>
      
      {# DESCRIPTION #}
      <tr>
        <td class='label_column'>
          <label for='task_description'>Description</label>
        </td>
        <td class='input_column'>
          <input id='task_description'>
        </td>
      </tr>
      
      {# DEPENDENCIES #}
      <tr>
        <td class='label_column'>
          <label for='task_depends'>Depends</label>
        </td>
        <td class='input_column'>
          <input id='task_depends'>
        </td>
      </tr>
      
      {# RESOURCES #}
      <tr>
        <td class='label_column'>
          <label for='task_resources'>Resources</label>
        </td>
        <td class='input_column'>
          <div id='task_resources'></div>
        </td>
      </tr>
      
      {# CONSTRAINS #}
      
      {# SCHEDULE USING / EFFORT / LENGTH / DURATION #}
      <tr>
        <td class='label_column'>
          <label for='task_schedule_model'>Schedule Model</label>
        </td>
        <td class='input_column'>
          <input id='task_schedule_model'>
          <div id='task_schedule_day'></div>
          <div style='
            float: left;
            margin-left: 1px;
            margin-top: 3px;
            text-align: left;
            width: 34px;
          '>Days</div>
          <div id='task_schedule_hour'></div>
          <div style='
            float: left;
            margin-left: 1px;
            margin-top: 3px;
            text-align: left;
            width: 34px;
          '>Hours</div>
        </td>
      </tr>
      
      {# START #}
      <tr>
        <td class='label_column'>
          <label for='task_start_constraint'>Start Date</label>
        </td>
        <td class='input_column'>
            <input id='task_start_constraint'>
            <div id='task_start_date'></div>
            <div id='task_start_time'></div>
        </td>
      </tr>
      
      {# END #}
      <tr>
        <td class='label_column'>
          <label for='task_end_constraint'>End Date</label>
        </td>
        <td class='input_column'>
            <input id='task_end_constraint'>
            <div id='task_end_date'></div>
            <div id='task_end_time'></div>
        </td>
      </tr>
      
      {# MILESTONE #}
      <tr>
        <td class='label_column'>
          <label for='task_is_milestone'>Is Milestone</label>
        </td>
        <td class='input_column'>
          <input id="task_is_milestone" type="checkbox">
        </td>
      </tr>
      
      {# STATUS LIST #}
      <tr>
        <td class='label_column'>
          <label for='task_status_list'>Status List</label>
        </td>
        <td class='input_column'>
          <input id='task_status_list'>
        </td>
        <td class='button_column'>
          <button id='task_create_status_list_button'>New</button>
          <button id='task_update_status_list_button'>Update</button>
        </td>
      </tr>
      
      {# STATUS #}
      <tr>
        <td class='label_column'>
          <label for='task_status'>Status</label>
        </td>
        <td class='input_column'>
          <input id='task_status'>
        </td>
      </tr>
      
    </table>
  </form>
</div>

<div class='dijitDialogPaneActionBar'>
  <button id='task_ok_button'>Ok</button>
  <button id='task_cancel_button'>Cancel</button>
</div>

<script type='text/javascript'>
  require([
    'dijit/registry',
    
    'dijit/form/Form',
    'dijit/form/ValidationTextBox',
    'dijit/form/TextBox',
    'dijit/form/FilteringSelect',
    'dijit/form/Button',
    'dijit/form/CheckBox',
    'dijit/form/DateTextBox',
    'dijit/form/TimeTextBox',
    'dijit/form/NumberSpinner',
    
    'dojo/store/Memory',
    'dojo/store/JsonRest',
    
    'dojo/date',
    'dojo/date/stamp',
    'dojo/date/locale',
    
    'stalker/Tag', 
    'stalker/TagSelect',
    'stalker/submitForm',
    'stalker/fieldUpdater',
    'stalker/dialogCaller',
    'dojo/ready'],
    function(
      registry,
      
      Form,
      ValidationTextBox,
      TextBox,
      FilteringSelect,
      Button,
      CheckBox,
      DateTextBox,
      TimeTextBox,
      NumberSpinner,
      
      Memory,
      JsonRest,
      
      
      date,
      stamp,
      locale,

      Tag,
      TagSelect,
      submitForm,
      fieldUpdater,
      dialogCaller,
      ready){
      
      ready(function(){
        // ********************************************************************
        // Form
        var create_task_form = new Form({
          {% if mode == 'CREATE' %}
            id: 'create_task_form',
          {% elif mode == 'UPDATE' %}
            id: 'update_task_form'
          {% endif %}
        }, 'create_task_form');
        
        
        
        // ********************************************************************
        // Project
        var project_textBox = new TextBox({
          name: 'project_name',
          label: 'Project',
          value: '{{ project.name }}',
          disabled: true,
          required: true,
{#          style: 'width: 100%'#}
        }, 'task_project');
        project_textBox.startup();
        
        
        // ********************************************************************
        var tasks_jsonRest = new JsonRest({
          target: '{{ request.route_url('get_project_tasks', project_id=project.id) }}'
        });
        
        var parent_widget;
        {% if parent %}
          {# Use a TextBox #}
          parent_widget = new TextBox({
            name: 'parent_id',
            label: 'Parent',
            value: '{{ parent.name }}',
            disabled: true,
{#            style: 'width: auto'#}
          }, 'task_parent');
          parent_widget.startup();
        {% else %}
          {# Use a filtering select #}
          parent_widget = new FilteringSelect({
            name: 'parent_id',
            label: 'Parent',
            required: false,
{#            style: 'width: 100%'#}
          }, 'task_parent');
        {% endif %}
        
        
        
        // ********************************************************************
        // Name
        var name_textBox = new ValidationTextBox({
          name: 'name',
          label: 'Name',
          placeHolder: 'Enter a name',
          required: true,
          value: {% if mode == 'CREATE' %}
            '',
          {% elif mode == 'UPDATE' %}
            '{{ task.name }}'
          {% endif %}
{#          style: 'width: 100%'#}
        }, 'task_name');
        name_textBox.startup();
        
        
        
        
        // ********************************************************************
        // Description
        var description_textBox = new TextBox({
          name: 'description',
          label: 'Description',
          placeHolder: 'Enter description',
          value: {% if mode == 'CREATE' %}
            '',
          {% elif mode == 'UPDATE' %}
              '{{ task.description }}'
          {% endif %}
{#          style: 'width: 100%'#}
        }, 'task_description');
        description_textBox.startup();
        
        
        
        
        // ********************************************************************
        // Depends
        
        var depends_tagSelect = new TagSelect({
          id: 'depends_tagSelect',
          name: 'depend_ids',
          required: false,
{#          style: 'width: 100%'#}
        }, "task_depends");
        depends_tagSelect.startup();
        
        var tasks_result = tasks_jsonRest.query().then(function(data){
          var memory = new Memory({data: data});
          depends_tagSelect.set('store', new Memory({data: data}));
          
          {% if mode == 'UPDATE' %}
            depends_tasSelect.set('value', [
              {% for depend_task in task.depends %}
                {{ depend_task.id }},
              {% endfor %}
            ]);
          {% else %}
            {% if depends_to %}
              // set the depends value
              depends_tagSelect.set('value', [{{ depends_to.id }}]);
            {% endif %}
          {% endif %}
          
          {% if not parent %}
            parent_widget.set('store', memory);
          {% endif %}
        });
        
        // ********************************************************************
        // Schedule Model : EFFORT / LENGTH / DURATION
        var schedule_model = new FilteringSelect({
          name: 'schedule_model',
          label: 'Schedule Model',
          store: new Memory({
            data: [
              {% for model in schedule_models %}
              {
                name: '{{ model }}',
                id: '{{ loop.index0 }}'
              },
              {% endfor %}
            ]
          }),
          required: true,
          style: 'width: 88px; float: left; margin-right: 3px'
        }, 'task_schedule_model');
        // select the first one
        {% if mode == 'CREATE' %}
          schedule_model.set('value', 0);
        {% elif mode == 'UPDATE' %}
            schedule_model.set('value', {{ task.schedule_model }});
          {% endif %}
        {% endif %}
        
        // Schedule Day
        var schedule_day_numberSpinner = new NumberSpinner({
          name: 'schedule_day',
          value: {% if task %}{{ task.schedule_timing_day }}{% else %}0{% endif %},
          constraints:{ min: 0 },
          style: 'width: 50px; text-align: right; float: left;'
        }, 'task_schedule_day');
        schedule_day_numberSpinner.startup();
        
        // Schedule Hour
        var schedule_hour_numberSpinner = new NumberSpinner({
          name: 'schedule_hour',
          value: {% if task %}{{ task.schedule_timing_hour }}{% else %}0{% endif %},
          constraints:{ min: 0 },
          style: 'width: 50px; text-align: right; float: left;'
        }, 'task_schedule_hour');
        schedule_hour_numberSpinner.startup();
        
        // ********************************************************************
        // Start Date
        // CheckBox
        var start_constraint_checkBox = new CheckBox({
          id: 'start_constraint',
          name: 'start_constraint',
          value: 'checked',
          checked: false
          //onChange: function(new_value){
          //  // enable the start date and start hour fields if checked
          //  if (new_value){
          //    start_dateTextBox.set('disabled', false);
          //    start_time_timeTextBox.set('disabled', false);
          //  } else {
          //    start_dateTextBox.set('disabled', true);
          //    start_time_timeTextBox.set('disabled', true);
          //  }
          //  // TODO: if both of the start_constraint and end_constraint checked
          //  //       also change the schedule_using to DURATION and set the
          //  //       duration to the correct value
          //}
        }, 'task_start_constraint');
        start_constraint_checkBox.startup();
        
        {% if mode == 'UPDATE' %}
          {% if task.schedule_constraint == 1 or task.schedule_constraint == 3 %}
            start_constraint_checkBox.set('checked', true);
          {% endif %}
        {% endif %}
        
        
        // Date
        var start_dateTextBox = new DateTextBox({
          name: 'start',
          label: 'Start Date',
          value: new Date({% if task %}{{ task.start.strftime('%s')*1000 }}{% endif %}),// set it today by default
          required: true,
          disabled: true,
          datePattern: 'dd-mm-yyyy',
          style: 'width: 90px;'
          //onChange: function(){
          //  if (this.focused){
          //    update_dates(
          //      start_dateTextBox.getValue(),
          //      end_dateTextBox.getValue(),
          //      null
          //    );
          //  }
          //}
        }, 'task_start_date');
        start_dateTextBox.startup();
        
        
        
        // Time
        var start_time_timeTextBox = new TimeTextBox({
          name: 'start_time',
          value: {% if task %} 'T{{ '%02d'|format(task.start.time) }}:00:00'{% else %}'T09:00:00'{% endif %},
          disabled: true,
          style: 'width: 75px;',
          constraints: {
            timePattern: 'HH:mm:ss',
            clickableIncrement: 'T01:00:00', // TODO: set it to project.time_resolution
            visibleIncrement: 'T01:00:00',
            visibleRange: 'T01:00:00'
          }
        }, 'task_start_time');
        start_time_timeTextBox.startup();
        
        
        
        // ********************************************************************
        // End Date
        // Checkbox
        var end_constraint_checkBox = new CheckBox({
          id: 'end_constraint',
          name: 'end_constraint',
          value: 'checked',
          checked: false,
          onChange: function(new_value){
            // enable the end date and end hour fields if checked
            if (new_value){
              end_dateTextBox.set('disabled', false);
              end_time_timeTextBox.set('disabled', false);
            } else {
              end_dateTextBox.set('disabled', true);
              end_time_timeTextBox.set('disabled', true);
            }
            // TODO: if both of the start_constraint and end_constraint checked
            //       also change the schedule_using to DURATION and set the
            //       duration to the correct value
          }
        }, 'task_end_constraint');
        end_constraint_checkBox.startup();
        
        {% if mode == 'UPDATE' %}
          {% if task.schedule_constraint == 2 or task.schedule_constraint == 3 %}
            end_constraint_checkBox.set('checked', true);
          {% endif %}
        {% endif %}
        
        
        
        // Date
        var end_dateTextBox = new DateTextBox({
          name: 'end',
          label: 'End Date',
          value: {% if mode=='CREATE' %}
            new Date(), // set it to now by default
          {% elif mode=='UPDATE' %}{
            new Date({{ task.end.strftime('%s')|int * 1000 }}),
          {% endif %}
          required: true,
          disabled: true,
          datePattern: 'dd-mm-yyyy',
          style: 'width: 90px;'
          //onChange: function(){
          //  if (this.focused){
          //    update_dates(
          //      start_dateTextBox.getValue(),
          //      end_dateTextBox.getValue(),
          //      null
          //    );
          //  }
          //}
        }, 'task_end_date');
        end_dateTextBox.startup();
        
        // Time
        var end_time_timeTextBox = new TimeTextBox({
          name: 'end_time',
          value: {% if mode == 'CREATE' -%}
            'T18:00:00',
          {% elif mode == 'UPDATE' %}
            'T{{ '%02d'|format(task.end.hour) }}:00:00',
          {% endif %}
          disabled: true,
          style: 'width: 75px;',
          constraints: {
            timePattern: 'HH:mm:ss',
            clickableIncrement: 'T01:00:00',
            visibleIncrement: 'T01:00:00',
            visibleRange: 'T01:00:00'
          }
        }, 'task_end_time');
        end_time_timeTextBox.startup();
        
        //var update_dates = function(start, end, duration){
        //  if (duration == null){
        //     // update the duration
        //    duration_numberTextBox.set(
        //      'value',
        //      date.difference(start, end)
        //    );
        //  } else if (end == null) {
        //     // update end date
        //    end_dateTextBox.set(
        //      'value',
        //      date.add(
        //        start,
        //        'day',
        //        duration
        //      )
        //    );
        //  }
        //};
        //update_dates();
        
        
        
        
        // ********************************************************************
        // Is Milestone
        var is_milestone_checkBox = new CheckBox({
          id: 'is_milestone',
          name: 'is_milestone',
          label: 'Is Milestone',
          value: 'checked',
          {% if mode=='CREATE'%}
          checked: false,
          {% elif mode=='UPDATE' %}
            {% if task.is_milestone %}
              checked: true,
            {% else %}
              checked: false,
            {% endif %}
          {% endif %}
          onChange: function(new_value){
            // disable the resources field if checked
            if (new_value){
              resources_tagSelect.set('disabled', true);
            } else {
              resources_tagSelect.set('disabled', false);
            }
          }
        }, 'task_is_milestone');
        is_milestone_checkBox.startup();
        
        
        
        
        // ********************************************************************
        // Resources
        var users_jsonRest = new JsonRest({
          target:'get/users'
        });
        
        var resources_tagSelect = new TagSelect({
          id: 'resources_tagSelect',
          name: 'resource_ids',
          required: true,
{#          style: 'width: 100%'#}
        }, 'task_resources');
        resources_tagSelect.startup();
        
        var result = users_jsonRest.query().then(function(data){
          var user_memory = new Memory({data: data});
          resources_tagSelect.set('store', user_memory);
          
          {% if mode == 'UPDATE' %}
          // set the selection
          resources_tagSelect.set('selected', [
            {% for resource in task.resources %}
              {{ resource.id }},
            {% endif %}
          ]);
          {% endif %}
          
        });
        
{#        // Create Button#}
{#        var create_resource_button = dialogCaller({#}
{#          label: 'create',#}
{#          dialog_id: 'create_user_dialog',#}
{#          content_creator: create_user_dialog_creator,#}
{#          attach_to: 'task_create_resource_button',#}
{#          related_field_updater:#}
{#          #}
{#        });#}
        
        
        // ********************************************************************
        // Status_List
        //
        // The Memory
        var status_list_memory = new JsonRest({
          target: 'get/status_lists_for/Task'
        });
        
        // The Field
        var status_list_filtering_select = new FilteringSelect({
          name: 'status_list_id',
          required: true,
          onChange: function(){
            status_updater({animate: true});
          },
{#          style: 'width: 100%'#}
        }, 'task_status_list');
        status_list_filtering_select.startup();
        
        // The Updater
        var status_list_field_updater = fieldUpdater({
          'memory': status_list_memory,
          'widget': status_list_filtering_select
        });
        status_list_field_updater({animate: false});
        
        // Create Status List Button
        var create_status_list_button = dialogCaller({
          label: 'New',
          dialog_id: 'create_status_list_dialog',
          content_creator: create_status_list_dialog_creator,
          attach_to: 'task_create_status_list_button',
          related_field_updater: status_list_field_updater,
          data_id: 'Task'
        });
        create_status_list_button.startup();
        
        // Update Status List Button
        var update_status_list_button = dialogCaller({
          label: 'Update',
          dialog_id: 'update_status_list_dialog',
          content_creator: update_status_list_dialog_creator,
          attach_to: 'task_update_status_list_button',
          related_field_updater: status_list_field_updater,
          data_id: function(){
            return status_list_filtering_select.get('value');
          }
        });
        update_status_list_button.startup();
        
        
        
        
        // ********************************************************************
        // Status
        //
        // The Memory
        var status_memory = new JsonRest({
          target: 'get/statuses_of/'
        });
        
        // The Field
        var status_filtering_select = new FilteringSelect({
          name: 'status_id',
          required: true,
          store: status_memory,
{#          style: 'width: 100%'#}
        }, 'task_status');
        status_filtering_select.startup();
        
        // The Updater
        var status_updater = fieldUpdater({
          memory: status_memory,
          query_data: function(){
            var widget = registry.byId('task_status_list');
            return widget.get('value');
          },
          widget: status_filtering_select
        });
        // don't call the updater now, the status_list may not been set yet!!!
        
        {% if mode == 'UPDATE' %}
          status_updater({
            selected: {{ task.status.id }}
          });
        {% endif %}
        
        
        // ********************************************************************
        // Ok Button
        var ok_button = new Button({
          label: 'Ok',
          type: 'button',
          onClick: function(){
            
            var schedule_timing = '';
            if (schedule_day_numberSpinner.value > 0){
              schedule_timing += schedule_day_numberSpinner.value + 'd';
            }
            if (schedule_hour_numberSpinner.value > 0){
              if (schdele_timing.length){
                schedule_timing += ' ';
              }
              schedule_timing += schedule_hour_numberSpinner.value + 'h';
            }
            
            submitForm({
              dialog: registry.byId('create_task_dialog'),
              form: create_task_form,
              additional_data: {
                project_id: {{ project.id }},
                {% if parent %}
                  parent_id: {{ parent.id }},
                {% endif %}
                is_milestone: eval(is_milestone_checkBox.get('checked')) ? 1 : 0,
                schedule_timing: schedule_timing,
                start_date: stamp.toISOString(start_dateTextBox.value),
                end_date: stamp.toISOString(end_dateTextBox.value),
                start_time: stamp.toISOString(start_time_timeTextBox.value),
                end_time: stamp.toISOString(end_time_timeTextBox.value)
              },
              url: '{{ request.route_url('create_task', entity_id=project.id) }}',
              method: 'POST'
            });
          }
        }, 'task_ok_button');
        ok_button.startup();
        
        
        
        
        // ********************************************************************
        // Cancel Button
        var cancel_button = new Button({
          label: 'Cancel',
          type: 'button',
          onClick: function(){
            var dialog = create_task_form.getParent()
            dialog.destroyRecursive();
          }
        }, 'task_cancel_button');
        cancel_button.startup();
   
        
        create_task_form.startup();
      });
  });
</script>

