{# Stalker a Production Asset Management System
 Copyright (C) 2009-2013 Erkan Ozgur Yilmaz
 
 This file is part of Stalker.
 
 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation;
 version 2.1 of the License.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
#}


{# TEMPLATES #}

<div id="gantEditorTemplates" style="display:none;">
    <div class="__template__" type="TASKSEDITHEAD"><!--
    <table class="gdfTable" cellspacing="0" cellpadding="0" style='width: 1000px'>
      <thead>
      <tr style="height:40px">
        <th class="gdfColHeader gdfResizable" style="width:20px;"></th>
        <th class="gdfColHeader gdfResizable" style="width:20px;">id</th>
        <th class="gdfColHeader gdfResizable" style="width:250px;">name</th>
        <th class="gdfColHeader gdfResizable" style="width:75px;">start</th>
        <th class="gdfColHeader gdfResizable" style="width:75px;">end</th>
        <th class="gdfColHeader gdfResizable" style="width:35px;">dur.</th>
        <th class="gdfColHeader gdfResizable" style="width:60px;">dep.</th>
        <th class="gdfColHeader gdfResizable" style="width:400px; text-align: left;">resources</th>
      <th class="gdfColHeader gdfResizable" style="width:785px;"></th>
    </tr>
    </thead>
  </table>
  --></div>

  <div class="__template__" type="TASKROW"><!--
  <tr taskId="(#=obj.id#)" class="taskEditRow" >
    <th class="gdfCell" align="right"><span class="taskRowIndex">(#=obj.getRow()+1#)</span></th>
    <td class="gdfCell" align="right"><span>(#=obj.id#)</span></td>
    <td class="gdfCell indentCell" style="padding-left:(#=obj.getParents().length*10#)px;"><input type="text" name="name" value="(#=obj.name#)" style="(#=obj.getParents().length>0?'':'font-weight: bold'#)"></td>
    <td class="gdfCell"><input type="text" name="start"  value="" class="date"></td>
    <td class="gdfCell"><input type="text" name="end" value="" class="date"></td>
    <td class="gdfCell"><input type="text" name="duration" value="(#=obj.duration#)"></td>
    <td class="gdfCell"><input type="text" name="depends" value="(#=obj.depends#)" (#=obj.hasExternalDep?"readonly":""#)></td>
    <td class="gdfCell taskAssigs">(#=obj.getResourcesString()#)</td>
  </tr>
--></div>

  <div class="__template__" type="TASKEMPTYROW"><!--
  <tr class="taskEditRow emptyRow" >
    <th class="gdfCell" align="right"></th>
    <td class="gdfCell"></td>
    <td class="gdfCell"></td>
    <td class="gdfCell"></td>
    <td class="gdfCell"></td>
    <td class="gdfCell"></td>
    <td class="gdfCell"></td>
    <td class="gdfCell" align="left"></td>
    <td class="gdfCell"></td>
  </tr>
--></div>

  <div class="__template__" type="TASKBAR"><!--
  <div class="taskBox" taskId="(#=obj.id#)" >
    <div class="layout (#=obj.hasExternalDep?'extDep':''#)">
{#      <div class="taskStatus" status="(#=obj.status#)"></div>#}
      <div class="leafTaskContextMenu" taskId="(#=obj.id#)"></div>
      <div class="taskProgress" style="width:(#=obj.progress>100?100:obj.progress#)%; background-color:(#=obj.progress>100?'red':'rgb(153,255,51);'#);"></div>
      <div class="taskBid" style="width:(#=obj.bid/obj.effort#)%; background-color:red;"></div>
      <div class="milestone (#=obj.startIsMilestone?'active':''#)" ></div>
      <div class="taskLabel">(#=obj.name#)</div>
      <div class="milestone end (#=obj.endIsMilestone?'active':''#)"></div>
      <div class="taskResourceLabel">(#=obj.getResourcesString()#)</div>
    </div>
  </div>
  --></div>

  <div class="__template__" type="PARENTTASKBAR"><!--
  <div class="parentTaskBox" taskId="(#=obj.id#)" >
    <div class="layout (#=obj.hasExternalDep?'extDep':''#)">
      <div class="parentTaskContextMenu" taskId="(#=obj.id#)"></div>
      <div class="leftPin"></div>
      <div class="rightPin"></div>
      <div class="taskProgress" style="width:(#=obj.progress>100?100:obj.progress#)%; background-color:(#=obj.progress>100?'red':'rgb(153,255,51);'#);"></div>
      <div class="taskBid" style="width:(#=obj.bid/obj.effort#)%; background-color:red;"></div>
      <div class="milestone (#=obj.startIsMilestone?'active':''#)" ></div>
      <div class="taskLabel">(#=obj.name#)</div>
      <div class="milestone end (#=obj.endIsMilestone?'active':''#)"></div>
    </div>
  </div>
  --></div>

</div>


{# BUTTONS #}
<div style="float: left;">
  <div style="float: left;">
    {% if entity.entity_type != 'User' %}
      <div style="float: left;">
        <button id='list_tasks_gantt_refresh_button'>Revert To Saved</button>
        <button id='list_tasks_create_task_button'>Create Task</button>
        <button id='list_tasks_gantt_save_button'>Save</button>
      </div>
      <div style="width: 100px; float: left"></div>
    {% endif %}
    <div style="float: left;">
      <button id='list_tasks_zoom_out_button'>Zoom Out</button>
      <button id='list_tasks_zoom_in_button'>Zoom In</button>
    </div>
  </div>
</div>

{# GANTT CHART #}
<div id="workSpace"
     style="padding:0px;
      overflow-y:auto;
      overflow-x:hidden;
      border:1px solid #e5e5e5;
      position:relative;
      margin:0 5px;
      width:100%;
      height:94%;">
</div>

<script type="text/javascript">
  require(['dijit/registry',
         'dojo/data/ObjectStore', 'dojox/grid/DataGrid', 'dijit/form/Button',
         'stalker/dialogCaller', 'dojo/store/JsonRest', 'dojo/request/xhr',
         'dojo/_base/lang', 'dojo/query', 'dojo/Deferred', 'dijit/Menu',
         'dijit/MenuItem', 'dijit/MenuSeparator', 'dojo/ready'],
    function(registry, ObjectStore, DataGrid, Button, dialogCaller, JsonRest,
             xhr, lang, query, Deferred, Menu, MenuItem, MenuSeparator, ready){
      ready(function(){
        
        $('#gantttemplates').loadTemplates();
        
        var ge = new GanttMaster();
        ge.init($("#workSpace"));
        
        // The Memory
        var tasks_memory;
        tasks_memory = new JsonRest({
          target: '{{ request.route_url('get_gantt_tasks', entity_id=entity.id) }}'
        });
        
        
        function loadGanttFromServer(){
          tasks_memory.query().then(function(data){
            {% if entity.entity_type != 'User' %}
              data = lang.mixin(data,{'canWrite': 1, 'canWriteOnParent': 1});
            {% endif %}
            var promise = ge.loadProject(data, Deferred);
            promise.then(function(){
              // now add the context menu to tasks
              
              // Standard menu items for Parent Tasks
              //
              // View Summary
              // ============
              // Update Task
              // Create Child Task
              // Create Dependent Task
              // ============
              // Delete
              // 
              
              // Standard menu items for Leaf Tasks
              //
              // View Summary
              // ============
              // Update Task
              // Create Child Task
              // Create Dependent Task
              // Create Booking
              // ============
              // Delete
              // 
              
              
              {# PARENT TASK MENU #}
              var parent_task_menu = new Menu({
                targetNodeIds: ['workSpace'],
                selector: '.parentTaskContextMenu'
              });
              
              
              
              {# LEAF TASK MENU #}
              var leaf_task_menu = new Menu({
                targetNodeIds: ['workSpace'],
                selector: '.leafTaskContextMenu'
              });
              
              
              {# MENU ITEMS #}
              
              {# TASK SUMMARY #}
              var view_task_summary_menuItem_creator = function(){
                return new MenuItem({
                  label: 'View Task Summary',
                  onClick: function(){
                    var node = this.getParent().currentTarget;
                    // get task id
                    var task_id = node.getAttribute('taskid');
                    alert('task id: ' + task_id);
                  }
                });
              };
              
              leaf_task_menu.addChild(view_task_summary_menuItem_creator());
              parent_task_menu.addChild(view_task_summary_menuItem_creator());
              
              {% if entity.entity_type != 'User' %}
              
              parent_task_menu.addChild(new MenuSeparator());
              leaf_task_menu.addChild(new MenuSeparator());
              
              var update_task_menuItem_creator = function(){
                return new MenuItem({
                  label: 'Update Task',
                  onClick: function(){
                    var node = this.getParent().currentTarget;
                    // get task id
                    var taskId = node.getAttribute('taskId');
                    // create and call update_task dialog
                    var dialog = registry.byId('update_task_dialog');
                    if (dialog != null){
                      dialog.destroyRecursive();
                    }
                    dialog = update_task_dialog_creator(taskId);
                    
                    dialog.set(
                      'related_field_updater',
                      saveAndLoadGantt
                    );
                    dialog.show();
                  }
                });
              };
              
              parent_task_menu.addChild(update_task_menuItem_creator());
              leaf_task_menu.addChild(update_task_menuItem_creator());
              
              
              var create_child_task_menuItem_creator = function(){
                return new MenuItem({
                  label: 'Create Child Task',
                  onClick: function(){
                    var node = this.getParent().currentTarget;
                    var taskId = node.getAttribute('taskId');
                    var dialog = registry.byId('create_task_dialog');
                    if (dialog != null){
                      dialog.destroyRecursive();
                    }
                    dialog = create_child_task_dialog_creator(taskId);

                    dialog.set(
                            'related_field_updater',
                            saveAndLoadGantt
                    );
                    dialog.show();
                  }
                });
              };
              
              parent_task_menu.addChild(create_child_task_menuItem_creator());
              leaf_task_menu.addChild(create_child_task_menuItem_creator());
              
                
              var create_dependent_task_menuItem_creator = function(){
                return new MenuItem({
                  label: 'Create Dependent Task',
                  onClick: function(){
                    var node = this.getParent().currentTarget;
                    console.log('node: ', node);
                    var taskId = node.getAttribute('taskId');
                    console.log('taskId: ', taskId);
                    var dialog = registry.byId('create_task_dialog');
                    if (dialog != null){
                      dialog.destroyRecursive();
                    }

                    dialog = create_dependent_task_dialog_creator(taskId);

                    dialog.set(
                            'related_field_updater',
                            saveAndLoadGantt
                    );
                    dialog.show();
                  }
                });
              };
              
              parent_task_menu.addChild(create_dependent_task_menuItem_creator());
              leaf_task_menu.addChild(create_dependent_task_menuItem_creator());
              
              {% endif %}
              
              var create_booking_menuItem_creator = function(){
                return new MenuItem({
                  label: 'Create Booking',
                  onClick: function(){
                    var node = this.getParent().currentTarget;
                    var task_id = node.getAttribute('taskId');
                    
                    // check if it is a leaf task
                    var task = ge.getTask(task_id);
                    //console.log(task);
                    
                    if(task.isParent()){
                      // warn the user and return
                      alert('This is a container Task,\n' +
                            'You can not enter any bookings for\n' +
                            'container Tasks!');
                      return;
                    }
                    
                    var dialog = registry.byId('create_booking_dialog');
                    if (dialog != null){
                      dialog.destroyRecursive();
                    }
                    
                    dialog = create_booking_dialog_creator(task_id);
                    
                    dialog.set(
                      'related_field_updater',
                      saveAndLoadGantt
                    );
                    
                    dialog.show();
                  }
                })
              };
              
              leaf_task_menu.addChild(create_booking_menuItem_creator());
              
              {% if entity.entity_type != 'User' %}
              
              parent_task_menu.addChild(new MenuSeparator());
              leaf_task_menu.addChild(new MenuSeparator());
              
              
              var delete_task_menuItem_creator = function(){
                return new MenuItem({
                  label: 'Delete Task'
                });
              };
              
              parent_task_menu.addChild(delete_task_menuItem_creator());
              leaf_task_menu.addChild(delete_task_menuItem_creator());
              
              
              {% endif %}
              
              leaf_task_menu.startup();
              parent_task_menu.startup();
             
            });
          });
        }
        
        loadGanttFromServer();
        
        
        function saveGanttOnServer() {
        
          //this is a simulation: save data to the local storage or to the textarea
{#          saveInLocalStorage();#}
          
          
          var prj = ge.saveProject();
          
          delete prj.resources;
          delete prj.roles;
          
          if (ge.deletedTaskIds.length>0) {
            if (!confirm("TASK_THAT_WILL_BE_REMOVED\n"+ge.deletedTaskIds.length)) {
              // cancel the action by returning null
              return;
            }
          }
          
          // xhr.post returns a `promise` use it if needed
          return xhr.post(
            '{{ request.route_url('update_gantt_tasks') }}',
            {
              method: 'POST',
              data: {CM:'save_tasks', prj: JSON.stringify(prj)}
            }
          );
        }
        
        function saveAndLoadGantt(){
          var promise = saveGanttOnServer();
          if (promise){
            promise.then(function(){
              loadGanttFromServer();
            });
          }
        }
        
        function clearGantt() {
          ge.reset();
        }
        
        function loadI18n() {
          GanttMaster.messages = {
            "CHANGE_OUT_OF_SCOPE":"NO_RIGHTS_FOR_UPDATE_PARENTS_OUT_OF_EDITOR_SCOPE",
            "START_IS_MILESTONE":"START_IS_MILESTONE",
            "END_IS_MILESTONE":"END_IS_MILESTONE",
            "TASK_HAS_CONSTRAINTS":"TASK_HAS_CONSTRAINTS",
            "GANTT_ERROR_DEPENDS_ON_OPEN_TASK":"GANTT_ERROR_DEPENDS_ON_OPEN_TASK",
            "GANTT_ERROR_DESCENDANT_OF_CLOSED_TASK":"GANTT_ERROR_DESCENDANT_OF_CLOSED_TASK",
            "TASK_HAS_EXTERNAL_DEPS":"TASK_HAS_EXTERNAL_DEPS",
            "GANTT_ERROR_LOADING_DATA_TASK_REMOVED":"GANTT_ERROR_LOADING_DATA_TASK_REMOVED",
            "ERROR_SETTING_DATES":"ERROR_SETTING_DATES",
            "CIRCULAR_REFERENCE":"CIRCULAR_REFERENCE",
            "CANNOT_DEPENDS_ON_ANCESTORS":"CANNOT_DEPENDS_ON_ANCESTORS",
            "CANNOT_DEPENDS_ON_DESCENDANTS":"CANNOT_DEPENDS_ON_DESCENDANTS",
            "INVALID_DATE_FORMAT":"INVALID_DATE_FORMAT",
            "TASK_MOVE_INCONSISTENT_LEVEL":"TASK_MOVE_INCONSISTENT_LEVEL",
        
            "GANTT_QUARTER_SHORT":"Q",
            "GANTT_SEMESTER_SHORT":"S"
          };
        }
        
        //-------------------------------------------  Get project file as JSON (used for migrate project from gantt to Teamwork) ------------------------------------------------------
        function getFile() {
          $("#gimBaPrj").val(JSON.stringify(ge.saveProject()));
          $("#gimmeBack").submit();
          $("#gimBaPrj").val("");
        }
        
{#        {% if entity.entity_type != 'User' %}#}
{#          var create_asset_button = dialogCaller({#}
{#            label: 'Create Asset',#}
{#            dialog_id: 'create_asset_dialog',#}
{#            content_creator: create_asset_dialog_creator,#}
{#            attach_to: 'list_tasks_create_asset_button',#}
{#            related_field_updater: loadGanttFromServer, #}
{#            data_id: '{{ entity.id }}'#}
{#          });#}
{#          create_asset_button.startup();#}
{#          #}
{#          var create_sequence_button = dialogCaller({#}
{#            label: 'Create Sequence',#}
{#            dialog_id: 'create_sequence_dialog',#}
{#            content_creator: create_sequence_dialog_creator,#}
{#            attach_to: 'list_tasks_create_sequence_button',#}
{#            related_field_updater: loadGanttFromServer, #}
{#            data_id: '{{ entity.id }}'#}
{#          });#}
{#          create_sequence_button.startup();#}
{# #}
{#          var create_shot_button = dialogCaller({#}
{#            label: 'Create Shot',#}
{#            dialog_id: 'create_shot_dialog',#}
{#            content_creator: create_shot_dialog_creator,#}
{#            attach_to: 'list_tasks_create_shot_button',#}
{#            related_field_updater: loadGanttFromServer, #}
{#            data_id: '{{ entity.id }}'#}
{#          });#}
{#          create_shot_button.startup();#}
{#          #}
        {% if entity.entity_type != 'User' %}
          
          // REVERT TO SAVED
          var revert_gantt_button = new Button({
            label: 'Revert To Saved',
            onClick: function(){
              loadGanttFromServer();
            }
          }, 'list_tasks_gantt_refresh_button');
          revert_gantt_button.startup();
          
          // ADD TASK
          var create_task_button = dialogCaller({
            label: 'Create Task',
            dialog_id: 'create_task_dialog',
            content_creator: create_task_dialog_creator,
            attach_to: 'list_tasks_create_task_button',
            related_field_updater: loadGanttFromServer, 
            data_id: '{{ entity.id }}'
          });
          create_task_button.startup();
          
          // SAVE
          // TODO: This should be disabled upon permission not according to the existence of a template variable
          var save_gantt_button = new Button({
            label: 'Save',
            onClick: function(){
              saveGanttOnServer().then(function(){
                alert('Tasks are saved!!!')
              });
            }
          }, 'list_tasks_gantt_save_button');
          save_gantt_button.startup();
          {% endif %}
          
          // ZOOM OUT
          var zoom_out_button = new Button({
            label: 'Zoom Out',
            onClick: function(){
              ge.gantt.zoomGantt(false);
            }
          }, 'list_tasks_zoom_out_button');
          zoom_out_button.startup();
          
          // ZOOM IN
          var zoom_in_button = new Button({
            label: 'Zoom In',
            onClick: function(){
              ge.gantt.zoomGantt(true);
            }
          }, 'list_tasks_zoom_in_button');
          zoom_in_button.startup();
          
        
      });
  });
</script>
