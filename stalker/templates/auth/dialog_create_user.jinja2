<div class='dijitDialogPaneContentArea'>
  <form id='create_user_form'>
    <table style='width: 100%;'>
      
      {# NAME #}
      <tr>
        <td class='label_column'>
          <label for='user_name'>Name</label>
        </td>
        <td class='input_column'>
          <input id='user_name'>
        </td>
      </tr>
      
      {# LOGIN NAME #}
      <tr>
        <td class='label_column'>
          <label for='user_login'>Login</label>
        </td>
        <td class='input_column'>
          <input id='user_login'>
        </td>
      </tr>
      
      {# EMAIL #}
      <tr>
        <td class='label_column'>
          <label for='user_email'>E-mail</label>
        </td>
        <td class='input_column'>
          <input id='user_email'>
        </td>
      </tr>
      
      {# PASSWORD #}
      <tr>
        <td class='label_column'>
          <label for='user_password'>Password</label>
        </td>
        <td class='input_column'>
          <input id='user_password'>
        </td>
      </tr>
      
      {# CONFIRM PASSWORD #}
      <tr>
        <td class='label_column'>
          <label for='user_confirm_password'>Confirm Password</label>
        </td>
        <td class='input_column'>
          <input id='user_confirm_password'>
        </td>
      </tr>
      
      {# DEPARTMENTS #}
      <tr>
        <td class='label_column'>
          <label for='user_departments'>Departments</label>
        </td>
        <td class='input_column'>
          <input id='user_departments'>
        </td>
        <td class='button_column'>
          <button id='user_create_department_button'>New</button>
        </td>
      </tr>
      
      {# GROUPS #}
      <tr>
        <td class='label_column'>
          <label for='user_groups'>Groups</label>
        </td>
        <td class='input_column'>
          <input id='user_groups'>
        </td>
        <td class='button_column'>
          <button id='user_create_group_button'>New</button>
        </td>
      </tr>
      
      {# TAGS #}
      <tr>
        <td class='label_column'>
          <label for='user_tags'>Tags</label>
        </td>
        <td class='input_column'>
          <input id='user_tags'>
        </td>
      </tr>
      
    </table>
  </form>
</div>

<div class='dijitDialogPaneActionBar'>
  <button id='user_submit_button'>OK</button>
  <button id='user_cancel_button'>Cancel</button>
</div>

<script type="text/javascript">
  require(['dijit/registry', 'dijit/form/Form', 'dijit/form/ValidationTextBox',
    'dijit/form/TextBox','dojo/store/Memory', 'dojo/store/JsonRest',
    'dijit/form/Button', 'stalker/TagSelect', 'stalker/submitForm',
    'stalker/fieldUpdater', 'stalker/dialogCaller', 'dojo/domReady!'],
    function(registry, Form, ValidationTextBox,TextBox, Memory, JsonRest, Button,
             TagSelect, submitForm, fieldUpdater, dialogCaller){
      
      // **********************************************************************
      // Form
      var create_user_form = new Form({
        id: 'create_user_form'
      }, 'create_user_form');
      
      
      
      
      
      // **********************************************************************
      // Name
      var name_textBox = new ValidationTextBox({
        name: 'name',
        label: 'Name',
        placeHolder: 'Enter a user name',
        required: true
      }, 'user_name');
      name_textBox.startup();
      
      
      
      
      // **********************************************************************
      // Login
      // TODO: check login availability
      var login_name_textBox = new ValidationTextBox({
        name: 'login',
        label: 'Login',
        placeHolder: 'Enter a login name',
        required: true
      }, 'user_login');
      login_name_textBox.startup();
      
      
      
      
      // **********************************************************************
      // Email
      // TODO: check email availability
      var email_textBox = new ValidationTextBox({
        name: 'email',
        label: 'e-mail',
        placeHolder: 'Enter an e-mail',
        required: true
      }, 'user_email');
      email_textBox.startup();
      
      
      
      
      // **********************************************************************
      // Password
      var password_textBox = new ValidationTextBox({
        name: 'password',
        label: 'Password',
        type: 'password',
        placeHolder: 'Enter a password',
        required: true
      }, 'user_password');
      password_textBox.startup();
      
      
      
      
      // **********************************************************************
      // Re-Type Password
      var confirm_password_textBox = new ValidationTextBox({
        label: 'Confirm Password',
        type: 'password',
        required: true,
        placeHolder: 'Re-enter password',
        invalidMessage: "Passwords doesn't match!",
        validator: function(value, constrains){
          // check if the value matches the password field
          var pass = password_textBox.value;
          if (value != pass){
            return false;
          } else {
            return true;
          }
        }
      }, 'user_confirm_password');
      confirm_password_textBox.startup();
      
      
      
      
      // **********************************************************************
      // Departments
      var departments_tagSelect;
      var create_department_button;

      {% if department %}
        departments_tagSelect = new TextBox({
          name: 'department_ids',
          label: 'Department',
          value: '{{ department.name }}',
          disabled: true
        }, 'user_departments');

        departments_tagSelect.startup();

        create_department_button = new Button({
          disabled: true,
          label: 'New'
        },'user_create_department_button');
        create_department_button.startup();

      {% else %}
        var departments_jsonRest = new JsonRest({
          target: 'get/departments'
        });

        departments_tagSelect = new TagSelect({
          name: 'department_ids',
          label: 'Department',
          placeHolder: 'Select departments'
        }, 'user_departments');
        departments_tagSelect.startup();

        var departments_field_updater = fieldUpdater({
          memory: departments_jsonRest,
          widget: departments_tagSelect
        });
        departments_field_updater({animate: false});

        // New Department Button
        create_department_button = dialogCaller({
          label: 'New',
          dialog_id: 'create_department_dialog',
          content_creator: create_create_department_dialog,
          attach_to: 'user_create_department_button',
          related_field_updater: departments_field_updater
        });
        create_department_button.startup();

      {% endif %}

      

      
{#      var result_dep = departments_jsonRest.query().then(function(data){#}
{#        var departments_memory = new Memory({data: data});#}
{#        departments_tagSelect.set('store', departments_memory);#}
{#      });#}
      
      // The Updater

      

      
      
      
      
      // ********************************************************************** 
      // Groups
      var groups_jsonRest = new JsonRest({
        target: 'get/groups'
      });
      
      var groups_tagSelect = new TagSelect({
        name: 'group_ids',
        placeHolder: 'Select groups'
      }, 'user_groups');
      groups_tagSelect.startup();
      
      var result_group = groups_jsonRest.query().then(function(data){
        var groups_memory = new Memory({data: data});
        groups_tagSelect.set('store', groups_memory);
      });
      
      // The Updater
      var groups_field_updater = fieldUpdater({
        memory: groups_jsonRest,
        widget: groups_tagSelect
      });
      
      // New Group Button
      var create_group_button = dialogCaller({
        label: 'New',
        dialog_id: 'create_group_dialog',
        content_creator: create_create_group_dialog,
        attach_to: 'user_create_group_button',
        related_field_updater: groups_field_updater
      }, 'user_create_group');
      create_group_button.startup();
      
      
      
      
      // **********************************************************************
      // Tags
      var tags_tagSelect = new TagSelect({
        name: 'tags',
        type: 'TextBox'
      }, 'user_tags');
      tags_tagSelect.startup();
      
      
      
      
      // **********************************************************************
      // Submit Button
      var submit_button = new Button({
        label: 'OK',
        type: 'button',
        onClick: function(){
          submitForm({
            dialog: registry.byId('create_user_dialog'),
            form: create_user_form,
            additional_data: {submitted: 'create'},
            {% if department %}
              url: 'create/user/{{department.id}}',
            {% else %}
              url: 'create/user/-1',
            {% endif %}
            method: 'POST'
          });
        }
      }, 'user_submit_button');
      submit_button.startup();
      
      // **********************************************************************
      // Cancel Button
      var cancel_button = new Button({
        label: 'Cancel',
        type: 'button',
        onClick: function(){
          registry.byId('create_user_dialog').destroyRecursive();
        }
      }, 'user_cancel_button');
      cancel_button.startup();
      
      create_user_form.startup();
      
  });
</script>
