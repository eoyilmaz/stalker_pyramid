{# Stalker a Production Asset Management System
 Copyright (C) 2009-2013 Erkan Ozgur Yilmaz
 
 This file is part of Stalker.
 
 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation;
 version 2.1 of the License.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
#}
<div class='dijitDialogPaneContentArea'>
    <form id='user_form'>
        <table style='width: 100%;'>

            {# NAME #}
            <tr>
                <td class='label_column'>
                    <label for='user_name'>Name</label>
                </td>
                <td class='input_column'>
                    <input id='user_name'>
                </td>
            </tr>

            {# LOGIN NAME #}
            <tr>
                <td class='label_column'>
                    <label for='user_login'>Login</label>
                </td>
                <td class='input_column'>
                    <input id='user_login'>
                </td>
            </tr>

            {# EMAIL #}
            <tr>
                <td class='label_column'>
                    <label for='user_email'>E-mail</label>
                </td>
                <td class='input_column'>
                    <input id='user_email'>
                </td>
            </tr>

            {# PASSWORD #}
            <tr>
                <td class='label_column'>
                    <label for='user_password'>Password</label>
                </td>
                <td class='input_column'>
                    <input id='user_password'>
                </td>
            </tr>

            {# CONFIRM PASSWORD #}
            <tr>
                <td class='label_column'>
                    <label for='user_confirm_password'>Confirm Password</label>
                </td>
                <td class='input_column'>
                    <input id='user_confirm_password'>
                </td>
            </tr>

            {# DEPARTMENTS #}
            <tr>
                <td class='label_column'>
                    <label for='user_departments'>Departments</label>
                </td>
                <td class='input_column'>
                    <input id='user_departments'>
                </td>
                <td class='button_column'>
                    <button id='user_create_department_button'>New</button>
                </td>
            </tr>
            
            
            {# GROUPS #}
            <tr>
                <td class='label_column'>
                    <label for='user_groups'>Groups</label>
                </td>
                <td class='input_column'>
                    <input id='user_groups'>
                </td>
                <td class='button_column'>
                    <button id='user_create_group_button'>New</button>
                </td>
            </tr>

            {# TAGS #}
            <tr>
                <td class='label_column'>
                    <label for='user_tags'>Tags</label>
                </td>
                <td class='input_column'>
                    <input id='user_tags'>
                </td>
            </tr>

        </table>
    </form>
</div>

<div class='dijitDialogPaneActionBar'>
    <button id='user_submit_button'>OK</button>
    <button id='user_cancel_button'>Cancel</button>
</div>

<script type="text/javascript">
    require([
        'dojo/store/Memory',
        'dojo/store/JsonRest',

        'dijit/form/Form',
        'dijit/form/ValidationTextBox',
        'dijit/form/TextBox',
        'dijit/form/Button',

        'stalker/dialogs',
        'stalker/TagSelect',
        'stalker/submitForm',
        'stalker/fieldUpdater',
        'stalker/dialogCaller',
        'stalker/fields/tagField',

        'dojo/domReady!'
    ], function (Memory, JsonRest, Form, ValidationTextBox, TextBox, Button,
                 dialogs, TagSelect, submitForm, fieldUpdater, dialogCaller,
                 tagField) {

        // ********************************************************************
        // Generate some default values
        var mode = '{{ mode }}';
        var url;
        var name;
        var login;
        var email;
        var password;
        var selected_departments;
        var selected_groups;
        var selected_tags;
        
        {% if mode=='CREATE' %}
            url = 'create/user';
            {% if department %}
                selected_departments = [{{ department.id }}];
            {% endif %}
            {% if group %}
                selected_groups = [{{ group.id }}];
            {% endif %}
        {% elif mode=='UPDATE'%}
            url = 'update/user';
            name = '{{ user.name }}';
            login = '{{ user.login }}';
            email = '{{ user.email }}';
            password = 'DONTCHANGE';
            selected_departments = [
                {% for department in user.departments %}
                    {{ department.id }},
                {% endfor %}
            ];
            selected_groups = [
                {% for group in user.groups %}
                    {{ group.id }},
                {% endfor %}
            ];
            selected_tags = [
                {% for tag in user.tags %}
                    {{ tag.id }},
                {% endfor %}
            ];
        {% endif %}

        // ********************************************************************
        // Form
        var user_form = new Form({}, 'user_form');

        var dialog = user_form.getParent();

        // ********************************************************************
        // Name
        var name_textBox = new ValidationTextBox({
            name: 'name',
            label: 'Name',
            placeHolder: 'Enter a user name',
            required: true,
            value: name
        }, 'user_name');
        name_textBox.startup();


        // ********************************************************************
        // Login
        var login_textBox = new ValidationTextBox({
            name: 'login',
            label: 'Login',
            placeHolder: 'Enter a login name',
            required: true,
            value: login,
            onChange: function () {
                // reset the validator
                this.validator = login_textBox_orig_validator;
            }
        }, 'user_login');
        login_textBox.startup();

        // because the submit button is changing the validator,
        // store the original validator to be replaced on change
        var login_textBox_orig_validator = login_textBox.validator;


        // ********************************************************************
        // Email
        var email_textBox = new ValidationTextBox({
            name: 'email',
            label: 'e-mail',
            placeHolder: 'Enter an e-mail',
            value: email,
            required: true
        }, 'user_email');
        email_textBox.startup();

        // because the submit button is changing the validator,
        // store the original validator to be replaced on change
        var email_textBox_orig_validator = email_textBox.validator;


        // ********************************************************************
        // Password
        var password_textBox = new ValidationTextBox({
            name: 'password',
            label: 'Password',
            type: 'password',
            placeHolder: 'Enter a password',
            value : password,
            required: true
        }, 'user_password');
        password_textBox.startup();


        // ********************************************************************
        // Re-Type Password
        var confirm_password_textBox = new ValidationTextBox({
            label: 'Confirm Password',
            type: 'password',
            required: true,
            placeHolder: 'Re-enter password',
            invalidMessage: "Passwords doesn't match!",
            validator: function (value, constrains) {
                // check if the value matches the password field
                var pass = password_textBox.value;
                return value == pass;
            },
            value: password
        }, 'user_confirm_password');
        confirm_password_textBox.startup();


        // ********************************************************************
        // Departments
        var departments_tagSelect;
        var create_department_button;
        
        var departments_jsonRest = new JsonRest({
            target: 'get/departments'
        });
        
        departments_tagSelect = new TagSelect({
            name: 'department_ids',
            label: 'Department',
            placeHolder: 'Select departments',
            {% if not has_permission('Update_Department') %}
                disabled: true
            {% endif %}
        }, 'user_departments');
        departments_tagSelect.startup();

        var departments_field_updater = fieldUpdater({
            memory: departments_jsonRest,
            widget: departments_tagSelect,
            selected: selected_departments
        });
        departments_field_updater({animate: false});
    
        // New Department Button
        create_department_button = dialogCaller({
            label: 'New',
            dialog_id: 'department_dialog',
            content_creator: dialogs.create_department_dialog,
            attach_to: 'user_create_department_button',
            related_field_updater: departments_field_updater
        });
        create_department_button.startup();

        {% if not has_permission('Create_Department') %}
            create_department_button.set('disabled', true);
        {% endif %}

        // ********************************************************************
        // Groups
        var groups_tagSelect;
        var create_group_button;

        // Store
        var groups_jsonRest = new JsonRest({
            target: 'get/groups'
        });
        
        groups_tagSelect = new TagSelect({
            name: 'group_ids',
            placeHolder: 'Select groups',
            {% if not has_permission('Update_Group') %}
                disabled: true
            {% endif %}
        }, 'user_groups');
        groups_tagSelect.startup();

        //var result_group = groups_jsonRest.query().then(function (data) {
        //    var groups_memory = new Memory({data: data});
        //    groups_tagSelect.set('store', groups_memory);
        //});

        // The Updater
        var groups_field_updater = fieldUpdater({
            memory: groups_jsonRest,
            widget: groups_tagSelect,
            selected: selected_groups
        });
        groups_field_updater({animate: false});
        
        // New Group Button
        create_group_button = dialogCaller({
            label: 'New',
            dialog_id: 'group_dialog',
            content_creator: dialogs.create_group_dialog,
            attach_to: 'user_create_group_button',
            related_field_updater: groups_field_updater
        }, 'user_create_group');
        create_group_button.startup();
    
        {% if not has_permission('Create_Group') %}
            create_group_button.set('disabled', true);
        {% endif %}


        // ********************************************************************
        // Tags
        var tags_tagSelect = tagField({
            attach_to: 'user_tags',
            selected_tags: selected_tags
        });
        tags_tagSelect.startup();


        // ********************************************************************
        // Submit Button
        var submit_button = new Button({
            label: 'OK',
            type: 'button',
            onClick: function () {
                // validate login name
                // check login availability
                var login_memory = new JsonRest({
                    target: 'check/login_availability/' + login_textBox.value
                });

                var login_result = login_memory.query().then(function (data) {
                    var login = login_textBox.value;

                    // check of the login if
                    // mode is CREATE
                    // or
                    // mode is UPDATE and the login is different then previous

                    if (data['available'] == 0) {
                        {# TODO: Update this part, this is absolutely dirty! #}
                        {% if mode=='UPDATE' %}
                            if ( login != '{{ user.login }}' ) {
                        {% endif %}
                            login_textBox.invalidMessage = 'This login is not available';
                            login_textBox.validator = function () {
                                return false;
                            };
                        {% if mode=='UPDATE' %}
                            }
                        {% endif %}
                    } else {
                        login_textBox.validator = function () {
                            return true;
                        };
                    }

                }).then(function () {
                    var email_memory = new JsonRest({
                        target: 'check/email_availability/' + email_textBox.value
                    });

                    var email_result = email_memory.query().then(function (data) {

                        var email = email_textBox.value;

                        if (data['available'] == 0) {
                            {# TODO: Update this part, again this is absolutely dirty! #}
                            {% if mode=='UPDATE' %}
                                if (email != '{{ user.email }}' ) {
                            {% endif %}
                                    email_textBox.invalidMessage = 'This email is not available';
                                    email_textBox.validator = function () {
                                        return false;
                                    };
                            {% if mode=='UPDATE' %}
                                }
                            {% endif %}
                        } else {
                            email_textBox.validator = function () {
                                return true;
                            };
                        }
                    }).then(function () {
                        if (login_textBox.validate()) {
                            if (email_textBox.validate()) {
                                submitForm({
                                    dialog: dialog,
                                    form: user_form,
                                    method: 'POST',
                                    url: url,
                                    additional_data: {
                                        {% if department %}
                                            department_id: {{ department.id }},
                                        {% endif %}
                                        {% if mode=='UPDATE' %}
                                            user_id: {{user.id}}
                                        {% endif %}
                                    }
                                });
                            } else {
                                // focus on email_textBox to show the error message
                                email_textBox.focus();
                            }
                        } else {
                            // focus on login_textBox to show the error message
                            login_textBox.focus();
                        }
                    });
                });
            }
        }, 'user_submit_button');
        submit_button.startup();

        // ************************************************************
        // Cancel Button
        var cancel_button = new Button({
            label: 'Cancel',
            type: 'button',
            onClick: function () {
                dialog.destroyRecursive();
            }
        }, 'user_cancel_button');
        cancel_button.startup();
        
        user_form.startup();

    });
</script>
