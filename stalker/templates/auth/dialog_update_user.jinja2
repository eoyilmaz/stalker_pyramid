{# Stalker a Production Asset Management System
 Copyright (C) 2009-2013 Erkan Ozgur Yilmaz

 This file is part of Stalker.

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation;
 version 2.1 of the License.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
#}
<div class='dijitDialogPaneContentArea'>
  <form id='update_user_form'>
    <table style='width: 100%;'>

        {# NAME #}
      <tr>
        <td class='label_column'>
          <label for='update_user_name'>Name</label>
        </td>
        <td class='input_column'>
          <input id='update_user_name'>
        </td>
      </tr>

        {# LOGIN NAME #}
      <tr>
        <td class='label_column'>
          <label for='update_user_login'>Login</label>
        </td>
        <td class='input_column'>
          <input id='update_user_login'>
        </td>
      </tr>

        {# EMAIL #}
      <tr>
        <td class='label_column'>
          <label for='update_user_email'>E-mail</label>
        </td>
        <td class='input_column'>
          <input id='update_user_email'>
        </td>
      </tr>

        {# PASSWORD #}
      <tr>
        <td class='label_column'>
          <label for='update_user_password'>Password</label>
        </td>
        <td class='input_column'>
          <input id='update_user_password'>
        </td>
      </tr>

        {# CONFIRM PASSWORD #}
      <tr>
        <td class='label_column'>
          <label for='update_user_confirm_password'>Confirm Password</label>
        </td>
        <td class='input_column'>
          <input id='update_user_confirm_password'>
        </td>
      </tr>

        {# DEPARTMENTS #}
      <tr>
        <td class='label_column'>
          <label for='update_user_departments'>Departments</label>
        </td>
        <td class='input_column'>
          <input id='update_user_departments'>
        </td>
        <td class='button_column'>
          <button id='update_user_create_department_button'>New</button>
        </td>
      </tr>

        {# GROUPS #}
      <tr>
        <td class='label_column'>
          <label for='update_user_groups'>Groups</label>
        </td>
        <td class='input_column'>
          <input id='update_user_groups'>
        </td>
        <td class='button_column'>
          <button id='update_user_create_group_button'>New</button>
        </td>
      </tr>

        {# TAGS #}
      <tr>
        <td class='label_column'>
          <label for='update_user_tags'>Tags</label>
        </td>
        <td class='input_column'>
          <input id='update_user_tags'>
        </td>
      </tr>

    </table>
  </form>
</div>

<div class='dijitDialogPaneActionBar'>
  <button id='update_user_submit_button'>OK</button>
  <button id='update_user_cancel_button'>Cancel</button>
</div>

<script type="text/javascript">
require(['dijit/registry', 'dijit/form/Form', 'dijit/form/ValidationTextBox',
  'dijit/form/TextBox','dojo/store/Memory', 'dojo/store/JsonRest',
  'dijit/form/Button', 'stalker/TagSelect', 'stalker/submitForm',
  'stalker/fieldUpdater', 'stalker/dialogCaller', 'dojo/domReady!'],
        function(registry, Form, ValidationTextBox,TextBox, Memory, JsonRest, Button,
                 TagSelect, submitForm, fieldUpdater, dialogCaller){

          // **********************************************************************
          // Form
          var update_user_form = new Form({
            id: 'update_user_form'
          }, 'update_user_form');





          // **********************************************************************
          // Name
          var name_textBox = new ValidationTextBox({
            name: 'name',
            label: 'Name',
            placeHolder: 'Enter a user name',
            value: '{{ user.name }}',
            required: true
          }, 'update_user_name');
          name_textBox.startup();




          // **********************************************************************
          // Login
          // TODO: check login availability
          var login_name_textBox = new ValidationTextBox({
            name: 'login',
            label: 'Login',
            placeHolder: 'Enter a login name',
            required: true,
            value: '{{ user.login }}'
          }, 'update_user_login');
          login_name_textBox.startup();




          // **********************************************************************
          // Email
          // TODO: check email availability
          var email_textBox = new ValidationTextBox({
            name: 'email',
            label: 'e-mail',
            placeHolder: 'Enter an e-mail',
            required: true,
            value: '{{ user.email }}'
          }, 'update_user_email');
          email_textBox.startup();




          // **********************************************************************
          // Password
          var password_textBox = new ValidationTextBox({
            name: 'password',
            label: 'Password',
            type: 'password',
            placeHolder: 'Enter a password',
            required: true
          }, 'update_user_password');
          password_textBox.startup();




          // **********************************************************************
          // Re-Type Password
          var confirm_password_textBox = new ValidationTextBox({
            label: 'Confirm Password',
            type: 'password',
            required: true,
            placeHolder: 'Re-enter password',
            invalidMessage: "Passwords doesn't match!",
            validator: function(value, constrains){
              // check if the value matches the password field
              var pass = password_textBox.value;
              if (value != pass){
                return false;
              } else {
                return true;
              }
            }
          }, 'update_user_confirm_password');
          confirm_password_textBox.startup();




          // **********************************************************************
          // Departments


          var departments_jsonRest = new JsonRest({
            target: 'get/departments'
          });

          var departments_tagSelect = new TagSelect({
            name: 'department_ids',
            label: 'Department',
            placeHolder: 'Select departments'
          }, 'update_user_departments');
          departments_tagSelect.startup();

          var departments_field_updater = fieldUpdater({
            memory: departments_jsonRest,
            widget: departments_tagSelect,
            selected: [
              {% for department in user.departments %}
                {{ department.id }},
              {% endfor %}
            ]

          });
          departments_field_updater({animate: false});

          // New Department Button
          var create_department_button = dialogCaller({
            label: 'New',
            dialog_id: 'create_department_dialog',
            content_creator: create_department_dialog_creator,
            attach_to: 'update_user_create_department_button',
            related_field_updater: departments_field_updater
          });
          create_department_button.startup();






          {#      var result_dep = departments_jsonRest.query().then(function(data){#}
          {#        var departments_memory = new Memory({data: data});#}
          {#        departments_tagSelect.set('store', departments_memory);#}
          {#      });#}

          // The Updater







          // **********************************************************************
          // Groups
          var groups_jsonRest = new JsonRest({
            target: 'get/groups'
          });

          var groups_tagSelect = new TagSelect({
            name: 'group_ids',
            placeHolder: 'Select groups'
          }, 'update_user_groups');
          groups_tagSelect.startup();

          var result_group = groups_jsonRest.query().then(function(data){
            var groups_memory = new Memory({data: data});
            groups_tagSelect.set('store', groups_memory);
          });

          // The Updater
          var groups_field_updater = fieldUpdater({
            memory: groups_jsonRest,
            widget: groups_tagSelect
{#            selected: [#}
{#              {% for group in user.groups %}#}
{#                {{ group.id }},#}
{#              {% endfor %}#}
{#            ]#}
          });

          // New Group Button
          var create_group_button = dialogCaller({
            label: 'New',
            dialog_id: 'create_group_dialog',
            content_creator: create_group_dialog_creator,
            attach_to: 'update_user_create_group_button',
            related_field_updater: groups_field_updater
          }, 'user_create_group');
          create_group_button.startup();


          // **********************************************************************
          // Tags
          var tags_tagSelect = new TagSelect({
            name: 'tags',
            type: 'TextBox'
          }, 'update_user_tags');
          tags_tagSelect.startup();

          var selected_tags = [
            {% for tag in user.tags %}
              {{ tag.name }},
            {% endfor %}
          ];

          alert({{ user.tags }});

          tags_tagSelect.set('value',selected_tags);



          // **********************************************************************
          // Submit Button
          var submit_button = new Button({
            label: 'OK',
            type: 'button',
            onClick: function(){
              submitForm({
                dialog: registry.byId('update_user_dialog'),
                form: update_user_form,
                additional_data: {submitted: 'update'},
                url: 'update/user/{{user.id}}',
                method: 'POST'
              });
            }
          }, 'update_user_submit_button');
          submit_button.startup();

          // **********************************************************************
          // Cancel Button
          var cancel_button = new Button({
            label: 'Cancel',
            type: 'button',
            onClick: function(){
              registry.byId('update_user_dialog').destroyRecursive();
            }
          }, 'update_user_cancel_button');
          cancel_button.startup();

          update_user_form.startup();

        });
</script>
