{# Stalker a Production Asset Management System
 Copyright (C) 2009-2013 Erkan Ozgur Yilmaz
 
 This file is part of Stalker.
 
 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation;
 version 2.1 of the License.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
#}
<div class='dijitDialogPaneContentArea'>
    <form id='department_form'>
        <table style='width: 100%'>

            {# NAME #}
            <tr>
                <td class='label_column'>
                    <label for='department_name'>Name</label>
                </td>
                <td class='input_column'>
                    <input id='department_name'>
                </td>
            </tr>

            {# DESCRIPTION #}
            <tr>
                <td class='label_column'>
                    <label for='department_description'>Description</label>
                </td>
                <td class='input_column'>
                    <input id='department_description'>
                </td>
            </tr>

            {# LEAD #}
            <tr>
                <td class='label_column'>
                    <label for='department_lead'>Lead</label>
                </td>
                <td class='input_column'>
                    <input id='department_lead'>
                </td>
            </tr>

            {# TAGS #}
            <tr>
                <td class='label_column'>
                    <label for='department_tags'>Tags</label>
                </td>
                <td class='input_column'>
                    <input id='department_tags'>
                </td>
            </tr>

        </table>
    </form>
</div>

<div class='dijitDialogPaneActionBar'>
    <button id='department_submit_button'>OK</button>
    <button id='department_cancel_button'>Cancel</button>
</div>


<script type='text/javascript'>
    require([
        'dojo/store/JsonRest',

        'dijit/form/Form',
        'dijit/form/Button',
        'dijit/form/ValidationTextBox',
        'dijit/form/TextBox',
        'dijit/form/FilteringSelect',

        'stalker/submitForm',
        'stalker/fieldUpdater',
        'stalker/fields/tagField',

        'dojo/domReady!'
    ], function (JsonRest, Form, Button, ValidationTextBox, TextBox,
                 FilteringSelect, submitForm, fieldUpdater, tagField) {

        // Generate default values
        var url;
        var name;
        var description;
        var lead_id;
        var additional_data;
        var selected_tags;

        {# fill values based on the dialog mode #}
        {% if mode == 'CREATE' %}
            url = '{{ request.route_url("create_department") }}';
        {% elif mode == 'UPDATE' %}
            url = '{{ request.route_url("update_department") }}';
            name = '{{ department.name }}';
            description = '{{ department.description }}';
            additional_data = {
                   'department_id': '{{ department.id }}'
            };
            {% if department.lead %}
              lead_id = '{{ department.lead.id }}';
            {% endif %}
            selected_tags = [
                {% for tag in department.tags %}
                    '{{ tag.id }}',
                {% endfor %}
            ];

        {% endif %}

        // ********************************************************************
        // Form
        var department_form = new Form({
            id: 'department_form'
        }, 'department_form');
        department_form.startup();

        var dialog = department_form.getParent();

        // ********************************************************************
        // Name
        var name_validationTextBox = new ValidationTextBox({
            name: 'name',
            label: 'Name',
            placeHodler: 'Enter Department Name',
            required: true,
            value: name
        }, 'department_name');
        name_validationTextBox.startup();

        // ********************************************************************

        // Description
        var description_textBox = new TextBox({
            name: 'description',
            label: 'Description',
            placeHolder: 'Enter description',
            value: description
        }, 'department_description');
        description_textBox.startup();

        // ********************************************************************
        // Lead
        //
        // There is no need to use the JsonRest here, but we have the
        // stalker.fieldUpdater which helps a lot when filling a widget with data.

        // Memory
        var lead_memory = new JsonRest({
            target: '{{ request.route_url("get_users") }}'
            //target: 'get/users'
        });

        // Widget
        var lead_filteringSelect = FilteringSelect({
            name: 'lead_id',
            label: 'Leader',
            required: false
        }, 'department_lead');
        lead_filteringSelect.startup();


        // Updater
        var lead_updater = fieldUpdater({
            memory: lead_memory,
            widget: lead_filteringSelect,
            selected: lead_id
        });

        // fill the field by calling the updater
        lead_updater({animate: false});

        // ********************************************************************
        // Tags
        var tags_tagSelect = tagField({
            attach_to: 'department_tags',
            selected_tags: selected_tags
        });
        tags_tagSelect.startup();

        // ********************************************************************
        // Submit Button
        var submit_button = new Button({
            label: 'OK',
            type: 'button',
            onClick: function () {
                 submitForm({
                    dialog: dialog,
                    form: department_form,
                    additional_data: additional_data,
                    url: url,
                    method: 'POST'
                });
            }
        }, 'department_submit_button');
        submit_button.startup();

        // ********************************************************************
        // Cancel Button
        var cancel_button = new Button({
            label: 'Cancel',
            type: 'button',
            onClick: function () {
                dialog.destroyRecursive();
            }
        }, 'department_cancel_button');
        cancel_button.startup();

    });
</script>
