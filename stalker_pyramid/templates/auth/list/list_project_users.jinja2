{% extends "base.jinja2" %}

{# BREADCRUMBS #}
{% block breadcrumbs %}

    {% set page_title='Users' %}
    {% include 'breadcrumb/breadcrumbs.jinja2' %}

{% endblock breadcrumbs %}

{# SIDEBAR #}
{% block sidebar %}

    {% include 'sidebar.jinja2' %}

{% endblock sidebar %}

{# PAGE-CONTENT #}
{% block page_content %}

{#    {% set page_title='Users' %}#}
{#    {% include 'page_header.jinja2' %}#}

    <ul class="nav nav-tabs" id="client_tabs"></ul>

    <div id="loading_spinner" class="well well-sm">
        <div class="inline middle blue bigger-110">
            <i class="icon-spinner icon-spin orange bigger-125"></i> Loading content...
        </div>
    </div>

    <div id="content" class="widget-box hide">
        <div class="widget-header widget-header-small header-color-user">
            <h5 id="items_header" class="smaller"></h5>
            <div class="widget-toolbar">
                {% if has_permission('Update_Project') %}
                    &nbsp
                    <a id="add_button"
                       data-target="#dialog_template"
                       data-toggle="modal"
                       data-keyboard=false
                       href="{{ request.route_path('append_user_to_entity_dialog', id=entity.id, _query={'came_from': request.current_route_path()}) }}"
                       class="white">
                        <i class="icon-plus"></i>
                        ADD
                    </a>
                    &nbsp&nbsp
                {% endif %}

                <a href="#" data-action="collapse">
                    <i class="icon-chevron-down"></i>
                </a>
            </div>
        </div>
        <div class="widget-body">
            <div class="widget-main" style="padding: 0px">
                <div class="space-5"></div>
                <div id="items_table_wrapper" class="dataTables_wrapper" role="grid">
                    <div class="row-fluid">
                        <div class="span6">
                        </div>
                        <div class="span6">
                            <div class="dataTables_filter" id="items_table_filter">
                                <label>Search: <input type="text" id="search_cells" aria-controls="items_table">
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row-fluid">
                    <table id="grid-table"></table>
                    <div id="grid-pager"></div>
                </div>
            </div>
        </div>
    </div>

{% endblock page_content %}

{% block extrascripts %}
    <script type="text/javascript">
        if("ontouchend" in document) document.write("<script src='{{ request.static_url("stalker_pyramid:static/ace/js/jquery.mobile.custom.min.js") }}'>"+"<"+"/script>");
    </script>
    <script src='{{ request.static_url("stalker_pyramid:static/jqGrid/js/i18n/grid.locale-en.js") }}'></script>
    <script src='{{ request.static_url("stalker_pyramid:static/jqGrid/js/jquery.jqGrid.js") }}'></script>
    <script src='{{ request.static_url("stalker_pyramid:static/jqGrid/js/jquery.jqGrid.min.js") }}'></script>
    <script src='{{ request.static_url("stalker_pyramid:static/jqGrid/plugins/ui.multiselect.js") }}'></script>
{#    <script src='{{ request.static_url("stalker_pyramid:static/jqGrid/plugins/ui.multiselect.css") }}'></script>#}
    <script>
        $.jgrid.defaults.autowidth = true;
        $.jgrid.defaults.responsive = true;
        $.jgrid.defaults.styleUI = 'Bootstrap';
    </script>

    {% raw %}
    <script id="tmpl_clientLink" type="text/x-dot-template">
        <li class="{{=it.class}}">
            <a data-toggle="tab" href="" id="{{=it.id}}" >
                {{=it.name}}
            </a>
        </li>
    </script>
    {% endraw %}

    <script type="text/javascript">
        $(document).ready(function () {
            var lastSelection;
            var grid_selector = "#grid-table";
            var grid = jQuery(grid_selector);

            var link_template = doT.template($('#tmpl_clientLink').html());

            var client_tabs = $('#client_tabs');
            var client = { 'id':'All',
                           'name':'ALL',
                           'class':'active'
                }

            client_tabs.append(link_template(client));

            $('#All').on('click', function (e) {
                filterTableData('', null);
            });

            {% for client in entity.clients %}

                client = { 'id':'{{ client.id }}',
                           'name':'{{ client.name }}',
                           'class':''
                };
                client_tabs.append(link_template(client));

                $('#' + client.id).on('click', function (e) {
                    filterTableData('{{ client.name }}', '{{ client.id }}');
                });
            {% endfor %}



            function filterTableData(cName, cId){

                var add_button = $("#add_button");
                console.log("cId: "+ cId);
{#                add_button.attr('href', "{{ request.route_path('append_user_to_entity_dialog', client_id=cId, id=entity.id, _query={'came_from': request.current_route_path()}) }}");#}
                add_button.attr('href', "/entities/{{ entity.id }}/user/append/dialog?client_id="+cId);

                jQuery(grid_selector).jqGrid('filterInput', cName);
            }

            function makelistLink(array, list_type){

                var list_str = "";
                for(var k=0; k<array.length;k++){
                    list_str += "<a href='/"+list_type+"/"+array[k].id+"/view'>"+array[k].name+"</a><br/>";
                }
                return list_str

            }

            function editRow(id) {
                if (id && id !== lastSelection) {

                    grid.restoreRow(lastSelection);
                    var editParameters = {
                        keys: true,
                        successfunc: editSuccessful,
                        errorfunc: editFailed,
                        restoreAfterError : false
                    };

                    grid.jqGrid('editRow', id, editParameters);
                    lastSelection = id;
                }
            }

            function editSuccessful(data, stat) {
                grid.restoreRow(lastSelection);
                return [true,"",""];
            }

            function editFailed(rowID, response) {
                $.jgrid.info_dialog($.jgrid.errors.errcap,'<div class="ui-state-error">RowID:'+rowID+ ' :  '+ response.responseJSON.error +'</div>', $.jgrid.edit.bClose,{buttonalign:'right'})
                alert(response.responseJSON.error);
            }

            //replace icons with FontAwesome icons like above
            function updatePagerIcons(table) {
                var replacement =
                {
                    'ui-icon-seek-first' : 'icon-double-angle-left bigger-140',
                    'ui-icon-seek-prev' : 'icon-angle-left bigger-140',
                    'ui-icon-seek-next' : 'icon-angle-right bigger-140',
                    'ui-icon-seek-end' : 'icon-double-angle-right bigger-140'
                };
                $('.ui-pg-table:not(.navtable) > tbody > tr > .ui-pg-button > .ui-icon').each(function(){
                    var icon = $(this);
                    var $class = $.trim(icon.attr('class').replace('ui-icon', ''));

                    if($class in replacement) icon.attr('class', 'ui-icon '+replacement[$class]);
                })
            }

            $.getJSON('/entities/{{ entity.id }}/users/').then(function (entry_data) {

                var grid_data = entry_data;
                for(var j=0; j<grid_data.length; j++ ){
                    grid_data[j].remove_action = "<a data-target='#dialog_template' data-toggle='modal' data-keyboard=false href='/entities/{{ entity.id }}/"+grid_data[j].id+"/remove/dialog'> <i class='icon-trash'></i></a>"
                    grid_data[j].name = "<a href='/users/"+grid_data[j].id+"/view'>"+grid_data[j].name+"</a>";
                    grid_data[j].clients_list = makelistLink(grid_data[j].clients, 'clients');
                    grid_data[j].departments_list = makelistLink(grid_data[j].departments, 'departments');
                    grid_data[j].groups_list = makelistLink(grid_data[j].groups, 'groups');
                    if(!grid_data[j].rate){
                        grid_data[j].rate =grid_data[j].studio_rate
                    }


                }

                $.getJSON('/roles/').then(function(available_roles){

                    var available_rolelist = [];
                    for (var k=0; k < available_roles.length; k++){
                        available_rolelist.push(available_roles[k].name);
                    }

                    $.getJSON('/types/?target_entity_type=User').then(function(available_type){
                        var available_type_as_list = [];
                        for (var i=0; i < available_type.length; i++){
                            available_type_as_list.push(available_type[i].name);
                        }

                        jQuery(function($) {
                            var grid_selector = "#grid-table";
                            var pager_selector = "#grid-pager";
                            jQuery(grid_selector).jqGrid({
                                //direction: "rtl",
                                data: grid_data,
                                datatype: "local",
                                colNames:[ 'Id',
                                           'Name',
                                           'Email',
                                            {% if has_permission('Read_Budget') and (entity.entity_type == 'Project' or entity.entity_type == 'Studio')%}'Rate',{% endif %}
                                            'Type Name',
                                            {% if entity.entity_type != 'Studio' %}'Role',{% endif %}
                                            'Client',
                                            'Department',
                                            'Group',
                                            ''],
                                colModel:[
                                    {name:'id', index:'id', width:80, editable: false},
                                    {name:'name', index:'name', width:200, editable: false},
                                    {name:'email', index:'email', width:200, editable: false},
                                    {% if has_permission('Read_Budget') and (entity.entity_type == 'Project' or entity.entity_type == 'Studio') %}
                                        {name:'rate', index:'rate', width:200, editable: true},
                                    {% endif %}
                                    {
                                        name:'type_name',
                                        index:'type_name',
                                        width:200,
                                        editable: {% if has_permission('Update_User') %} true {% else %} false {% endif %},
                                        edittype:"text",
                                        editoptions: {
                                            dataInit: function (element) {
                                                window.setTimeout(function () {
                                                    $(element).autocomplete({
                                                        id: 'AutoComplete',
                                                    source: available_type_as_list,
                                                    autoFocus: true
                                                    });
                                                }, 100);
                                            }
                                        }
                                    },
                                    {% if entity.entity_type != 'Studio' %}
                                    {
                                        name:'role',
                                        index:'role',
                                        width:200,
                                        editable: {% if has_permission('Update_User') %} true {% else %} false {% endif %},
                                        edittype:"text",
                                        editoptions: {
                                            dataInit: function (element) {
                                                window.setTimeout(function () {
                                                    $(element).autocomplete({
                                                        id: 'AutoComplete',
                                                    source: available_rolelist,
                                                    autoFocus: true
                                                    });
                                                }, 100);
                                            }
                                        }
                                    },
                                    {% endif %}
                                    {
                                        name:'clients_list',
                                        index:'clients_list',
                                        width:200,
                                        editable: false,
                                        edittype:"text"
                                    },
                                    {
                                        name:'departments_list',
                                        index:'departments_list',
                                        width:200,
                                        editable: false,
                                        edittype:"text"
                                    },
                                    {
                                        name:'groups_list',
                                        index:'groups_list',
                                        width:200,
                                        editable: false,
                                        edittype:"text"
                                    },
                                    {name:'remove_action', index:'remove_action', width:60, editable: false}
                                ],
                                viewrecords : true,
                                pager: false,
                                rowNum:grid_data.length,
					            rowList:[grid_data.length],
                                altRows: true,
                                multiselect: false,
                                loadonce: true,
                                height: 'auto',
                                autowidth: true,
                                sortname: 'name',
                                footerrow: false, // set a footer row
                                userDataOnFooter: true, // the calculated sums and/or strings from server are put at footer row.
                                grouping: false,
                                editurl: '/entities/{{ entity.id }}/users/update/',
                                caption: "",
                                onSelectRow: editRow,
                                loadComplete : function() {
{#                                    var $self = $(this);#}

                                    var table = this;
                                    setTimeout(function(){
        {#                                    styleCheckbox(table);#}
{#                                            updateActionIcons(table);#}
                                            updatePagerIcons(table);
                                        $('#loading_spinner').hide();
                                        $('#content').show();

                                        $('#lui_grid-table').hide();
                                    }, 0);
                                }
                            });
                        });

{#                        jQuery(grid_selector).jqGrid('navGrid',"#jqGridPager", {#}
{#                            search: false, // show search button on the toolbar#}
{#                            add: false,#}
{#                            edit: false,#}
{#                            del: false,#}
{#                            refresh: true#}
{#                        });#}



                        var timer;
                        $("#search_cells").on("keyup", function() {
                            var self = this;
                            if(timer) { clearTimeout(timer); }
                            timer = setTimeout(function(){
                                //timer = null;
                                jQuery(grid_selector).jqGrid('filterInput', self.value);
                            },0);
                        });
                    });
                });
            });
        });
    </script>
{% endblock extrascripts %}

