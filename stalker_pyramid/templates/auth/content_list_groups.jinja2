{# Stalker Pyramid a Web Base Production Asset Management System
 Copyright (C) 2009-2013 Erkan Ozgur Yilmaz

 This file is part of Stalker Pyramid.

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation;
 version 2.1 of the License.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
#}
<div id='view_groups' style="width: 100%; height: 100%">
    {% if has_permission('Update_Group') and has_permission('Update_User') %}
        <div>
            <button id='view_groups_append_group_button'>Append Group</button>
        </div>
    {% endif %}
    <div style='width:100%; height: 100%; position: absolute;'>
        <div id='groups_data_grid'
             style="position: static; width: 100%; height: 100%;"></div>
    </div>
</div>

<script type='text/javascript'>
    require([
        "dojo/_base/declare",
        'dojo/data/ObjectStore',
        'dojo/store/Memory',
        'dojo/store/JsonRest',

        'dijit/registry',

        "dgrid/List",
        "dgrid/Grid",
        "dgrid/Selection",
        "dgrid/Keyboard",
        'dgrid/extensions/ColumnResizer',
        "dgrid/editor",

        'stalker/dialogs',
        'stalker/fieldUpdater',
        'stalker/dialogCaller',
        'dojo/domReady!'
    ], function (declare, ObjectStore, Memory, JsonRest, registry, List, Grid,
                 Selection, Keyboard, ColumnResizer, editor, dialogs,
                 fieldUpdater, dialogCaller) {

        var StandardGrid = declare([Grid, Selection, Keyboard, ColumnResizer]);

        var groups_DataGrid = new StandardGrid({
            id: 'groups_data_grid',
            width: '100%',
            height: '100%'
        }, 'groups_data_grid');


        function groups_DataGrid_updater() {

            var group_memory = new JsonRest({
                target: '{{ request.route_url('get_user_groups', id=user.id) }}'
            });

            group_memory.query().then(function (data) {

                var columns = [
                    {
                        label: "Thumbnail",
                        field: 'thumbnail',
                        sortable: false,
                        get: function (object) {
                            return object; // return entire item for formatter to use
                        },
                        formatter: function (object) {

                            var path = '{{ request.static_url("stalker_pyramid:static/stalker/images/Placeholder_Team.jpg") }}';
                            if (object.thumbnail_path) {
                                path = object.thumbnail_path;
                            }
                            return '<img width= "60px"; src="' + path + '">';

                        }
                    },
                    {
                        field: 'name',
                        label: "Name",
                        get: function (object) {
                            return object; // return entire item for formatter to use
                        },
                        formatter: function (value) {
                            {% if has_permission('Read_Group') %}
                                var targetPane = "'central_content'";
                                var address = "'groups/" + value.id + "/view'";

                                return '<a href="javascript:redirectLink(' + targetPane + ',' + address + ');">' + value.name + '</a>';

                            {% else %}
                                return  value.name;

                            {% endif %}


                        }
                    }
                ];

                groups_DataGrid.renderArray(data);
                groups_DataGrid.set('columns', columns);

            });

        }

        {% if has_permission('Update_Group') and has_permission('Update_User') %}
            var append_group_button = dialogCaller({
                label: 'Append Group',
                dialog_id: 'append_group_dialog',
                content_creator: dialogs.append_group_dialog,
                attach_to: 'view_groups_append_group_button',
                related_field_updater: groups_DataGrid_updater,
                data_id: '{{ user.id }}'
            });
            append_group_button.startup();
        {% endif %}

        groups_DataGrid_updater();
    });

</script>

