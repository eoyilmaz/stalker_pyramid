<div class='row-fluid'>
    <div class='span12'>

        <form id='time_log_form'
              class='form-horizontal'
              role='form'
              method='post'
              action="{{ request.route_url('create_time_log') }}">


            {# Project #}
            <div class='control-group'>
                <label class='span3 control-label' for='time_log_project'>Project</label>

                <div class='span9'>
                    <select id='time_log_project'
                            class='input-block-level'
                            name='project_id'
                            required></select>
                </div>
            </div>

            {# Task #}
            <div class='control-group'>
                <label class='span3 control-label'
                       for='time_log_task'>Task</label>

                <div class='span9'>
                    <select id='time_log_task'
                            name='task_id'
                            class='input-block-level'
                            data-placeholder='Task'></select>
                </div>
            </div>

        </form>

        <div class="space-20"></div>

    </div>
</div>

<script src='{{ request.static_url("stalker_pyramid:static/ace/js/chosen.jquery.min.js") }}'></script>
<script src='{{ request.static_url("stalker_pyramid:static/ace/js/date-time/bootstrap-datepicker.min.js") }}'></script>
<script src='{{ request.static_url("stalker_pyramid:static/ace/js/date-time/moment.min.js") }}'></script>
<script src='{{ request.static_url("stalker_pyramid:static/ace/js/date-time/daterangepicker.min.js") }}'></script>
<script src='{{ request.static_url("stalker_pyramid:static/ace/js/bootstrap-colorpicker.min.js") }}'></script>
<script src='{{ request.static_url("stalker_pyramid:static/ace/js/jquery.autosize-min.js") }}'></script>
<script src='{{ request.static_url("stalker_pyramid:static/ace/js/jquery.inputlimiter.1.3.1.min.js") }}'></script>
<script src='{{ request.static_url("stalker_pyramid:static/ace/js/jquery.maskedinput.min.js") }}'></script>
<script src='{{ request.static_url("stalker_pyramid:static/ace/js/bootstrap-tag.min.js") }}'></script>
<script src='{{ request.static_url("stalker_pyramid:static/ace/js/jquery.validate.min.js") }}'></script>
<script src='{{ request.static_url("stalker_pyramid:static/ace/js/additional-methods.min.js") }}'></script>
<script src='{{ request.static_url("stalker_pyramid:static/ace/js/fuelux/fuelux.spinner.min.js") }}'></script>


<script>
    function init_time_log_dialog() {
        console.debug('starting to initialize time_log dialog!!!');

        {# ***************************************************************** #}
        {# Projects #}
        {% raw %}
        var project_option_template = doT.template(
                '<option value={{=it.id}} {{=it.selected}}>{{=it.name}}</option>'
        );
        {% endraw %}
        var time_log_project = $('#time_log_project');
        var deferred = chosen_field_creator(
                time_log_project, '/projects/',
                project_option_template,
                {% if mode == 'update' %}
                    '{{ entity.task.project.id }}',
                {% endif %}
                {search_contains: true}

        );

        var project_id;
        {% if mode == 'update' %}
            project_id = '{{ entity.task.project.id }}';

            deferred.then(function () {
                time_log_project.val(project_id).trigger('chosen:updated');
            });
        {% endif %}

        // Updates on project change
        time_log_project.on('change', function () {
            update_time_log_task();


        });

        {# ***************************************************************** #}
        {# Tasks#}
        // create a chosen first
        var time_log_task = $('#time_log_task').chosen({
            search_contains: true,
            enable_split_word_search: true,
            allow_single_deselect: true
        });


        // update time_log_task callback
        var update_time_log_task = function () {
            // remove current elements
            time_log_task.find('option').remove();

            // trigger an update
            //time_log_task.trigger('liszt:updated');

            // get the project id
            var project_id = time_log_project.val();

            // get time_logs of that project as json from server
            $.getJSON('/projects/' + project_id + '/tasks/').then(function (data) {

                // now append the data to the time_log_task
                {% raw %}
                var time_log_task_template = doT.template('<option value={{=it.id}} {{=it.selected}} >{{=it.name}}</option>');
                {% endraw %}

                var task_time_log_count = data.length;
                var rendered_template = null;

                // add and empty option to both
                time_log_task.empty();

                for (var i = 0; i < task_time_log_count; i++) {

                    data[i].selected = ''

                    {% if mode == 'update' %}
                        if (data[i].id == {{ entity.task.id }}) {
                            data[i].selected = 'selected';
                        }
                    {% endif %}

                    rendered_template = time_log_task_template(data[i]);
                    time_log_task.append(rendered_template);

                }
                // trigger another update

                time_log_task.trigger('liszt:updated');


            });
        };

        // update now
        setTimeout(update_time_log_task, 100); // TODO: This is not good

        // Updates on task change
        time_log_task.on('change', function () {

        });


        {# ***************************************************************** #}
        {# Submit Button #}
        $('#time_log_dialog_submit_button').on('click', function () {
            var time_log_form = $('#time_log_form');
            if (time_log_form.validate()) {
                $.post(
                        time_log_form.attr('action'),
                        time_log_form.serialize()
                );
            }
        });

        $('#time_log_form').validate({
            errorElement: 'span',
            errorClass: 'help-inline',
            focusInvalid: true,
            rules: {
                name: {
                    required: true
                },
                code: {
                    required: true
                },
                dependencies: {
                    required: false
                },
                comment: {
                    required: true
                },
                state: {
                    required: true
                },
                platform: {
                    required: true
                },
                subscription: {
                    required: true
                },
                gender: 'required',
                agree: 'required'
            },

            messages: {
            },

            invalidHandler: function (event, validator) { //display error alert on form submit
                $('.alert-error', $('.login-form')).show();
            },

            highlight: function (e) {
                $(e).closest('.control-group').removeClass('info').addClass('error');
            },

            success: function (e) {
                $(e).closest('.control-group').removeClass('error').addClass('info');
                $(e).remove();
            },

            errorPlacement: function (error, element) {
                if (element.is(':checkbox') || element.is(':radio')) {
                    var controls = element.closest('.controls');
                    if (controls.find(':checkbox,:radio').length > 1) controls.append(error);
                    else error.insertAfter(element.nextAll('.lbl:eq(0)').eq(0));
                }
                else if (element.is('.select2')) {
                    error.insertAfter(element.siblings('[class*="select2-container"]:eq(0)'));
                }
                else if (element.is('.chosen-select')) {
                    error.insertAfter(element.siblings('[class*="chosen-container"]:eq(0)'));
                }
                else error.insertAfter(element);
            },

            submitHandler: function (form) {
                form.submit();
            }

        });


        console.debug('finished initializing the time_log dialog!')
    }
</script>

<script type="text/javascript">
    function destruct_time_log_dialog() {
        $('#time_log_dialog').data('modal', null);
    }
</script>
