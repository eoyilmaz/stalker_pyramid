{# Stalker Pyramid a Web Base Production Asset Management System
 Copyright (C) 2009-2014 Erkan Ozgur Yilmaz

 This file is part of Stalker Pyramid.

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation;
 version 2.1 of the License.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
#}
<div id='view_time_logs' style="width: 100%; height: 100%">
    {% if has_permission('Create_TimeLog') and entity.entity_type == 'Task' %}
        <div>
            <button id='create_time_log_button'>Create TimeLog</button>
        </div>
    {% endif %}
    <div style='width:100%; height: 100%; position: absolute;'>
        <div id='time_logs_data_grid'
             style="position: static; width: 100%; height: 100%;"></div>
    </div>
</div>

<script type='text/javascript'>
require([
    'dojo/_base/declare',
    'dojo/data/ObjectStore',
    'dojo/store/Memory',
    'dojo/store/JsonRest',

    "dgrid/selector",
    "dgrid/List",
    "dgrid/OnDemandGrid",
    "dgrid/Selection",
    "dgrid/Keyboard",
    'dgrid/extensions/ColumnResizer',
    "dgrid/editor",

    'dijit/Menu',
    'dijit/MenuItem',
    'dijit/MenuSeparator',
    'dijit/form/Button',

    'stalker/js/dialogs',
    'stalker/js/dialogCaller',
    'stalker/js/dialogCreator',

    'dojo/domReady!'
], function (declare, ObjectStore, Memory, JsonRest, selector, List,
             Grid, Selection, Keyboard, ColumnResizer, editor, Menu, MenuItem,
             MenuSeparator, Button, dialogs, dialogCaller, dialogCreator) {


    var StandardGrid = declare([Grid, Selection, Keyboard, ColumnResizer]);

    var time_logs_DataGrid = new StandardGrid({
        id: 'time_logs_data_grid',
        width: '100%',
        selectionMode: 'single',
        cellNavigation: false,
        allowSelectAll: true
    }, 'time_logs_data_grid');


    {% if has_permission('Create_TimeLog') and entity.entity_type == 'Task'%}

        var create_time_log_button = dialogCaller({
            label: 'Create TimeLog',
            dialog_id: 'time_log_dialog',
            content_creator: dialogs.create_time_log_dialog,
            attach_to: 'create_time_log_button',
            related_field_updater: time_logs_DataGrid_updater,
            data_id: '{{ entity.id }}'
        });
        create_time_log_button.startup();
    {% endif %}



    var timeLogData;


    function time_logs_DataGrid_updater() {


        var time_log_memory = new JsonRest({
            target: '{{ request.route_url('get_entity_time_logs', id=entity.id) }}'
        });

        time_log_memory.query().then(function (data) {

            timeLogData = data;

            var columns = [


                {
                    field: 'parent_name',
                    label: 'Parent Name'
                    {#                        get: function (object) {#}
                    {##}
                    {#                            return object; // return entire item for formatter to use#}
                    {##}
                    {#                        },#}
                    {#                        formatter: function (value) {#}
                    {##}
                    {#                            var targetPane = "'tasks_content_pane'";#}
                    {#                            var address = "'view/task/" + value.task_id + "'";#}
                    {##}
                    {#                            return '<a href="javascript:redirectLinkInParent(' + targetPane + ',' + address + ');">' + value.task_name + '</a>';#}
                    {##}
                    {#                        }#}

                },
                {
                    field: 'task_name',
                    label: 'Task Name',
                    get: function (object) {

                        return object; // return entire item for formatter to use

                    },
                    formatter: function (value) {

                        var targetPane = "'tasks_content_pane'";
                        var address = "'tasks/" + value.task_id + "/view'";

                        return '<a href="javascript:redirectLinkInParent(' + targetPane + ',' + address + ');">' + value.task_name + '</a>';

                    }

                },
                {
                    field: 'resource_name',
                    label: "Resource",
                    get: function (object) {
                        return object; // return entire item for formatter to use
                    },
                    formatter: function (value) {
                        var targetPane = "'central_content'";
                        var address = "'users/" + value.resource_id + "/view'";

                        return '<a href="javascript:redirectLink(' + targetPane + ',' + address + ');">' + value.resource_name + '</a>';
                    }
                },
                {
                    field: 'duration',
                    label: "Duration",
                    formatter: function (value) {
                        return value / 3600 + ' h';
                    }
                },
                {
                    field: 'start_date',
                    label: "Start Date",

                    formatter: function (value) {
                        var start_date = new Date(parseInt(value));
                        return start_date.format("yyyy-mm-dd HH:00");
                    }
                },
                {
                    field: 'end_date',
                    label: "End Date",
                    formatter: function (value) {
                        var end_date = new Date(parseInt(value));
                        return end_date.format("yyyy-mm-dd HH:00");
                    }
                }
            ];

            time_logs_DataGrid.renderArray(data);
            time_logs_DataGrid.set('columns', columns);


            var right_click_menu = new Menu({
                targetNodeIds: ['time_logs_data_grid'],
                selector: '.dgrid-row'
            });

            var create_update_timelog_menuItem_creator = function () {
                return new MenuItem({
                    label: 'Update TimeLog',
                    onClick: function () {
                        var node = this.getParent().currentTarget;
                        var nodeId = node.getAttribute('id');
                        var rowId = time_logs_DataGrid.id + '-row-';
                        var timeLogId = timeLogData[parseInt(nodeId.substring(rowId.length, nodeId.length))].id;


                        var dialog = dialogCreator({
                            dialog_id: 'time_log_dialog',
                            content_creator: dialogs.update_time_log_dialog,
                            related_field_updater: time_logs_DataGrid_updater,
                            data_id: timeLogId
                        });
                        dialog.show();


                    }
                });
            };

            right_click_menu.addChild(create_update_timelog_menuItem_creator());

            right_click_menu.startup();


        });

        time_logs_DataGrid.resize();

    }

    time_logs_DataGrid_updater();

});
</script>

