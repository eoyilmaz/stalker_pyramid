{# Stalker Pyramid a Web Base Production Asset Management System
 Copyright (C) 2009-2014 Erkan Ozgur Yilmaz
 
 This file is part of Stalker Pyramid.
 
 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation;
 version 2.1 of the License.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
#}
<div class='dijitDialogPaneContentArea'>
    <form id='shot_form'>
        <table style='width: 100%;'>

            {# NAME #}
            <tr>
                <td class='label_column'>
                    <label for='shot_name'>Name</label>
                </td>
                <td class='input_column'>
                    <input id='shot_name'>
                </td>
            </tr>

            {# CODE #}
            <tr>
                <td class='label_column'>
                    <label for='shot_code'>Code</label>
                </td>
                <td class='input_column'>
                    <input id='shot_code'>
                </td>
            </tr>
            {# DESCRIPTION #}
            <tr>
                <td class='label_column'>
                    <label for='shot_description'>Description</label>
                </td>
                <td class='input_column'>
                    <input id='shot_description'>
                </td>
            </tr>

            {# PROJECT #}
            <tr>
                <td class='label_column'>
                    <label for='shot_project'>Project</label>
                </td>
                <td class='input_column'>
                    <input id='shot_project'>
                </td>
            </tr>

            {# SEQUENCE #}
            <tr>
                <td class='label_column'>
                    <label for='shot_sequence'>Sequence</label>
                </td>
                <td class='input_column'>
                    <input id='shot_sequence'>
                </td>
                <td class='button_column'>
                    <button id='shot_create_sequence_button'>New</button>
                    <button id='shot_update_sequence_button'>Update</button>
                </td>
            </tr>

            {# STATUS #}
            <tr>
                <td class='label_column'>
                    <label for='shot_status'>Status</label>
                </td>
                <td class='input_column'>
                    <input id='shot_status'>
                </td>
                <td class='button_column'>
                    <button id='shot_add_status_button'>Add Status</button>
                </td>
            </tr>

        </table>
    </form>
</div>

<div class='dijitDialogPaneActionBar'>
    <button id='shot_submit_button'>Submit</button>
    <button id='shot_cancel_button'>Cancel</button>
</div>

<script type='text/javascript'>
require([
    'dijit/registry',
    'dojo/store/Memory',
    'dojo/store/JsonRest',
    'dijit/form/Form',
    'dijit/form/ValidationTextBox',
    'dijit/form/TextBox',
    'dijit/form/FilteringSelect',
    'dijit/form/ComboBox',
    'dijit/form/Button',
    'stalker/js/dialogs',
    'stalker/js/submitForm',
    'stalker/js/fieldUpdater',
    'stalker/js/dialogCreator',
    'stalker/js/dialogCaller',
    'dojo/domReady!'],
        function (registry, Memory, JsonRest, Form, ValidationTextBox, TextBox,
                  FilteringSelect, ComboBox, Button, dialogs, submitForm,
                  fieldUpdater, dialogCreator, dialogCaller) {

            // ********************************************************************
            // Generate default values
            var url;
            var name;
            var code;
            var description;
            var project_id;
            var additional_data;

            {# fill values based on the dialog mode #}
            {% if mode == 'CREATE' %}
                url = '{{ request.route_url("create_shot") }}';
                {% if project %}
                    project_id = '{{ project.id }}';
                {% endif %}
            {% elif mode == 'UPDATE' %}
                url = '{{ request.route_url("update_shot", id=shot.id) }}';
                name = '{{ shot.name }}';
                code = '{{ shot.code }}';
                description = '{{ shot.description }}';
                project_id = '{{ shot.project_id }}';
                additional_data = {
                    'shot_id':{{ shot.id }}
                };
            {% endif %}

            // **********************************************************************
            // Form
            var shot_form = new Form({
            }, 'shot_form');


            // **********************************************************************
            // Name
            var name_textBox = new ValidationTextBox({
                name: 'name',
                label: 'Name',
                placeHolder: 'Enter a name',
                required: true,
                value: name
            }, 'shot_name');
            name_textBox.startup();


            // **********************************************************************
            // Code
            var code_textBox = new TextBox({
                name: 'code',
                label: 'Code',
                placeHolder: 'Enter a code',
                value: code,
{#                {% if mode=='UPDATE' %}#}
{#                    disabled: true,#}
{#                {% endif %}#}
            }, 'shot_code');
            code_textBox.startup();


            // ****************************************************************
            // Description
            var description_textBox = new TextBox({
                name: 'description',
                label: 'Description',
                placeHolder: 'Enter description',
                value: description
            }, 'shot_description');
            description_textBox.startup();


            // **********************************************************************
            // Project

            // Memory
            var project_memory = new JsonRest({
                target: '{{ request.route_url("get_projects") }}'
            });


            var project_filtering_select = new FilteringSelect({
                name: 'project_id',
                required: true,
                label: 'Project',
                {% if project %}
                    disabled: true,
                {% endif %}
                onChange: function () {
                    sequence_field_updater();
                }
            }, 'shot_project');
            project_filtering_select.startup();

            // Updater
            var project_field_updater = fieldUpdater({
                'memory': project_memory,
                'widget': project_filtering_select,
                {% if project %}
                    'selected': project_id
                {% endif %}
            });

            // Fill Widget
            project_field_updater();


            // **********************************************************************
            // Sequence
            var sequence_memory = new JsonRest({
                target: '{{ request.route_url('get_sequences') }}'
            });

            var sequence_filtering_select = new FilteringSelect({
                name: 'sequence_id',
                required: false,
                disabled: true,
                label: 'Sequence'
            }, 'shot_sequence');
            sequence_filtering_select.startup();


            // The Updater
            var sequence_field_updater;

            {% if project %}
                sequence_field_updater = fieldUpdater({
                    memory: sequence_memory,
                    query_data: function () {
                        return {{ project.id }};
                    },
                    widget: sequence_filtering_select
                });
                sequence_filtering_select.set('disabled', false);
                sequence_field_updater({animate: false});
            {% else %}
                sequence_field_updater = fieldUpdater({
                    memory: sequence_memory,
                    query_data: function () {
                        sequence_filtering_select.set('disabled', false);
                        return project_filtering_select.get('value');
                    },
                    widget: sequence_filtering_select
                });
            {% endif %}

            // New Sequence Button
            var create_sequence_button = dialogCaller({
                label: 'New',
                dialog_id: 'sequence_dialog',
                content_creator: dialogs.create_sequence_dialog,
                attach_to: 'shot_create_sequence_button',
                related_field_updater: sequence_field_updater,
                data_id: function () {
                    return project_filtering_select.get('value');
                }
            });
            create_sequence_button.startup();

            {% if not has_permission('Create_Sequence') %}
                create_sequence_button.set('disabled', true);
            {% endif %}

            // Update Sequence Button
            var update_sequence_button = dialogCaller({
                label: 'Update',
                dialog_id: 'sequence_dialog',
                content_creator: dialogs.update_sequence_dialog,
                attach_to: 'shot_update_sequence_button',
                related_field_updater: sequence_field_updater,
                data_id: function () {
                    return sequence_filtering_select.get('value')
                }

            });
            update_sequence_button.startup();

            {% if not has_permission('Update_Sequence') %}
                update_sequence_button.set('disabled', true);
            {% endif %}


            // **********************************************************************
            // Status
            //
            // The Memory
            var status_memory = new JsonRest({
                target: ' {{ request.route_url('get_statuses_for', target_entity_type="Shot") }}'
            });

            // The Field
            var status_filtering_select = new FilteringSelect({
                name: 'status_id',
                label: 'Status',
                required: true
            }, 'shot_status');
            status_filtering_select.startup();

            var update_button_callback_function = function (data) {

                if (data.length > 0) {

                    shot_add_status_button.set('onClick', function () {
                        var myDialog = dialogCreator({
                            dialog_id: 'status_list_dialog',
                            data_id: 'Shot',
                            content_creator: dialogs.update_status_list_dialog,
                            related_field_updater: status_field_updater
                        });
                        myDialog.show();
                    });

                }
            };
            // The Updater
            var status_field_updater = fieldUpdater({
                'memory': status_memory,
                'widget': status_filtering_select,
                'callBack': update_button_callback_function,
                {% if mode=='UPDATE' %}
                    'selected': '{{ shot.status.id }}'
                {% endif %}
            });

            var shot_add_status_button = dialogCaller({
                label: 'Add Status',
                dialog_id: 'status_list_dialog',
                content_creator: dialogs.create_status_list_dialog,
                attach_to: 'shot_add_status_button',
                related_field_updater: status_field_updater,
                data_id: 'Shot'
            });

            shot_add_status_button.startup();
            status_field_updater({animate: true});

             {% if not has_permission('Create_Status') %}
                shot_add_status_button.set('disabled', true);
            {% endif %}


            // **********************************************************************
            // Submit Button
            var submit_button = new Button({
                label: 'OK',
                type: 'button',
                onClick: function () {
                    submitForm({
                        dialog: registry.byId('shot_dialog'),
                        form: shot_form,
                        additional_data: additional_data,
                        url: url,
                        method: 'POST'
                    });
                }
            }, 'shot_submit_button');
            submit_button.startup();


            // **********************************************************************
            // Cancel Button
            var cancel_button = new Button({
                label: 'Cancel',
                type: 'button',
                onClick: function () {
                    registry.byId('shot_dialog').destroyRecursive();
                }
            }, 'shot_cancel_button');
            cancel_button.startup();

            shot_form.startup();

        });
</script>
