{% extends "base.jinja2" %}

{# BREADCRUMBS #}
{% block breadcrumbs %}
    {% include 'breadcrumb/breadcrumbs.jinja2' %}
{% endblock breadcrumbs %}

{#SIDEBAR#}
{% block sidebar %}
    {% include 'sidebar.jinja2' %}
{% endblock sidebar %}

{#PAGE-CONTENT#}
{% block page_content %}

    {% set page_title='Price Lists' %}
    {% include 'page_header.jinja2' %}

    <div class="row-fluid">
        <div class="widget-box">

            <div class="widget-header widget-header-small header-color-green }}">
                    <h5 id="items_header" class="smaller"></h5>
                    <div class="widget-toolbar">
{#                  {% if has_permission('Create_'+list_item_type) and  add_button_address %}#}
                        <a data-target="#dialog_template"
                           data-toggle="modal"
                           data-keyboard=false
                           href="{{ request.route_url("create_good_dialog")}}"
                           class="white">
                            <i class="icon-plus"></i>
                            Add New Good
                        </a>

                    </div>
            </div>
            <div class="widget-body">
                <div class="widget-main" style="padding: 0px">
                    <div class="space-5"></div>
                    <div id="items_table_wrapper" class="dataTables_wrapper" role="grid">
                        <div class="row-fluid">
                            <div class="span6">
                            </div>
                            <div class="span6">
                                <div class="dataTables_filter" id="items_table_filter">
                                    <label>Search: <input type="text" id="search_cells" aria-controls="items_table">
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row-fluid">
                        <table id="grid-table"></table>
                        <div id="grid-pager"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

{% endblock page_content %}

{% block extrascripts %}
    <script type="text/javascript">
            if("ontouchend" in document) document.write("<script src='{{ request.static_url("stalker_pyramid:static/ace/js/jquery.mobile.custom.min.js") }}'>"+"<"+"/script>");
        </script>
    <script src='{{ request.static_url("stalker_pyramid:static/ace/js/date-time/bootstrap-datepicker.min.js") }}'></script>
    <script src='{{ request.static_url("stalker_pyramid:static/ace/js/jqGrid/i18n/grid.locale-en.js") }}'></script>
{#    <script src='{{ request.static_url("stalker_pyramid:static/ace/js/jqGrid/jquery.jqGrid.min.js") }}'></script>#}
    <script src='{{ request.static_url("stalker_pyramid:static/jqGrid/js/jquery.jqGrid.js") }}'></script>
    <script src='{{ request.static_url("stalker_pyramid:static/jqGrid/js/jquery.jqGrid.min.js") }}'></script>
    <script src='{{ request.static_url("stalker_pyramid:static/stalker/js/accounting.min.js") }}'></script>
    <script src='{{ request.static_url("stalker_pyramid:static/jqGrid/plugins/ui.multiselect.js") }}'></script>
    <script>
        $.jgrid.defaults.autowidth = true;

        $.jgrid.defaults.responsive = true;
        $.jgrid.defaults.styleUI = 'Bootstrap';
    </script>

    <script type="text/javascript">
        $(document).ready(function () {
            $.getJSON('/types/?target_entity_type=Good').then(function (good_type_data) {
                var available_good_types = [];
                for (var k=0; k < good_type_data.length; k++){
                    available_good_types.push(good_type_data[k].name);
                }
                $.getJSON('/price_lists/').then(function (price_list_data) {

                    var available_pricelist = [];
                    for (var k=0; k < price_list_data.length; k++){
                        console.log(price_list_data[k].name);
                        available_pricelist.push(price_list_data[k].name);
                    }

                    $.getJSON('/studios/{{ entity.id }}/goods/').then(function (good_data) {

                        var grid_data = good_data;
                        var available_good_units_as_list = [];
                        var good_names = [];


                        for(var i=0; i<grid_data.length; i++ ){
                            console.log('grid_data[i]: '+ grid_data[i].price_list_name);
                            good_names.push(grid_data[i].name);

                            grid_data[i]['created_by'] = "<a href='/users/"+grid_data[i]['created_by_id']+"/view'>"+grid_data[i]['created_by_name']+"</a>";
                            if(grid_data[i]['updated_by_id']){
                                grid_data[i]['updated_by'] = "<a href='/users/"+grid_data[i]['updated_by_id']+"/view'>"+grid_data[i]['updated_by_name']+"</a>";
                            }
                            grid_data[i].date_updated = "<span class='date'>"+ new Date(grid_data[i].date_updated).format('yyyy-mm-dd HH:MM')+"</span>";


                            if (available_good_units_as_list.indexOf(grid_data[i].unit) == -1){
                                available_good_units_as_list.push(grid_data[i].unit);
                            }
    {#                            console.log(grid_data[i]['related_goods']);#}
                            var related_goods = grid_data[i]['related_goods'];
                            var related_goods_str = "";

                            for(var m=0; m<related_goods.length;m++){
                                related_goods_str += "<b>"+related_goods[m].name+"</b> ratio: "+related_goods[m].ratio+"<a data-target='#dialog_template' data-toggle='modal' data-keyboard=false href='/goods/"+grid_data[i].id+"/delete/relation/dialog?related_good_id="+related_goods[m].id+"'> <i class='icon-trash'></i></a><br/>";
                            }
                            related_goods_str += "<a data-target='#dialog_template' data-toggle='modal' data-keyboard=false href='/goods/"+grid_data[i].id+"/update/relation/dialog'>Add New Relation</a>"
                            grid_data[i]['related_goods_str'] = related_goods_str;

                            var linked_goods = grid_data[i]['linked_goods'];
                            var linked_goods_str = "";

                            for(var m=0; m<linked_goods.length;m++){
                                linked_goods_str += "<b>"+linked_goods[m].name+"</b> ratio: "+linked_goods[m].ratio+"<br/>";
                            }
                            grid_data[i]['linked_goods_str'] = linked_goods_str;

                        }

                        jQuery(function($) {
                        var grid_selector = "#grid-table";
                        var pager_selector = "#grid-pager";
                        var grid = jQuery(grid_selector);
                        grid.jqGrid({
                            //direction: "rtl",
                            data: grid_data,
                            datatype: "local",
                            colNames:[
                                        'ID',
                                        'Type',
                                        'Price List',
                                        'Name',
                                        'MSRP',
                                        'Cost',
                                        'Unit',
                                        'Stopage Ratio',
                                        'Related Goods',
                                        'Link Goods',
                                        'Updated_by',
                                        'Last_Accessed'
                            ],
                            colModel:[
                                {name:'id',index:'id', width:90, sortable:true, editable: false},
                                {
                                    name:'type_name',
                                    index:'type_name',
                                    width:160,
                                    editable: true,
                                    edittype:"text",
                                    editoptions: {
                                        dataInit: function (element) {
                                            window.setTimeout(function () {
                                                $(element).autocomplete({
                                                    id: 'AutoComplete',
                                                source: available_good_types,
                                                autoFocus: true
                                                });
                                            }, 100);
                                        }
                                    }
                                },
                                {
                                    name:'price_list_name',
                                    index:'price_list_name',
                                    width:160,
                                    editable: true,
                                    edittype:"text",
                                    editoptions: {
                                        dataInit: function (element) {
                                            window.setTimeout(function () {
                                                $(element).autocomplete({
                                                    id: 'AutoComplete',
                                                source: available_pricelist,
                                                autoFocus: true
                                                });
                                            }, 100);
                                        }
                                    }
                                },
                                {name:'name',index:'name', width:250, sortable:true, editable: true, editoptions:{size:"20", maxlength:"30"}},
                                {name:'msrp',index:'msrp',  width:100, sortable:true, editable: true, editoptions:{size:"20" ,maxlength:"30"}},
                                {name:'cost',index:'cost',  width:120, sortable:true, editable: true, editoptions:{size:"20", maxlength:"30"}},
                                {
                                    name: 'unit',
                                    index: 'unit',
                                    width: 120,
                                    editable: true,
                                    edittype: "text",
                                    editoptions: {
                                        dataInit: function (element) {
                                            window.setTimeout(function () {
                                                $(element).autocomplete({
                                                    id: 'AutoComplete',
                                                source: available_good_units_as_list,
                                                autoFocus: true
                                                });
                                            }, 100);
                                        }
                                    }
                                },
                                {name:'stopage_ratio',index:'stopage_ratio', width:80, sortable:true, editable: true, editoptions:{size:"20" ,maxlength:"30"}},
                                {name:'related_goods_str',index:'related_goods_str', width:220, sortable:true, editable: false},
                                {name:'linked_goods_str',index:'linked_goods_str', width:230, sortable:true, editable: false},
                                {name:'updated_by',index:'updated_by', width:100, sortable:true, editable: false},
                                {name:'date_updated',index:'date_updated', width:100, sortable:true, editable: false}
                            ],
                            height: 'auto',
                            rowNum: grid_data.length,
                            viewrecords : true,
                            rowList:[20, 50, 100],
                            pager : false,
                            altRows: true,
                          {#toppager: true,#}
                            multiselect: false,
                          {#multikey: "ctrlKey",#}
                            multiboxonly: true,
                            grouping: true,
                            groupingView: {
                                groupField: ["price_list_name"],
                                groupColumnShow: [true],
                                groupText: ["<b>{0}</b>"],
                                groupOrder: ["asc"],
                                groupSummary: [true],
                                groupCollapse: false
                            },
                            onSelectRow: editRow,

                            loadComplete : function() {

                                var table = this;
                                setTimeout(function(){
                                    styleCheckbox(table);
                                    updatePagerIcons(table);
                                    enableTooltips(table);

                                    $('#lui_grid-table').hide();
                                }, 0);
                            },
                            editurl:  '/goods/edit',
                            caption: ""
                        });

                        var lastSelection;

                        function editRow(id) {
                            if (id && id !== lastSelection) {

                                grid.restoreRow(lastSelection);

                                var editParameters = {
                                    keys: true,
                                    successfunc: editSuccessful,
                                    errorfunc: editFailed,
                                    restoreAfterError : false
                                };

                                grid.jqGrid('editRow', id, editParameters);
                                lastSelection = id;
                            }
                        }

                        function editSuccessful( data, stat) {
                            console.log("editSuccessful: " +data.responseText);
                            flash_message({
                                type: "success",
                                title: "Success!",
                                message: data.responseText
                            });

                            grid.restoreRow(lastSelection);
                            return [true,"",""];
                        }

                        function editFailed(rowID, response) {
                            $.jgrid.info_dialog($.jgrid.errors.errcap,'<div class="ui-state-error">RowID:'+rowID+ ' :  '+ response.responseJSON.error +'</div>', $.jgrid.edit.bClose,{buttonalign:'right'})
                            //alert(response.responseJSON.error);
                        }

                        function style_edit_form(form) {

                            //update buttons classes
                            var buttons = form.next().find('.EditButton .fm-button');
                            buttons.addClass('btn btn-small').find('[class*="-icon"]').remove();//ui-icon, s-icon
                            buttons.eq(0).addClass('btn-primary').prepend('<i class="icon-ok"></i>');
                            buttons.eq(1).prepend('<i class="icon-remove"></i>')

                            buttons = form.next().find('.navButton a');
                            buttons.find('.ui-icon').remove();
                            buttons.eq(0).append('<i class="icon-chevron-left"></i>');
                            buttons.eq(1).append('<i class="icon-chevron-right"></i>');
                        }

                        function style_delete_form(form) {
                            var buttons = form.next().find('.EditButton .fm-button');
                            buttons.addClass('btn btn-small').find('[class*="-icon"]').remove();//ui-icon, s-icon
                            buttons.eq(0).addClass('btn-danger').prepend('<i class="icon-trash"></i>');
                            buttons.eq(1).prepend('<i class="icon-remove"></i>')
                        }

                        function style_search_filters(form) {
                            form.find('.delete-rule').val('X');
                            form.find('.add-rule').addClass('btn btn-small btn-primary');
                            form.find('.add-group').addClass('btn btn-small btn-success');
                            form.find('.delete-group').addClass('btn btn-small btn-danger');
                        }
                        function style_search_form(form) {
                            var dialog = form.closest('.ui-jqdialog');
                            var buttons = dialog.find('.EditTable')
                            buttons.find('.EditButton a[id*="_reset"]').addClass('btn btn-small btn-info').find('.ui-icon').attr('class', 'icon-retweet');
                            buttons.find('.EditButton a[id*="_query"]').addClass('btn btn-small btn-inverse').find('.ui-icon').attr('class', 'icon-comment-alt');
                            buttons.find('.EditButton a[id*="_search"]').addClass('btn btn-small btn-purple').find('.ui-icon').attr('class', 'icon-search');
                        }

                        function beforeDeleteCallback(e) {
                            var form = $(e[0]);
                            if(form.data('styled')) return false;

                            form.closest('.ui-jqdialog').find('.ui-jqdialog-titlebar').wrapInner('<div class="widget-header" />')
                            style_delete_form(form);

                            form.data('styled', true);
                        }

                        function beforeEditCallback(e) {
                            var form = $(e[0]);
                            console.log(e[0])
                            form.closest('.ui-jqdialog').find('.ui-jqdialog-titlebar').wrapInner('<div class="widget-header" />')
                            style_edit_form(form);
                        }

                        function styleCheckbox(table) {
                        /**
                            $(table).find('input:checkbox').addClass('ace')
                            .wrap('<label />')
                            .after('<span class="lbl align-top" />')


                            $('.ui-jqgrid-labels th[id*="_cb"]:first-child')
                            .find('input.cbox[type=checkbox]').addClass('ace')
                            .wrap('<label />').after('<span class="lbl align-top" />');
                        */
                        }

                        //replace icons with FontAwesome icons like above
                        function updatePagerIcons(table) {
                            var replacement =
                            {
                                'ui-icon-seek-first' : 'icon-double-angle-left bigger-140',
                                'ui-icon-seek-prev' : 'icon-angle-left bigger-140',
                                'ui-icon-seek-next' : 'icon-angle-right bigger-140',
                                'ui-icon-seek-end' : 'icon-double-angle-right bigger-140'
                            };
                            $('.ui-pg-table:not(.navtable) > tbody > tr > .ui-pg-button > .ui-icon').each(function(){
                                var icon = $(this);
                                var $class = $.trim(icon.attr('class').replace('ui-icon', ''));

                                if($class in replacement) icon.attr('class', 'ui-icon '+replacement[$class]);
                            })
                        }

                        function enableTooltips(table) {
                            $('.navtable .ui-pg-button').tooltip({container:'body'});
                            $(table).find('.ui-pg-div').tooltip({container:'body'});
                        }

                        var timer;
                        $("#search_cells").on("keyup", function() {

                            var self = this;

                            if(timer) { clearTimeout(timer); }
                            timer = setTimeout(function(){
                                //timer = null;
                                var grid_selector = "#grid-table";
                                console.log(grid_selector);
                                jQuery(grid_selector).jqGrid('filterInput', self.value);
                            },0);
                        });

                         $('.date').each(function () {
                            var date = moment.utc($(this).text());
                            $(this).text(date.fromNow());
                        });
                    });
                    });
                });
            });
        });
    </script>
{% endblock extrascripts %}


