{% raw %}
<script id="tmpl_btn" type="text/x-dot-template">
    <button
            id="{{=it.id}}"
            class="btn btn-mini btn-white tooltip-success"
            title="{{=it.title}}"
            url="{{=it.url}}"
            modal="{{=it.modal}}"
            >
        <i class="{{=it.icon}}"></i>
    </button>
</script>
{% endraw %}

<script class="dialog_loaded"></script>
<div id="loading_spinner" class="well well-sm">
    <div class="inline middle blue bigger-110">
        <i class="icon-spinner icon-spin orange bigger-125"></i>
        Loading content...
    </div>
</div>

<div class="row-fluid">
    <table id="items_table"
           class="table table-striped table-bordered table-hover hide">
        <thead></thead>
        <tbody></tbody>
    </table>
</div>


{#<script src='{{ request.static_url("stalker_pyramid:static/ace/js/window.jQuery.dataTables.min.js") }}'></script>#}
{#<script src='{{ request.static_url("stalker_pyramid:static/ace/js/window.jQuery.dataTables.bootstrap.js") }}'></script>#}
{#<script src='{{ request.static_url("stalker_pyramid:static/stalker/js/dataTable_num-html_sort.js") }}'></script>#}


<script>
    function getTableSelectedIds(){
        var ids = [];
        window.jQuery('table td:first-child input:checkbox').each(function () {

            if(this.checked){
                ids.push(this.id);
            }
        });
        return ids;
    }

    function generateQuery(){
        var _query = '?entity_id={{ entity.id }}';
        var ids = getTableSelectedIds();
        for (var i=0; i<ids.length; i++){
               _query +='&task_ids='+ids[i];
            }
        return _query;
    }

    function submit_action(url, modal){
        var _query = generateQuery();

        {#console.log("modal: "+ modal);#}

        if(modal === 'true'){
            var event_dialog = window.jQuery('#dialog_template');
            event_dialog.modal({
                'remote': url + _query
            });
        } else {
            window.jQuery.post(url+_query).done(function (response_text) {
                window.location.reload();
            }).fail(function (jqXHR) {
                bootbox.alert(jqXHR.responseText);
            });
        }
    }

    function get_task_notes(id, name){
         var event_dialog = window.jQuery('#html_template');
        event_dialog.attr('title', name);
{#        console.log('get_task_notes ' + name);#}
        event_dialog.modal({
            'remote': '/entities/'+id+'/notes/list/inmodal'
        });
    }


    function get_task_absoulute_path(task_id){

        window.jQuery.getJSON('/tasks/' + task_id + '/absolute_full_path/').then(function (absolute_full_path) {
            window.prompt("Copy to clipboard: Ctrl+C, Enter", absolute_full_path);
        });
    }

    function init_table_data(params) {

        console.debug('starting to initialize init_table_data dialog!!!');
        var oTable1;
        var button_list = window.jQuery('#button_list');
        button_list.find('button').remove();
        var submit_form_url= '';

        var btn_template = window.dot_template(window.jQuery('#tmpl_btn').html());

        var force_complete_btn_info = {
            'id':'force_complete_btn',
            'title':'Force Complete',
            'icon':'icon-ok',
            'url':'/tasks/force_status/CMPL/dialog',
            'modal': true
        };

        var appr_btn_info = {
            'id': 'approve_btn',
            'title': 'Approve',
            'icon': 'icon-ok-circle',
            'url': '/tasks/approve/dialog',
            'modal': true
        }

        var request_revisions_btn_info = {
            'id':'request_revisions_btn',
            'title':'Request Revisions',
            'icon':'icon-comment-alt',
            'url':'/tasks/request_revisions/dialog',
            'modal':true
        };

        var request_review_btn_info = {
            'id':'request_review_btn',
            'title':'Request Review',
            'icon':'icon-comment',
            'url':'/tasks/request_review/dialog',
            'modal':true
        };

        var set_start_end_date_btn_info = {
            'id':'set_start_end_date_btn',
            'title':'Set Start End Date',
            'icon':'icon-edit',
            'url':'/tasks/set_start_end_date/dialog',
            'modal':true
        };

        var fix_btn_info = {
            'id':'fix_task_btn',
            'title':'Fix Tasks',
            'icon':'icon-cogs',
            'url':'/tasks/fix/statuses/',
            'modal':false
        };
        var watch_task_btn_info = {
            'id':'watch_task_btn',
            'title':'Watch Tasks',
            'icon':'icon-eye-open',
            'url':'/tasks/watch',
            'modal':false
        };

        var unwatch_task_btn_info = {
            'id':'unwatch_task_btn_info',
            'title':'Unwatch Tasks',
            'icon':'icon-eye-close',
            'url':'/tasks/unwatch',
            'modal':false
        };



        {% if logged_in_user.id == entity.id  or has_permission('Update_Task') or has_permission('Create_Review')%}

            button_list.append(btn_template(appr_btn_info));
            button_list.append(btn_template(force_complete_btn_info));
            button_list.append(btn_template(request_review_btn_info));
            button_list.append(btn_template(request_revisions_btn_info));
            button_list.append(btn_template(set_start_end_date_btn_info));
            button_list.append(btn_template(fix_btn_info));
            button_list.append(btn_template(watch_task_btn_info));
            button_list.append(btn_template(unwatch_task_btn_info));

            window.jQuery('.btn-mini').on('click', function(e){
                e.preventDefault();
                e.stopPropagation();

                console.log(window.jQuery(this).attr("url"));
                submit_action(window.jQuery(this).attr("url"), window.jQuery(this).attr("modal"));
            });
        {% endif %}

        var query_str = '';

        {% if query_str %}
            query_str = "{{ query_str }}";
        {% else %}
            {% if filter.entity_type == 'Status' %}
                var template_label = window.jQuery('#html_template_label');
                template_label.find('span').remove();
                var html_template_header = window.jQuery('#html_template_header');
                {% if is_warning_list %}
                    template_label.append('<span>Black List<small> !! these tasks should have been sent to review or an extra time request should have been made for them !!</small></span>');
                    html_template_header.attr('class', 'table-header header-color-dark');
                {% else %}
                    template_label.append('<span>{{ filter.name }}</span>');
                    html_template_header.attr('class', 'table-header header-color-status_{{ filter.code.lower() }}');
                {% endif %}
            {% endif %}

            {% if entity.entity_type == 'User' %}
                query_str = 'has_resource=1&leaf_only=1&resource_id={{ entity.id }}&project_status=RTS&project_status=WIP';
            {% elif entity.entity_type == 'Project'%}
                query_str = 'has_resource=1&leaf_only=1&project_id={{ entity.id }}';
            {% endif %}

            {% if filter.entity_type == 'User' %}
                query_str = 'leaf_only=1&responsible_id={{ filter.id }}&project_status=RTS&project_status=WIP';
            {% elif filter.entity_type == 'Status'%}
                query_str += '&status={{ filter.code }}';
            {% endif %}
        {% endif %}


        window.jQuery.getJSON('/tasks/?' + query_str).then(function (data) {

            // fill items table with dynamic data
            // wait until document is ready
            window.jQuery(function () {
                var thead_template = window.dot_template(window.jQuery('#tmpl_itemThead').html());
                var table = window.jQuery('#items_table');
                var table_head = table.find('thead');
                var total_hours = 0;
                table_head.append(thead_template({}));

{#                var items = data;#}
                var row_template = window.dot_template(window.jQuery('#tmpl_itemRow').html());

                var i;
                var table_body = table.find('tbody');
                for (i = 0; i < data.length; i++) {
                    // fix dates

                    data[i].start = new Date(data[i].start).format('YYYY-MM-DD HH:mm');
                    if(data[i].end){
                        data[i].end = new Date(data[i].end).format('YYYY-MM-DD HH:mm');
                    }

                    if (data[i].thumbnail_full_path === null) {
                        data[i].thumbnail_full_path = '{{ request.static_url("stalker_pyramid:static/stalker/images/T_NO_IMAGE.gif") }}';
                    } else {
                        data[i].thumbnail_full_path = '/' + data[i].thumbnail_full_path;
                    }
                    data[i].project_name = get_project_name(data[i].project_id);

                    if (data[i].responsible !=null){
                        for (var k=0; k<data[i].responsible.length;k++){
                            var r_id = data[i].responsible[k];
                            data[i].responsible[k] = {
                                'id':r_id,
                                'name':get_user_name(r_id)
                            }
                        }
                    }
                    else{
                            data[i].responsible = [];
                    }

                    var bid_seconds = to_seconds(data[i].bid_timing, data[i].bid_unit);
                    data[i].hour_based_on_bid = meaningful_time_between(bid_seconds, data[i].total_logged_seconds);
                    var st_seconds = to_seconds(data[i].schedule_timing, data[i].schedule_unit );
                    total_hours +=(st_seconds-data[i].total_logged_seconds);

                    data[i].hour_to_complete = meaningful_time_between(
                                                   st_seconds,
                                                   data[i].total_logged_seconds
                                               );

                    if(bid_seconds<data[i].total_logged_seconds){
                         data[i].bid_stat = '#ff0000'
                    }

{#                    data[i].actions = '<span><a class="purple" data-target="#html_template" data-toggle="modal" data-keyboard=false href="/entities/'+data[i].id+'/notes/list/inmodal" tabindex="-1"> <i class="icon-list bigger-120">&nbsp</i></a></span>';#}
                    data[i].actions = '<div class="hidden-phone visible-desktop action-buttons"><a class="purple" title="Notes" onclick="get_task_notes('+data[i].id+', \''+data[i].full_path+'\')"><i class="icon-list bigger-130"></i></a>';

                    if (data[i].status == 'hrev' || data[i].status == 'drev' || data[i].status == 'wip' || data[i].status == 'cmpl' || data[i].status == 'prev'){
                         data[i].actions += '<a class="green"  title="Copy Path" onclick="get_task_absoulute_path('+data[i].id+')"><i class="icon-copy bigger-130"></i></a></div>';
                    }
                    else{
                        data[i].actions += '</div>';
                    }

                    var r, resources, responsible;
                    if(data[i].status === 'wip') {
                        resources = data[i].resources;
                        for(r = 0; r < resources.length; r++){
                            if(resources[r].id === {{ logged_in_user.id }} ){
                                data[i].request_review = "/tasks/" + data[i].id + "/request_review/dialog?came_from={{ request.current_route_path() }}&request_review_mode=Final";
                            }
                        }
                    }

                    if (data[i].status === 'prev') {
                        responsible = data[i].responsible;
                        for (r = 0; r < responsible.length; r++) {
                            if (responsible[r].id === {{ logged_in_user.id }}) {
                                data[i].review ="/tasks/" + data[i].id + "/review/dialog?came_from={{ request.current_route_path() }}";
                            }
                        }
                    }

                    if (data[i].status === 'wip' && data[i].completed === 100) {
                        resources = data[i].resources;
                        for (r = 0; r < resources.length; r++) {
                            if (resources[r].id === {{ logged_in_user.id }}) {
                                data[i].request_extra_time ="/tasks/" + data[i].id + "/request_extra_time/dialog?came_from={{ request.current_route_path() }}";
                            }
                        }
                    }

                    data[i].came_from = '{{ request.current_route_path() }}';

                    {% if has_permission('Create_Review') %}
                        if(data[i].hour_to_complete === 0){
                             data[i].poke_user = true;
                        }
                    {% endif %}

                    // append it to the table
                    {% if is_warning_list %}
                        if(data[i].hour_to_complete === 0){
                            table_body.append(row_template(data[i]));
                        }
                    {% else %}
                        table_body.append(row_template(data[i]));
                    {% endif %}
                }
{#                var rowFooter_template = window.dot_template(window.jQuery('#tmpl_itemFooterRow').html());#}
{#                table_body.append(rowFooter_template({'total_hours':convert_seconds_to_time_range(total_hours)}));#}


                oTable1 = table.dataTable(params);
                oTable1.show();
                window.jQuery('#loading_spinner').hide();


                window.jQuery('table th input:checkbox').on('click', function () {
                    var that = this;
                    window.jQuery(this).closest('table').find('tr > td:first-child input:checkbox')
                            .each(function () {
                                this.checked = that.checked;
                                window.jQuery(this).closest('tr').toggleClass('selected');
                            });
                });

             });
        });

        console.debug('finished initializing the init_table_data dialog!')
    }
</script>

<script type="text/javascript">
    function destruct_html_modal() {
        window.jQuery('#items_table').unbind();
        window.jQuery('#html_template').data('modal', null);
    }
</script>

