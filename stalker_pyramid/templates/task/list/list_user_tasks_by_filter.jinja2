{% raw %}
<script id="tmpl_btn" type="text/x-dot-template">
    <button
            id="{{=it.id}}"
            class="btn btn-small btn-grey tooltip-success"
            title="{{=it.title}}"
            >
        <i class="{{=it.icon}}"></i>
    </button>
</script>
{% endraw %}


<script class="dialog_loaded"></script>
<div class="row-fluid">
    <div id="tasks_list" class="widget-box hide">
        <div id="html_template_header" class="widget-header widget-header-small header-color-status_{{ filter.code.lower() }} ">
            <h5 id="items_header"></h5>
            <div class="widget-toolbar">
                <div class="space-5"></div>
                <div id="button_list">

                </div>
            </div>
        </div>
        <div class="widget-body">
            <div class="widget-main no-padding">

                <div id="loading_spinner" class="well well-sm">

                    <div class="inline middle blue bigger-110">
                        <i class="icon-spinner icon-spin orange bigger-125"></i>
                        Loading
                        content...
                    </div>
                </div>
                {% include 'components/jgrid_table.jinja2' %}
            </div>
        </div>
    </div>
</div>

<script src='{{ request.static_url("stalker_pyramid:static/jqGrid/js/i18n/grid.locale-en.js") }}'></script>
<script src='{{ request.static_url("stalker_pyramid:static/jqGrid/js/jquery.jqGrid.js") }}'></script>
<script src='{{ request.static_url("stalker_pyramid:static/jqGrid/js/jquery.jqGrid.min.js") }}'></script>
<script src='{{ request.static_url("stalker_pyramid:static/jqGrid/plugins/ui.multiselect.js") }}'></script>

<script>

    function clear_html_modal(){
        $('#tasks_list').hide();
        $('#button_list').find('button').remove();
        unloadTableData();

    }
    function init_html_modal(status_code, project_id) {
        clear_html_modal();

        console.debug('starting to initialize init_html_modal dialog!!!');

        var items_header = $('#items_header');
        items_header.text(status_code);

        $('#html_template_header').attr('class', 'widget-header widget-header-small header-color-status_'+status_code);
        $('#tasks_list').show();
        var button_list = $('#button_list');
        button_list.find('button').remove();
        var btn_template = doT.template($('#tmpl_btn').html());
        var remove_task_btn_info = {
                                        'id':'remove_resource_btn',
                                        'title':'Remove Task',
                                        'icon':'icon-trash'
        };

        var enter_timelog_btn_info = {
                                        'id':'timelog_btn',
                                        'title':'Enter Timelog',
                                        'icon':'icon-calendar'
        };

        var force_complete_btn_info = {
                                        'id':'force_complete_btn',
                                        'title':'Force Complete',
                                        'icon':'icon-ok'
        };

        var request_revisions_btn_info = {
                                        'id':'request_revisions_btn',
                                        'title':'Request Revisions',
                                        'icon':'icon-comment-alt'
        };

         {% if logged_in_user.id == entity.id   or has_permission('Update_Task') %}
            if (status_code == 'wfd' || status_code == 'rts'){
                button_list.append(btn_template(remove_task_btn_info));
                if ( status_code == 'rts'){
                    button_list.append(btn_template(enter_timelog_btn_info));
                }
            }
            if (status_code == 'wip' || status_code == 'hrev'){
                button_list.append(btn_template(force_complete_btn_info));
                button_list.append(btn_template(remove_task_btn_info));
                button_list.append(btn_template(enter_timelog_btn_info));
            }

            if (status_code == 'cmpl'){
                button_list.append(btn_template(request_revisions_btn_info));
            }
        {% endif %}

        var query_str = 'status_code='+status_code+'&project_id='+project_id;

        var colNames = ['Name', 'Bid', 'ST'];
        var colModel = [
                        {
                            name:'full_path',
                            index:'full_path',
                            width:220,
                            editable: false,
                            formatter:taskLabelFormatter,
                            cellattr: function (rowId, tv, rawObject, cm, rdata) { return 'style="white-space: normal;"' }
                        },
                        {
                            name:'hour_based_on_bid',
                            index:'hour_based_on_bid',
                            width:25, editable: false,
                            formatter:bidFormatter
                        },
                        {
                            name:'hour_to_complete',
                            index:'hour_to_complete',
                            width:25,
                            editable: false
                        }
                ];

        var tableDataAddress = '/users/{{ entity.id }}/tasks/simple/?' + query_str;
        $('#loading_spinner').show();

        $.getJSON(tableDataAddress).then(function (data) {
            $('#loading_spinner').hide();
            console.log("tableDataAddress is loaded");
            var total_remain_st_seconds = 0;
            var total_remain_bid_seconds = 0;

            for (var i = 0; i < data.length; i++) {

{#                data[i].start = new Date(data[i].start).format('yyyy-mm-dd HH:MM');#}
{##}
{#                if(data[i].end){#}
{#                    data[i].end = new Date(data[i].end).format('yyyy-mm-dd HH:MM');#}
{#                }#}

                data[i].project_name = get_project_name(data[i].project_id);

                var bid_seconds = to_seconds(
                                        data[i].bid_timing,
                                        data[i].bid_unit
                                );

                total_remain_bid_seconds += (bid_seconds-data[i].total_logged_seconds);

                data[i].hour_based_on_bid = meaningful_time_between(
                                                    bid_seconds,
                                                    data[i].total_logged_seconds
                                            );

                var st_seconds = to_seconds(
                                        data[i].schedule_timing,
                                        data[i].schedule_unit
                                );

                total_remain_st_seconds += (st_seconds-data[i].total_logged_seconds);

                data[i].hour_to_complete = meaningful_time_between(
                                               st_seconds,
                                               data[i].total_logged_seconds
                                           );

                if(bid_seconds < data[i].total_logged_seconds){
                     data[i].bid_stat = '#ff0000'
                }
            }

            var footerData = {
                full_path:'TOTAL',
                hour_based_on_bid: meaningful_time(total_remain_bid_seconds),
                hour_to_complete: meaningful_time(total_remain_st_seconds)
            };

            loadTableData(
                    data,
                    "grid-table",
                    colNames,
                    colModel,
                    footerData
                );
        });


        function taskLabelFormatter(cellvalue, options, rowObject){
                return '<a href="/tasks/'+rowObject.id+'/view">'+cellvalue+'</a>';
        }


        function bidFormatter(cellvalue, options, rowObject){
                return '<span style="background-color: '+rowObject.bid_stat+'; opacity:0.8;">'+cellvalue+'</span>';
        }

        var submit_form_url = '/tasks/force_status/CMPL/dialog';
        var force_complete_btn = $('#force_complete_btn');
        if(force_complete_btn){
            force_complete_btn.on('click', function(){
                submit_form_url = '/tasks/force_status/CMPL/dialog';
                submit_action()
            });
        }

        var request_revisions_btn = $('#request_revisions_btn');
        if(request_revisions_btn){
            request_revisions_btn.on('click', function(){
                submit_form_url = '/tasks/request_revisions/dialog';
                submit_action()
            });
        }

        var remove_resource_btn = $('#remove_resource_btn');
        if(remove_resource_btn){
            remove_resource_btn.on('click', function(){
                submit_form_url = '/tasks/remove/resources/{{ entity.id }}/dialog';
                submit_action()
            });
        }

        var timelog_btn = $('#timelog_btn');
        if(timelog_btn){
            timelog_btn.on('click', function(){
                submit_form_url = '/users/{{ entity.id }}/multi_timelogs/create/dialog?';
                submit_action();
            });
        }

        function submit_action(){

            var event_dialog = $('#dialog_template');
            var selected_task_ids = jQuery('#grid-table').jqGrid('getGridParam','selarrrow');

            var _query = '?entity_id={{ entity.id }}';

            for (var i=0; i<selected_task_ids.length; i++){
               _query +='&task_ids='+selected_task_ids[i];
            }

            event_dialog.modal({
                'remote': submit_form_url+_query
            });
        }
        console.debug('finished initializing the init_html_modal dialog!')
    }
</script>

<script type="text/javascript">
    function destruct_html_modal() {
        $('#items_table').unbind();
        $('#html_template').data('modal', null);
    }
</script>
