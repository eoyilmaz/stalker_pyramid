{% raw %}
<script id="tmpl_btn" type="text/x-dot-template">
    <button
            id="{{=it.id}}"
            class="btn btn-mini btn-white tooltip-success"
            title="{{=it.title}}"
            url="{{=it.url}}"
            modal="{{=it.modal}}"
            >
        <i class="{{=it.icon}}"></i>
    </button>
</script>
{% endraw %}

{% raw %}
    <script id="tmpl_taskStatusLink" type="text/x-dot-template">
        <li class="link" id="tab_{{=it.status_code}}">
            <a data-toggle="tab" href="" id="link_{{=it.status_code}}">
                <i class="status_{{=it.status_code_lc }} {{=it.status_icon }} bigger-120"></i>
                {{=it.status_code}}  ({{=it.tasks_count }})
            </a>
        </li>
    </script>
{% endraw %}

{% raw %}
<script id="tmpl_itemThead" type="text/x-dot-template">
    <tr>
        <th class="center">
            <label>
                <input type="checkbox" class="ace"/>
                <span class="lbl"></span>
            </label>
        </th>
        <th>Start</th>
        <th>End</th>
        <th>Name</th>
        <th>Bid</th>
        <th>ST</th>
        <th></th>
    </tr>
</script>
{% endraw %}

{% raw %}
<script id="tmpl_itemRow" type="text/x-dot-template">
    <tr>
        <td class="center">
            <label>
                <input id="{{=it.id}}"
                       type="checkbox"
                       class="ace ace-checkbox-2"
                >
                <span class="lbl"></span>
            </label>
        </td>
        <td>{{=it.start}}</td>
        <td>{{=it.end}}</td>
        </td>
        <td><a href='/tasks/{{=it.id}}/view'>{{=it.full_path}}</a></td>
        <td>{{=it.hour_based_on_bid}}</td>
        <td>{{=it.hour_to_complete}}</td>
        <td>{{=it.actions}}</td>
    </tr>
</script>
{% endraw %}

{% raw %}
<script id="tmpl_itemFooterRow" type="text/x-dot-template">
    <tr>
       <td>TOTAL</td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
    </tr>
</script>
{% endraw %}

<div class="row-fluid">
    <div class="span10"  id="tasks_status_tabs_container">
        <ul class="nav nav-tabs">

        </ul>
    </div>
    <select id='project_cb' class='pull-right span2 input-block-level'>
    </select>
</div>

<div class="row-fluid">
    <div id="tasks_list" class="widget-box hide">
        <div id="html_template_header" class="widget-header widget-header-small header-color-status_{{ filter.code.lower() }} ">
            <h5 id="items_header"></h5>
            <div class="widget-toolbar">
                <div class="space-5"></div>
                <div id="button_list">
                </div>

            </div>
        </div>
        <div class="widget-body">
            <div class="widget-main no-padding">
                <div id="loading_spinner" class="well well-sm">
                    <div class="inline middle blue bigger-110">
                        <i class="icon-spinner icon-spin orange bigger-125"></i>
                        Loading
                        content...
                    </div>
                </div>
                <div class="row-fluid" id="table_container">
{#                    <table id="items_table" class="table table-striped table-bordered table-hover"><thead></thead><tbody></tbody></table>#}
                </div>
                <div>

                    <h5 class="span2 pull-right">
                            Total ST :
                            <span id="total_st"></span>
                        </h5>

                    <h5 class="span2 pull-right">
                            Total BID :
                            <span id="total_bid"></span>
                        </h5>
                </div>
            </div>
        </div>
    </div>
</div>

<script src='{{ request.static_url("stalker_pyramid:static/jqGrid/js/i18n/grid.locale-en.js") }}'></script>
<script src='{{ request.static_url("stalker_pyramid:static/jqGrid/js/jquery.jqGrid.js") }}'></script>
<script src='{{ request.static_url("stalker_pyramid:static/jqGrid/js/jquery.jqGrid.min.js") }}'></script>
<script src='{{ request.static_url("stalker_pyramid:static/jqGrid/plugins/ui.multiselect.js") }}'></script>
<script src='{{ request.static_url("stalker_pyramid:static/ace/js/jquery.dataTables.min.js") }}'></script>
<script src='{{ request.static_url("stalker_pyramid:static/ace/js/jquery.dataTables.bootstrap.js") }}'></script>
<script src='{{ request.static_url("stalker_pyramid:static/stalker/js/dataTable_num-html_sort.js") }}'></script>

<script>
    var oTable1 = null;
    $(document).ready(function () {
        var project_id = localStorage.getItem("project_id");
        var status_code = '';

        {% raw %}
            var option_template = doT.template('<option value={{=it.id}}>{{=it.name}}</option>');
        {% endraw %}

        var project_cb = $('#project_cb');
        project_cb.chosen({
            search_contains: true,
            enable_split_word_search: true
        });

        $.getJSON('/entities/{{ entity.id }}/projects/').then(function(data){

            project_cb.find('option').remove();

            var data_count = data.length;

            for (var i=0; i < data_count; i++){
                project_cb.append(option_template(data[i]));
            }

            if (project_id){
                project_cb.val(project_id)
            }
            else{
                project_id = project_cb.val();
            }

            // update the chosen fields
            project_cb.trigger('liszt:updated');
            project_id = project_cb.val();

            clear_html_modal();
            initInfoLink('/entities/{{ entity.id }}/tasks_stats/?project_id='+project_id);


            project_cb.on('change', function () {
                project_id = $(this).val();
                localStorage.setItem("project_id", project_id);
                localStorage.setItem("status_code", '');

                clear_html_modal();
                initInfoLink('/entities/{{ entity.id }}/tasks_stats/?project_id='+project_id);
            });
        });
    });


    function getTableSelectedIds(){
        var ids = [];
        $('table td:first-child input:checkbox').each(function () {

            if(this.checked){
                ids.push(this.id);
            }
        });
        return ids;
    }

    function generateQuery(){
        var _query = '?entity_id={{ entity.id }}';
        var ids = getTableSelectedIds();
        for (var i=0; i<ids.length; i++){
               _query +='&task_ids='+ids[i];
            }
        return _query;
    }

    function submit_action(url, modal){

        var _query = generateQuery();
        if(modal == 'true'){
            var event_dialog = $('#dialog_template');
            event_dialog.modal({
                'remote': url+_query
            });
        }
        else{
            $.post(url+_query).done(function (response_text) {
                window.location.reload();
            }).fail(function (jqXHR) {
                bootbox.alert(jqXHR.responseText);
            });
        }
    }

    function get_task_notes(id, name){

        var event_dialog = $('#html_template');
        event_dialog.attr('title', name);
{#        console.log('get_task_notes ' + name);#}
        event_dialog.modal({
            'remote': '/entities/'+id+'/notes/list/inmodal'
        });
    }


    function get_task_absoulute_path(task_id){

        $.getJSON('/tasks/' + task_id + '/absolute_full_path/').then(function (absolute_full_path) {
            window.prompt("Copy to clipboard: Ctrl+C, Enter", absolute_full_path);
        });
    }

    function initInfoLink(address){

        var tasks_status_tabs_container = $('#tasks_status_tabs_container');
        tasks_status_tabs_container.find("ul").remove();
        tasks_status_tabs_container.append('<ul class="nav nav-tabs" id="tasks_status_tabs"></ul>');
        var tasks_status_tabs = $('#tasks_status_tabs');

        var link_template = doT.template($('#tmpl_taskStatusLink').html());

        $.getJSON(address).then(function (data) {

            var sorting_path = ['WFD','RTS','WIP', 'PREV','HREV', 'DREV', 'CMPL', 'OH','STOP'];
            var sorted_data = [];
            var first_status = '';
            var first_status_name = '';
            var index = -1;

            for (var i = 0; i < data.length; i++) {

                if(data[i].status_icon == ''){
                   data[i].status_icon = get_icon(data[i].status_code);
                }

                index = sorting_path.indexOf(data[i].status_code.toString());
                if (index !== -1){
                    sorted_data[index] = data[i];
                }
                data[i].status_code_lc = (data[i].status_code).toLowerCase();
            }

            for (var k = 0; k < sorted_data.length; k++) {
                if(sorted_data[k]){
                    var status_code = localStorage.getItem("status_code");
                    var status_name = localStorage.getItem("status_name");

                    if (first_status == ''){
                        first_status = sorted_data[k].status_code;
                        first_status_name = sorted_data[k].status_name;
                    }

                    if (status_code != ''){
                        first_status = status_code;
                        first_status_name = status_name;
                    }

                    if (sorted_data[k].status_code == status_code){
                        sorted_data[k].class = 'active';
                    }

                    tasks_status_tabs.append(link_template(sorted_data[k]));

                    var link = $('#link_'+sorted_data[k].status_code);
                    link.attr("status_name", sorted_data[k].status_name );

                    link.on('click', function(){

                        var status_code = $(this).attr('id').split('_')[1];
                        localStorage.setItem("status_code", status_code);
                        localStorage.setItem("status_name", $(this).attr('status_name'));
                        init_table_data(status_code, $(this).attr('status_name'), $('#project_cb').val());

                    });
                }
            }
            if (first_status != ''){
                var tab = $('#tab_'+first_status);
                tab.attr('class','active');
                init_table_data(first_status, first_status_name, $('#project_cb').val());
            }
        });
    }

    function clear_html_modal(){

        console.log("clear_html_modal");

        $('#tasks_list').hide();
        $('#button_list').find('button').remove();

         $('#loading_spinner').show();
{#        if(oTable1){#}
{#            oTable1.dataTable();#}
{#        }#}
        var tasks_table = $('#items_table_wrapper');
        tasks_table.find('thead').remove();
        tasks_table.find('tbody').remove();

        var table_container = $('#table_container');
        table_container.find(".dataTables_wrapper").remove();
    }


    function init_table_data(status_code, status_name, project_id) {
        clear_html_modal();

        console.debug('starting to initialize init_table_data dialog!!!');

        var button_list = $('#button_list');
        button_list.find('button').remove();

        var btn_template = doT.template($('#tmpl_btn').html());
        var remove_task_btn_info = {
                                        'id':'remove_resource_btn',
                                        'title':'Remove Task',
                                        'icon':'icon-trash',
                                        'url':'/tasks/remove/resources/{{ entity.id }}/dialog',
                                        'modal':true
        };

        var enter_timelog_btn_info = {
                                        'id':'timelog_btn',
                                        'title':'Enter Timelog',
                                        'icon':'icon-calendar',
                                        'url':'/users/{{ entity.id }}/multi_timelogs/create/dialog',
                                        'modal':true
        };

        var force_complete_btn_info = {
                                        'id':'force_complete_btn',
                                        'title':'Force Complete',
                                        'icon':'icon-ok',
                                        'url': '/tasks/force_status/CMPL/dialog',
                                        'modal':true
        };

        var request_revisions_btn_info = {
                                        'id':'request_revisions_btn',
                                        'title':'Request Revisions',
                                        'icon':'icon-comment-alt',
                                        'url': '/tasks/request_revisions/dialog',
                                        'modal':true
        };

        var request_review_btn_info = {
                                        'id':'request_review_btn',
                                        'title':'Request Review',
                                        'icon':'icon-comment',
                                        'url':'/tasks/request_review/dialog',
                                        'modal':true
        };

        var set_start_end_date_btn_info = {
                                        'id':'set_start_end_date_btn',
                                        'title':'Set Start End Date',
                                        'icon':'icon-edit',
                                        'url':'/tasks/set_start_end_date/dialog',
                                        'modal':true
        };

        var fix_btn_info = {
                                        'id':'fix_task_btn',
                                        'title':'Fix Tasks',
                                        'icon':'icon-cogs',
                                        'url':'/tasks/fix/statuses/',
                                        'modal':false
        };



        {% if logged_in_user.id == entity.id  or has_permission('Update_Task') %}

            if ( status_code == 'RTS'){
                button_list.append(btn_template(enter_timelog_btn_info));
            }

            if (status_code == 'WIP' || status_code == 'HREV'){
                button_list.append(btn_template(force_complete_btn_info));
                button_list.append(btn_template(enter_timelog_btn_info));
                if ( status_code == 'WIP'){
                    {% if entity == logged_in_user %}
                        button_list.append(btn_template(request_review_btn_info));
                    {% endif %}
                }
            }

            if (status_code == 'CMPL'){
                button_list.append(btn_template(request_revisions_btn_info));
            }
        {% endif %}

        {% if has_permission('Create_Review') %}
            if (status_code == 'PREV'){
                button_list.append(btn_template(force_complete_btn_info));
                button_list.append(btn_template(request_revisions_btn_info));
            }
        {% endif %}

        {% if has_permission('Update_Task') %}
            if (status_code == 'WFD' || status_code == 'RTS' || status_code == 'WIP' || status_code == 'HREV'){
                button_list.append(btn_template(set_start_end_date_btn_info));
            }
        {% endif %}

        button_list.append(btn_template(fix_btn_info));
        $('.btn-mini').on('click', function(e){
            e.preventDefault();
            e.stopPropagation();


            submit_action($(this).attr("url"), $(this).attr("modal"));
        });


        var items_header = $('#items_header');
        items_header.text(status_name);

        $('#html_template_header').attr('class', 'widget-header widget-header-small header-color-status_'+status_code.toLowerCase());
        $('#tasks_list').show();

        var table_container = $('#table_container');
        table_container.append('<table id="items_table" class="table table-striped table-bordered table-hover"><thead></thead><tbody></tbody></table>');
        var table = $('#items_table');

        var table_head = table.find('thead');
        var thead_template = doT.template($('#tmpl_itemThead').html());
        table_head.append(thead_template({}));

        var table_body = table.find('tbody');
        var row_template = doT.template($('#tmpl_itemRow').html());

        var query_str = 'status_code=' + status_code + '&project_id=' + project_id;
        var tableDataAddress = '/users/{{ entity.id }}/tasks/simple/?' + query_str;


        $.getJSON(tableDataAddress).then(function (data) {
            $('#loading_spinner').hide();
            console.log("tableDataAddress is loaded");
            var total_remain_st_seconds = 0;
            var total_remain_bid_seconds = 0;

            for (var i = 0; i < data.length; i++) {

                data[i].start = new Date(data[i].start).format('yyyy-mm-dd');

                if(data[i].end){
                    data[i].end = new Date(data[i].end);
                    if (data[i].end< new Date()){
                        data[i].end = '<span class="red">'+data[i].end.format('yyyy-mm-dd')+'</span>'
                    }
                    else{
                        data[i].end = '<span class="green">'+data[i].end.format('yyyy-mm-dd')+'</span>'
                    }
                }


                var bid_seconds = to_seconds(
                                        data[i].bid_timing,
                                        data[i].bid_unit
                                );

                total_remain_bid_seconds += (bid_seconds-data[i].total_logged_seconds);

                data[i].hour_based_on_bid = meaningful_time_between(
                                                    bid_seconds,
                                                    data[i].total_logged_seconds
                                            );

                var st_seconds = to_seconds(
                                        data[i].schedule_timing,
                                        data[i].schedule_unit
                                );

                total_remain_st_seconds += (st_seconds-data[i].total_logged_seconds);

                data[i].hour_to_complete = meaningful_time_between(
                                               st_seconds,
                                               data[i].total_logged_seconds
                                           );
{#                data[i].actions = '<span class="btn btn-danger btn-small tooltip-error" data-rel="popover" data-placement="top" data-original-title=" Top Danger" data-content="Oh snap! Change a few things up and try submitting again.">Top</span>'#}
                data[i].actions = '<div class="hidden-phone visible-desktop action-buttons"><a class="purple" title="Notes" onclick="get_task_notes('+data[i].id+', \''+data[i].full_path+'\')"><i class="icon-list bigger-130"></i></a>';
                if (status_code == 'HREV' || status_code == 'DREV' || status_code == 'WIP' || status_code == 'CMPL' || status_code == 'PREV'){
                     data[i].actions += '<a class="green"  title="Copy Path" onclick="get_task_absoulute_path('+data[i].id+')"><i class="icon-copy bigger-130"></i></a></div>';
                }
                else{
                    data[i].actions += '</div>';
                }

                if(bid_seconds < data[i].total_logged_seconds){
                     data[i].bid_stat = '#ff0000'
                }

               data[i].hour_based_on_bid = '<span style="background-color: '+data[i].bid_stat+'; opacity:0.8;">'+data[i].hour_based_on_bid+'</span>';

                table_body.append(row_template(data[i]));
            }

            oTable1 = table.dataTable({ "aoColumns": [
                                                                { "bSortable": false },
                                                                null,
                                                                null,
                                                                null,
                                                                null,
                                                                null,
                                                                { "bSortable": false }
                                                            ]
                });
            oTable1.show();

{#            var footerData = {#}
{#                full_path:'TOTAL',#}
{#                hour_based_on_bid: meaningful_time(total_remain_bid_seconds),#}
{#                hour_to_complete: meaningful_time(total_remain_st_seconds)#}
{#            };#}
            $('#total_bid').text(meaningful_time(total_remain_bid_seconds));
            $('#total_st').text(meaningful_time(total_remain_st_seconds));

            $('table th input:checkbox').on('click', function () {
                    var that = this;
                    $(this).closest('table').find('tr > td:first-child input:checkbox')
                            .each(function () {
                                this.checked = that.checked;
                                $(this).closest('tr').toggleClass('selected');
                            });
                });


            $('[data-rel=popover]').popover({html:true});
        });

{#        function endDateFormatter(cellvalue, options, rowObject){#}
{#                var val = cellvalue.format('yyyy-mm-dd');#}
{#                if (cellvalue< new Date()){#}
{#                    val = '<span class="red">'+cellvalue.format('yyyy-mm-dd')+'</span>'#}
{#                }#}
{#                return val;#}
{#        }#}

{#        function taskLabelFormatter(cellvalue, options, rowObject){#}
{##}
{#                return '<a href="/tasks/'+rowObject.id+'/view">'+cellvalue+'</a>';#}
{#        }#}
{##}
{##}
{#        function bidFormatter(cellvalue, options, rowObject){#}
{#                return '<span style="background-color: '+rowObject.bid_stat+'; opacity:0.8;">'+cellvalue+'</span>';#}
{#        }#}

{#        var submit_form_url = '/tasks/force_status/CMPL/dialog';#}
{#        var force_complete_btn = $('#force_complete_btn');#}
{#        if(force_complete_btn){#}
{#            force_complete_btn.on('click', function(){#}
{#                submit_form_url = '/tasks/force_status/CMPL/dialog';#}
{#                submit_action()#}
{#            });#}
{#        }#}
{##}
{#        var request_revisions_btn = $('#request_revisions_btn');#}
{#        if(request_revisions_btn){#}
{#            request_revisions_btn.on('click', function(){#}
{#                submit_form_url = '/tasks/request_revisions/dialog';#}
{#                submit_action()#}
{#            });#}
{#        }#}
{##}
{#        var remove_resource_btn = $('#remove_resource_btn');#}
{#        if(remove_resource_btn){#}
{#            remove_resource_btn.on('click', function(){#}
{#                submit_form_url = '/tasks/remove/resources/{{ entity.id }}/dialog';#}
{#                submit_action()#}
{#            });#}
{#        }#}
{##}
{#        var timelog_btn = $('#timelog_btn');#}
{#        if(timelog_btn){#}
{#            timelog_btn.on('click', function(){#}
{#                submit_form_url = '/users/{{ entity.id }}/multi_timelogs/create/dialog?';#}
{#                submit_action();#}
{#            });#}
{#        }#}
{##}
{#        var set_start_end_date_btn = $('#set_start_end_date_btn');#}
{#        if(set_start_end_date_btn){#}
{#            set_start_end_date_btn.on('click', function(){#}
{#                submit_form_url = '/tasks/set_start_end_date/dialog';#}
{#                submit_action()#}
{#            });#}
{#        }#}
{##}
{#        var request_review_btn = $('#request_review_btn');#}
{#        if(request_review_btn){#}
{#            request_review_btn.on('click', function(){#}
{#                submit_form_url = '/tasks/request_review/dialog';#}
{#                submit_action()#}
{#            });#}
{#        }#}


        console.debug('finished initializing the init_table_data dialog!')
    }
</script>

<script type="text/javascript">
    function destruct_html_modal() {
        $('#items_table').unbind();
        $('#html_template').data('modal', null);
    }
</script>
