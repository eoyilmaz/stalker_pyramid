{# Stalker Pyramid a Web Base Production Asset Management System
 Copyright (C) 2009-2013 Erkan Ozgur Yilmaz
 
 This file is part of Stalker Pyramid.
 
 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation;
 version 2.1 of the License.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
#}
<div class='dijitDialogPaneContentArea'>
<form id='task_form'>
<table style='width: 100%; '>

    {# PROJECT #}
    <tr>
        <td class='label_column'>
            <label for='task_project'>Project</label>
        </td>
        <td class='input_column'>
            <input id='task_project'>
        </td>
    </tr>

     {# Entity Type #}
    <tr>
        <td class='label_column'>
            <label for='task_entity_type'>Type</label>
        </td>
        <td class='input_column'>
            <input id='task_entity_type'>
        </td>
    </tr>

     {# PARENT #}
    <tr>
        <td class='label_column'>
            <label for='task_parent'>Parent</label>
        </td>
        <td class='input_column' colspan="2">
            <input id='task_parent'>
        </td>
    </tr>

    {# NAME #}
    <tr>
        <td class='label_column'>
            <label for='task_name'>Name</label>
        </td>
        <td class='input_column'>
            <input id='task_name'>
        </td>
    </tr>


    {# Entity Code #}
    <tr id="entity_type_is_not_task">

        <td class='label_column'>
            <label for='entity_code'>Code</label>
        </td>
        <td class='input_column'>
            <input id='entity_code'>
        </td>
    </tr>

    {# Entity=Asset #}
    <tr id="entity_type_is_asset">

        <td class='label_column'>
            <label for='asset_type'>Asset Type</label>
        </td>
        <td class='input_column'>
            <input id='asset_type'>
        </td>
    </tr>

    {# Entity=Shot #}
    <tr id="entity_type_is_shot">

        <td class='label_column'>
            <label for='shot_sequence'>Sequence</label>
        </td>
        <td class='input_column'>
            <input id='shot_sequence'>
        </td>
    </tr>

    {# DESCRIPTION #}
    <tr>
        <td class='label_column'>
            <label for='task_description'>Description</label>
        </td>
        <td class='input_column'>
            <input id='task_description'>
        </td>
    </tr>

    {# DEPENDENCIES #}
    <tr>
        <td class='label_column'>
            <label for='task_depends'>Depends</label>
        </td>
        <td class='input_column'>
            <input id='task_depends'>
        </td>
    </tr>

    {# RESOURCES #}
    <tr>
        <td class='label_column'>
            <label for='task_resources'>Resources</label>
        </td>
        <td class='input_column'>
            <div id='task_resources'></div>
        </td>
    </tr>

    {# RESPONSIBLE #}
    <tr>
        <td class='label_column'>
            <label for='task_responsible'>Responsible</label>
        </td>
        <td class='input_column'>
            <div id='task_responsible'></div>
        </td>
    </tr>


    {# CONSTRAINS #}

    {# SCHEDULE USING / EFFORT / LENGTH / DURATION #}
    <tr>
        <td class='label_column'>
            <label for='task_schedule_model'>Schedule Model</label>
        </td>
        <td class='input_column'>
            <input id='task_schedule_model'>
        </td>
    </tr>

    {# SCHEDULE TIMING #}
    <tr>
        <td class='label_column'>
            <label for='task_schedule_timing'>Schedule Timing</label>
        </td>
        <td class='input_column'>
            <div id='task_schedule_timing'></div>
            <div id='task_schedule_unit'></div>
        </td>
    </tr>

    {% if mode=='UPDATE' %}
        <tr>
            <td class='label_column'>
                <label for='task_update_bid'>Also Update Bid ?</label>
            </td>
            <td class='input_column'>
                <div id='task_update_bid'></div>
            </td>
        </tr>
    {% endif %}



    {# START #}
    <tr>
        <td class='label_column'>
            <label for='task_start_constraint'>Constrain Start
                Date</label>
        </td>
        <td class='input_column'>
            <input id='task_start_constraint'>

            <div id='task_start_date'></div>
            <div id='task_start_time'></div>
        </td>
    </tr>

    {# END #}
    <tr>
        <td class='label_column'>
            <label for='task_end_constraint'>Constrain End Date</label>
        </td>
        <td class='input_column'>
            <input id='task_end_constraint'>

            <div id='task_end_date'></div>
            <div id='task_end_time'></div>
        </td>
    </tr>

    {# MILESTONE #}
    <tr>
        <td class='label_column'>
            <label for='task_is_milestone'>Is Milestone</label>
        </td>
        <td class='input_column'>
            <input id="task_is_milestone" type="checkbox">
        </td>
    </tr>

    {# PRIORITY #}
    <tr>
        <td class='label_column'>
            <label for='task_priority'>Priority</label>
        </td>
        <td class='input_column'>
            <input id="task_priority" value=500>
        </td>
    </tr>

    {# STATUS #}
    <tr>
        <td class='label_column'>
            <label for='task_status'>Status</label>
        </td>
        <td class='input_column'>
            <input id='task_status'>
        </td>
        <td class='button_column'>
            <button id='task_add_status_button'>Add Status</button>
        </td>
    </tr>




</table>
</form>
</div>

<div class='dijitDialogPaneActionBar'>
    <button id='task_ok_button'>Ok</button>
    <button id='task_cancel_button'>Cancel</button>
</div>

<script type='text/javascript'>
require([
    'dijit/form/Form',
    'dijit/form/ValidationTextBox',
    'dijit/form/TextBox',
    'dijit/form/FilteringSelect',
    'dijit/form/ComboBox',
    'dijit/form/Button',
    'dijit/form/CheckBox',
    'dijit/form/DateTextBox',
    'dijit/form/TimeTextBox',
    'dijit/form/NumberSpinner',

    'dojo/store/Memory',
    'dojo/store/JsonRest',

    'dojo/date',
    'dojo/date/stamp',
    'dojo/date/locale',

    'stalker/dialogs',
    'stalker/Tag',
    'stalker/TagSelect',
    'stalker/submitForm',
    'stalker/fieldUpdater',
    'stalker/dialogCaller',
    'dijit/registry',
    'dojo/domReady!'
], function (Form, ValidationTextBox, TextBox, FilteringSelect, ComboBox,
             Button, CheckBox, DateTextBox, TimeTextBox, NumberSpinner, Memory,
             JsonRest, date, stamp, locale, dialogs, Tag, TagSelect,
             submitForm, fieldUpdater, dialogCaller, registry) {

    // generate default values
    var priority = 500;
    var name = '';
    var description = '';
    var depends_to = [];
    var parent_id = null;
    var schedule_model = '{{ schedule_models[0] }}';
    var schedule_timing = 1;
    var schedule_unit = 'h';
    var url = '{{ request.route_url('create_task')}}';
    var start_date = new Date();
    var start_time = 'T10:00:00'; // TODO: use the Studio start time for monday
    var end_date = new Date();
    var end_time = 'T19:00:00'; // TODO: use the Studio end time for monday
    var is_milestone = false;
    var selected_resources = [];
    var entity_type = 'Task';
    var user_memory;
    var responsible_id;
    var responsible_memory;
    var tasks_memory;
    var status_memory;


    {% if mode=='CREATE' %}
        {% if depends_to %}
            // set the depends value
            depends_to = [{{ depends_to.id }}];
        {% endif %}
        {% if parent %}
            parent_id = {{ parent.id }};
        {% endif %}
    {% elif mode=='UPDATE' %}
        priority = {{ task.priority }};
        name = '{{ task.name }}';
        description = '{{ task.description }}';
        depends_to = [
            {% for depend_task in task.depends %}
                {{ depend_task.id }},
            {% endfor %}
        ];
        {% if task.parent %}
            parent_id = {{ task.parent.id }};
        {% endif %}
        schedule_model = '{{ task.schedule_model }}';
        schedule_timing = {{ task.schedule_timing }};
        schedule_unit = '{{ task.schedule_unit }}';
        url = '{{ request.route_url('update_task', id=task.id) }}';
        start_date = new Date({{ milliseconds_since_epoch(task.start) }});
        start_time = 'T{{ '%02d'|format(task.start.hour) }}:{{'%02d'|format(task.start.minute) }}:00';
        end_date = new Date({{ milliseconds_since_epoch(task.end) }});
        end_time = 'T{{ '%02d'|format(task.end.hour) }}:00:00';
        {% if task.is_milestone %}
            is_milestone = true;
        {% else %}
            is_milestone = false;
        {% endif %}
        selected_resources = [
            {% for resource in task.resources %}
                {{ resource.id }},
            {% endfor %}
        ];
        responsible_id = {{ task.responsible.id }};
        entity_type = '{{ task.entity_type }}';
    {% endif %}



    var entity_type_is_not_task = document.getElementById('entity_type_is_not_task');
    entity_type_is_not_task.style.display = 'none';

    var entity_type_is_asset = document.getElementById('entity_type_is_asset');
    entity_type_is_asset.style.display = 'none'

    var entity_type_is_shot = document.getElementById('entity_type_is_shot');
    entity_type_is_shot.style.display = 'none'


    // ********************************************************************
    // Form
    var task_form = new Form({}, 'task_form');
    var dialog = task_form.getParent();
    // ********************************************************************
    // Project
    var project_textBox = new TextBox({
        name: 'project_name',
        label: 'Project',
        value: '{{ project.name }}',
        disabled: true,
        required: true,
        {#          style: 'width: 100%'#}
    }, 'task_project');
    project_textBox.startup();


    // ********************************************************************
    var tasks_jsonRest = new JsonRest({
        target: '{{ request.route_url('get_project_tasks', id=project.id) }}'
    });

    var parent_widget = new FilteringSelect({
        name: 'parent_id',
        label: 'Parent',
        required: false
    }, 'task_parent');
    parent_widget.startup();
    // updating parent somewhere down, after the json store fills the widget

    // ********************************************************************
    // Name
    var name_textBox = new ValidationTextBox({
        name: 'name',
        label: 'Name',
        placeHolder: 'Enter a name',
        required: true,
        value: name
        {#          style: 'width: 100%'#}
    }, 'task_name');
    name_textBox.startup();


    // ********************************************************************
    // Description
    var description_textBox = new TextBox({
        name: 'description',
        label: 'Description',
        placeHolder: 'Enter description',
        value: description
    }, 'task_description');
    description_textBox.startup();


    // ********************************************************************
    // Depends
    var depends_tagSelect = new TagSelect({
        id: 'depends_tagSelect',
        name: 'depend_ids',
        required: false,
        {#          style: 'width: 100%'#}
    }, "task_depends");
    depends_tagSelect.startup();

    var tasks_result = tasks_jsonRest.query().then(function (data) {
        tasks_memory = new Memory({data: data});

        {# remove self from lists #}
        {% if task %}
            tasks_memory.remove({{ task.id }});
        {% endif %}

        depends_tagSelect.set('store', tasks_memory);
        depends_tagSelect.set('value', depends_to);

        parent_widget.set('store', tasks_memory);

        if (parent_id) {
            parent_widget.set('value', parent_id);
        }

        if (user_memory && status_memory) {
            ok_button.set('disabled', false);
        }
    });

    // ********************************************************************
    // Schedule Model : EFFORT / LENGTH / DURATION
    var schedule_model_filteringSelect = new FilteringSelect({
        name: 'schedule_model',
        label: 'Schedule Model',
        store: new Memory({
            data: [
                {% for model in schedule_models %}
                    {
                        name: '{{ model }}',
                        id: '{{ model }}'
                    },
                {% endfor %}
            ]
        }),
        required: true,
        style: 'float: left;'
    }, 'task_schedule_model');
    // select the first one
    schedule_model_filteringSelect.set('value', schedule_model);

    // ********************************************************************
    // Schedule Timing
    var schedule_timing_numberSpinner = new NumberSpinner({
        name: 'schedule_timing',
        value: schedule_timing,
        constraints: { min: 0.1 },
        style: 'width: 65px; text-align: right; float: left; margin-right: 3px;'
    }, 'task_schedule_timing');
    schedule_timing_numberSpinner.startup();

    // Schedule Unit
    var schedule_unit_filteringSelect = new FilteringSelect({
        name: 'schedule_unit',
        store: new Memory({
            data: [
                {
                    name: 'hour',
                    id: 'h'
                },
                {
                    name: 'day',
                    id: 'd'
                },
                {
                    name: 'week',
                    id: 'w'
                },
                {
                    name: 'month',
                    id: 'm'
                },
                {
                    name: 'year',
                    id: 'y'
                }
            ]
        }),
        value: schedule_unit,
        style: 'width: 75px; text-align: right; float: left;'
    }, 'task_schedule_unit');
    schedule_unit_filteringSelect.startup();

    // ********************************************************************
    // Update Bid ?
    {% if mode=='UPDATE' %}
        var update_bid_checkBox = new CheckBox({
            id: 'update_bid',
            name: 'update_bid',
            value: 'checked',
            checked: true
        }, 'task_update_bid');
        update_bid_checkBox.startup();
    {% endif %}


    {#    var constrain_schedule_timing = function(){#}
    {#        var new_schedule_model = '{{ schedule_models[2] }}';#}
    {#        var start_date;#}
    {#        var new_schedule_timing = 0;#}
    {#    };#}

    // ********************************************************************
    // Start Date
    // CheckBox
    var start_constraint_checkBox = new CheckBox({
        id: 'start_constraint',
        name: 'start_constraint',
        value: 'checked',
        checked: false,
        onChange: function (new_value) {
            // enable the start date and start hour fields if checked
            if (new_value) {
                start_dateTextBox.set('disabled', false);
                start_time_timeTextBox.set('disabled', false);
                {#                if (end_constraint_checkBox.getValue() == 'checked'){#}
                {#                    constrain_schedule_timing();#}
                {#                }#}
            } else {
                start_dateTextBox.set('disabled', true);
                start_time_timeTextBox.set('disabled', true);
            }
            // TODO: if both of the start_constraint and end_constraint checked
            //       also change the schedule_using to DURATION and set the
            //       duration to the correct value
        }
    }, 'task_start_constraint');
    start_constraint_checkBox.startup();

    {% if mode == 'UPDATE' %}
        {% if task.schedule_constraint == 1 or task.schedule_constraint == 3 %}
            start_constraint_checkBox.set('checked', true);
        {% endif %}
    {% endif %}




    // Date
    var start_dateTextBox = new DateTextBox({
        name: 'start',
        label: 'Constrain Start Date',
        value: start_date,
        required: true,
        disabled: true,
        datePattern: 'dd-mm-yyyy',
        style: 'width: 90px;'
    }, 'task_start_date');
    start_dateTextBox.startup();


    // Time
    var start_time_timeTextBox = new TimeTextBox({
        name: 'start_time',
        disabled: true,
        style: 'width: 75px;',
        constraints: {
            timePattern: 'HH:mm:ss',
            clickableIncrement: 'T01:00:00', // TODO: set it to project.time_resolution
            visibleIncrement: 'T01:00:00',
            visibleRange: 'T01:00:00'
        },
        value: start_time
    }, 'task_start_time');
    start_time_timeTextBox.startup();


    // ********************************************************************
    // End Date
    // Checkbox
    var end_constraint_checkBox = new CheckBox({
        id: 'end_constraint',
        name: 'end_constraint',
        value: 'checked',
        checked: false,
        onChange: function (new_value) {
            // enable the end date and end hour fields if checked
            if (new_value) {
                end_dateTextBox.set('disabled', false);
                end_time_timeTextBox.set('disabled', false);
            } else {
                end_dateTextBox.set('disabled', true);
                end_time_timeTextBox.set('disabled', true);
            }
            // TODO: if both of the start_constraint and end_constraint checked
            //       also change the schedule_using to DURATION and set the
            //       duration to the correct value
        }
    }, 'task_end_constraint');
    end_constraint_checkBox.startup();

    {% if mode == 'UPDATE' %}
        {% if task.schedule_constraint == 2 or task.schedule_constraint == 3 %}
            end_constraint_checkBox.set('checked', true);
        {% endif %}
    {% endif %}



    // Date
    var end_dateTextBox = new DateTextBox({
        name: 'end',
        label: 'Constrain End Date',
        required: true,
        disabled: true,
        datePattern: 'dd-mm-yyyy',
        style: 'width: 90px;',
        value: end_date
    }, 'task_end_date');
    end_dateTextBox.startup();

    // Time
    var end_time_timeTextBox = new TimeTextBox({
        name: 'end_time',
        value: end_time,
        disabled: true,
        style: 'width: 75px;',
        constraints: {
            timePattern: 'HH:mm:ss',
            clickableIncrement: 'T01:00:00',
            visibleIncrement: 'T01:00:00',
            visibleRange: 'T01:00:00'
        }
    }, 'task_end_time');
    end_time_timeTextBox.startup();

    //var update_dates = function(start, end, duration){
    //  if (duration == null){
    //     // update the duration
    //    duration_numberTextBox.set(
    //      'value',
    //      date.difference(start, end)
    //    );
    //  } else if (end == null) {
    //     // update end date
    //    end_dateTextBox.set(
    //      'value',
    //      date.add(
    //        start,
    //        'day',
    //        duration
    //      )
    //    );
    //  }
    //};
    //update_dates();


    // ********************************************************************
    // Is Milestone
    var is_milestone_checkBox = new CheckBox({
        name: 'is_milestone',
        label: 'Is Milestone',
        value: 'checked',
        checked: is_milestone,
        onChange: function (new_value) {
            // disable the resources field if checked
            if (new_value) {
                resources_tagSelect.set('disabled', true);
            } else {
                resources_tagSelect.set('disabled', false);
            }
        }
    }, 'task_is_milestone');
    is_milestone_checkBox.startup();

    // ************************************************************************
    // Priority
    var priority_numberSpinner = new NumberSpinner({
        name: 'priority',
        value: priority,
        required: true,
        constraints: {
            min: 0,
            max: 1000
        }
    }, 'task_priority');
    priority_numberSpinner.startup();


    {# ********************************************************************* #}
    // Resources
    var users_jsonRest = new JsonRest({
        target: '{{ request.route_url("get_project_users", id=project.id) }}'
    });

    var resources_tagSelect = new TagSelect({
        id: 'resources_tagSelect',
        name: 'resource_ids',
        required: true,
        {#          style: 'width: 100%'#}
    }, 'task_resources');
    resources_tagSelect.startup();

    {# ********************************************************************* #}
    // Responsible
    var responsible_filteringSelect = new FilteringSelect({
        id: 'responsible_filteringSelect',
        name: 'responsible_id',
        required: false
    }, 'task_responsible');
    responsible_filteringSelect.startup();

    {# ********************************************************************* #}
    {# Set Resources and Responsible #}
    users_jsonRest.query().then(function (data) {
        user_memory = new Memory({data: data});

        // duplicate the data for responsible field
        var data_copy = data.slice();

        responsible_memory = new Memory({data: data_copy});
        responsible_filteringSelect.set('store', responsible_memory);
        if (responsible_id){
            responsible_filteringSelect.set('value', responsible_id);
        }

        resources_tagSelect.set('store', user_memory);
        resources_tagSelect.set('value', selected_resources);

        if (status_memory && tasks_memory) {
            ok_button.set('disabled', false);
        }

    });




    // ********************************************************************
    // Status
    //


    // The Field
    var status_filtering_select = new FilteringSelect({
        name: 'status_id',
        required: true,
        label: 'Status'
        // store: status_jsonRest
    }, 'task_status');
    status_filtering_select.startup();

    // The Updater
    var update_status_button_function = function (data) {
        status_memory = data;
        if (data.length > 0) {
            add_status_button.set('onClick', function () {

                var dialog = dijit.byId('status_list_dialog');

                if (dialog != null) {
                    dialog.destroyRecursive();
                }

                dialog = dialogs.update_status_list_dialog(entity_type);
                dialog.set('related_field_updater', status_field_updater);
                dialog.show();
            });
        }

        if (user_memory && tasks_memory) {
            ok_button.set('disabled', false);
        }
    };

    var status_field_updater;

    var get_status_filtering_select_data = function () {
        // The Memory
        var status_jsonRest = new JsonRest({
            target: 'statuses/' + entity_type + '/'
        });

        status_field_updater = fieldUpdater({
            memory: status_jsonRest,
            widget: status_filtering_select,
            callBack: update_status_button_function,
            {% if mode=='UPDATE' %}
                'selected': '{{ task.status.id }}'
            {% endif %}
        });

        status_field_updater({animate: true});

    };

    //get_status_filtering_select_data();

    var add_status_button = dialogCaller({
        label: 'Add Status',
        dialog_id: 'status_list_dialog',
        content_creator: dialogs.create_status_list_dialog,
        attach_to: 'task_add_status_button',
        related_field_updater: status_field_updater,
        data_id: entity_type
    });
    add_status_button.startup();

    // status_field_updater({animate: true});


    // ********************************************************************
    // ENTITY TYPE
    //
    var add_entity_special_props = function (value) {

        entity_type = value;

        get_status_filtering_select_data();

        var entity_type_is_not_task = document.getElementById('entity_type_is_not_task');
        entity_type_is_not_task.style.display = 'none';

        var entity_type_is_asset = document.getElementById('entity_type_is_asset');
        entity_type_is_asset.style.display = 'none';

        var entity_type_is_shot = document.getElementById('entity_type_is_shot');
        entity_type_is_shot.style.display = 'none';


        if (value != 'Task') {

            entity_type_is_not_task = document.getElementById('entity_type_is_not_task');
            entity_type_is_not_task.style.display = 'table-row';


            {% if mode=='UPDATE' %}
                code_textBox.set('value', '{{ task.code }}');
            {% endif %}



            if (value == 'Asset') {

                entity_type_is_asset = document.getElementById('entity_type_is_asset');
                entity_type_is_asset.style.display = 'table-row';

                type_comboBox.set('required', true);


                {% if mode=='UPDATE' %}
                    type_comboBox.set('value', '{{ task.type.name }}');
                {% endif %}

            }
            if (value == 'Shot') {

                entity_type_is_shot = document.getElementById('entity_type_is_shot');
                entity_type_is_shot.style.display = 'table-row';

            }


        }


    };

    // Entity type
    var entity_type_filteringSelect = new FilteringSelect({
        name: 'entity_type',
        label: 'Type',
        store: new Memory({
            data: [
                {
                    name: 'Task',
                    id: 'Task'
                },
                {
                    name: 'Asset',
                    id: 'Asset'
                },
                {
                    name: 'Shot',
                    id: 'Shot'
                },
                {
                    name: 'Sequence',
                    id: 'Sequence'
                }
            ]
        }),
        onChange: function (value) {
            add_entity_special_props(value);
        },
        required: true,
        style: 'float: left;'
    }, 'task_entity_type');
    // select the first one

    entity_type_filteringSelect.set('value', entity_type);
    {% if mode == 'UPDATE' %}
        entity_type_filteringSelect.set('disabled', true);
    {% endif %}


    // ****************************************************************
    // Code
    var code_textBox = new TextBox({
        name: 'code',
        label: 'Code',
        placeHolder: 'Enter a code'
    }, 'entity_code');
    code_textBox.startup();

    // ****************************************************************
    // Shot_Sequence

    // Sequence
    var sequence_memory = new JsonRest({
        target: 'projects/' {# the {id}/sequences/ part will be added later #}
    });

    var sequence_filtering_select = new FilteringSelect({
        name: 'shot_sequence_id',
        required: false,
        label: 'Sequence'
    }, 'shot_sequence');
    sequence_filtering_select.startup();

    var sequence_field_updater = fieldUpdater({
        memory: sequence_memory,
        query_data: function () {
            return '{{ project.id }}/sequences/';
        },
        widget: sequence_filtering_select
    });
    sequence_field_updater({animate: false});


    // ****************************************************************
    // Asset Type
    var type_memory = new JsonRest({
        target: '{{ request.route_url("get_asset_types") }}'
    });


    {# define the UI widget type #}
    var type_widget_type;
    var type_place_holder;

    {% if has_permission('Create_Type') %}
        type_widget_type = ComboBox;
        type_place_holder = 'Enter A New Type or Select A Type';
    {% else %}
        type_widget_type = FilteringSelect;
        type_place_holder = 'Select A Type';
    {% endif %}

    var type_comboBox = new type_widget_type({
        name: 'asset_type_name',
        store: type_memory,
        placeHolder: type_place_holder
    }, 'asset_type');
    type_comboBox.startup();

    type_comboBox.set('required', false);


    // ********************************************************************
    // Ok Button
    var ok_button = new Button({
        label: 'Ok',
        type: 'button',
        onClick: function () {

            if (!task_form.validate()) {
                return;
            }

            var schedule_timing = schedule_timing_numberSpinner.value;
            var schedule_unit = schedule_unit_filteringSelect.value;

            var start_constraint = eval(start_constraint_checkBox.get('checked')) ? 1 : 0;
            var end_constraint = eval(end_constraint_checkBox.get('checked')) ? 2 : 0;
            var schedule_constraint = start_constraint + end_constraint;

            // merge start_date and start_time
            var start_datetime_value = start_dateTextBox.value;
            start_datetime_value.clearTime();
            start_datetime_value.setHours(start_time_timeTextBox.value.getHours());
            start_datetime_value.setMinutes(start_time_timeTextBox.value.getMinutes());
            start_datetime_value.setSeconds(start_time_timeTextBox.value.getSeconds());

            // merge end_date and end_time
            var end_datetime_value = end_dateTextBox.value;
            end_datetime_value.clearTime();
            end_datetime_value.setHours(end_time_timeTextBox.value.getHours());
            end_datetime_value.setMinutes(end_time_timeTextBox.value.getMinutes());
            end_datetime_value.setSeconds(end_time_timeTextBox.value.getSeconds());

            submitForm({
                dialog: dialog,
                form: task_form,
                additional_data: {
                    project_id: {{ project.id }},
                    parent_id: parent_widget.value,
                    is_milestone: eval(is_milestone_checkBox.get('checked')) ? 1 : 0,
                    {% if mode=='UPDATE' %}
                        update_bid: eval(update_bid_checkBox.get('checked')) ? 1 : 0,
                    {% endif %}
                    start: start_datetime_value.toUTCString(),
                    end: end_datetime_value.toUTCString(),
                    schedule_constraint: schedule_constraint
                },
                url: url,
                method: 'POST'
            });

        }
    }, 'task_ok_button');
    ok_button.startup();
    ok_button.set('disabled', true);


    // ********************************************************************
    // Cancel Button
    var cancel_button = new Button({
        label: 'Cancel',
        type: 'button',
        onClick: function () {
            dialog.destroyRecursive();
        }
    }, 'task_cancel_button');
    cancel_button.startup();


    task_form.startup();

});
</script>

