{# Stalker Pyramid a Web Base Production Asset Management System
 Copyright (C) 2009-2013 Erkan Ozgur Yilmaz
 
 This file is part of Stalker Pyramid.
 
 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation;
 version 2.1 of the License.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
#}

{# BUTTONS #}
<div style="float: left;">
    <div style="float: left;">
        <div style="float: left;">
            {% if has_permission('Create_Task') %}
                <button id='list_tasks_create_task_button'>Create Task</button>
            {% endif %}
            <button id='list_tasks_gantt_reload_button'>Reload</button>
        </div>
        <div style="width: 100px; float: left"></div>
        {% if has_permission('Update_Task') %}
            <div style='float: left;'>
                <button id="list_tasks_schedule_tasks_button">Schedule Tasks
                </button>
            </div>
        {% endif %}
        <div style='float: left;'> {# gantt boundries #}
            <div style="float: left">
                <div style='float: left;'>Start :</div>
                <div id='gantt_start_date' style='float: left;'></div>
            </div>
            <div style="float: left">
                <div style='float: left;'>End</div>
                <div id='gantt_end_date' style='float: left;'></div>
            </div>
            <div style="float: left">
                <div style='float: left;'>Grid Mode</div>
                <div id='grid_mode' style='float: left;'></div>
            </div>
            <div style="float: left">
                <div style='float: left;'>Gantt Mode</div>
                <div id='gantt_mode' style='float: left;'></div>
            </div>
            <div style="float: left;">
                <button id='list_tasks_refresh_button'>Refresh</button>
                <button id='minus_1_month'>-1m</button>
                <button id='minus_1_week'>-1w</button>
                <button id='minus_1_day'>-1d</button>
                <button id='list_tasks_go_to_today_button'>Go To Today</button>
                <button id='plus_1_day'>+1d</button>
                <button id='plus_1_week'>+1w</button>
                <button id='plus_1_month'>+1m</button>
            </div>
        </div>
    </div>
</div>

<div style='width:100%; height: 94%; position: absolute; margin-top: 30px;'>
    <div id="gantt" style="position: static;"></div>
{#    <div id="gantt" ></div>#}
</div>


<script type="text/javascript">
    require([
        'dijit/registry',

        'dijit/form/Button',
        'dijit/form/FilteringSelect',
        'dijit/Menu',
        'dijit/MenuItem',
        'dijit/MenuSeparator',
        'dijit/form/DateTextBox',
        'dijit/Tooltip',

        'dojo/cookie',
        'dojo/json',
        'dojo/query',
        'dojo/store/Cache',
        'dojo/store/Memory',
        'dojo/store/Observable',
        'dojo/store/JsonRest',
        'dojo/request/xhr',
        'dojo/_base/lang',
        'dojo/Deferred',
        'dojo/when',
        'dojo/date',

        "dgrid/List",
        "dgrid/Grid",
        'dojox/data/JsonRestStore',

        'stalker/dialogs',
        'stalker/dialogCaller',
        'stalker/dialogCreator',
        'stalker/GanttGrid',

        'dojo/domReady!'
    ], function (registry, Button, FilteringSelect, Menu, MenuItem,
                 MenuSeparator, DateTextBox, Tooltip, cookie, json, query,
                 Cache, Memory, Observable, JsonRest, xhr, lang, Deferred,
                 when, date, List, Grid,
                 JsonRestStore, dialogs, dialogCaller, dialogCreator,
                 GanttGrid) {

        // The Memory
        var target = 'tasks/';
        var tasks_memory_store = new Memory();

        {% if entity.entity_type == 'User' %}
            console.debug('entity_type is User');
            target = 'users/{{ entity.id }}/tasks/';
        {% endif %}

        var tasks_jsonRest_store;
        tasks_jsonRest_store = new JsonRest({
            target: target,
            getChildren: function(parent, options){
                console.debug('getting children of : ', parent.id);
                return this.query({parent_id: parent.id}, options);
            },
            mayHaveChildren: function(parent){
                console.debug('may have children is running for : ', parent.id);
                return parent.hasChildren;
            }
        });
        var tasks_cache_store = new Cache(tasks_jsonRest_store, tasks_memory_store);

        var gantt_chart = new GanttGrid({
            id: 'gantt_dgrid',
            width: '100%',
            autoHeight: true,
            store: tasks_cache_store,
            query: {
                // initialize with the entity itself
                task_id: {{ entity.id }}
            },
            loadingMessage: "<div style='float: left' class='dijitIconLoading'>&nbsp</div><div>Loading</div>",
            noDataMessage: "",
            minRowsPerPage: 1
        }, 'gantt');
        gantt_chart.startup();


        var loadGanttFromServer = function(){};


        {% if has_permission('Create_Task') %}
            // CREATE TASK
            var create_task_button = dialogCaller({
                label: 'Create Task',
                dialog_id: 'task_dialog',
                content_creator: dialogs.create_task_dialog,
                attach_to: 'list_tasks_create_task_button',
                related_field_updater: loadGanttFromServer,
                data_id: '{{ entity.id }}'
            });
            create_task_button.startup();
        {% endif %}

        // RELOAD
        var reload_gantt_button = new Button({
            label: 'Reload',
            onClick: function () {
                loadGanttFromServer();
            }
        }, 'list_tasks_gantt_reload_button');
        reload_gantt_button.startup();

        // SCHEDULE
        {% if has_permission('Update_Task') %}
            var schedule_tasks_button = new Button({
                label: 'Schedule Tasks',
                onClick: function () {


                    var do_schedule = function () {
                        // xhr.post returns a `promise` use it if needed
                        // show the busy dialog
                        var busy_dialog = dialogs.busy_dialog({
                            id: 'schedule_tasks_busy_dialog'
                        });
                        busy_dialog.show();
                        return xhr.post(
                                '{{ request.route_url('auto_schedule_tasks') }}',
                                {
                                    method: 'POST'
                                }
                        );
                    };

                    var do_load = function () {
                        // reload scheduled tasks
                        loadGanttFromServer();
                        // kill the busy dialog
                        var busy_dialog = dijit.byId('schedule_tasks_busy_dialog');
                        busy_dialog.destroyRecursive();
                    };

                    when(do_schedule(), do_load);

                }
            }, 'list_tasks_schedule_tasks_button');
            schedule_tasks_button.startup();
        {% endif %}

        var start_dateTextBox = new DateTextBox({
            name: 'start',
            label: 'Start Date',
            {#            value: new Date(new Date().getTime() - 1296000000),// 15 * 24 * 60 * 60 * 1000, set it today + 15 by default#}
            required: true,
            datePattern: 'dd-mm-yyyy',
            {#            onChange: function () {#}
            {#                loadGanttFromServer();#}
            {#            }#}
        }, 'gantt_start_date');
        start_dateTextBox.startup();

        var end_dateTextBox = new DateTextBox({
            name: 'end',
            label: 'End Date',
            {#            value: new Date(new Date().getTime() + 1296000000), // set it today + 15 by default#}
            required: true,
            datePattern: 'dd-mm-yyyy',
            {#            onChange: function () {#}
            {#                loadGanttFromServer();#}
            {#            }#}
        }, 'gantt_end_date');
        end_dateTextBox.startup();
    
        var grid_mode_filteringSelect = new FilteringSelect({
            name: 'gantt_chart_grid_mode',
            label: 'Grid Mode',
            store: new Memory({
                data: [
                    {
                        id: 'Task',
                        name: 'Task'
                    },
                    {
                        id: 'Resource',
                        name: 'Resource'
                    }
                ]
            }),
            value: 'Task'
        }, 'grid_mode');
        grid_mode_filteringSelect.startup();

        var gantt_mode_filteringSelect = new FilteringSelect({
            name: 'gantt_chart_gantt_mode',
            label: 'Gantt Mode',
            store: new Memory({
                data: [
                    {
                        id: 'Task',
                        name: 'Task'
                    },
                    {
                        id: 'TimeLog',
                        name: 'TimeLog'
                    }
                ]
            }),
            value: 'Task'
        }, 'gantt_mode');
        gantt_mode_filteringSelect.startup();

        var refresh_button = new Button({
            label: 'Refresh',
            onClick: function () {
                var current_grid_mode = ge.grid_mode;
                var current_gantt_mode = ge.gantt_mode;

                var desired_grid_mode = grid_mode_filteringSelect.value;
                var desired_gantt_mode = gantt_mode_filteringSelect.value;

                var mode_changed = false;
                if (current_grid_mode != desired_grid_mode){
                    mode_changed = true;
                }

                if (current_gantt_mode != desired_gantt_mode){
                    mode_changed = true;
                }

                if (mode_changed){
                    ge.changeMode(desired_grid_mode, desired_gantt_mode);
                    if (desired_gantt_mode='TimeLog'){
                        createTimeLogToolTips();
                    }
                } else {
                    ge.gantt.refreshGantt({
                        start: start_dateTextBox.getValue().getTime(),
                        end: end_dateTextBox.getValue().getTime()
                    });
                }
            }
        }, 'list_tasks_refresh_button');
        refresh_button.startup();

        var go_to_today_button = new Button({
            label: 'Go To Today',
            onClick: function () {
                ge.gantt.centerOnToday();
            }
        }, 'list_tasks_go_to_today_button');
        go_to_today_button.startup();



        // change range
        var refresh_gantt_and_calendar = function(start, end){
            start_dateTextBox.setValue(start);
            end_dateTextBox.setValue(end);
            ge.gantt.refreshGantt({
                start: start.getTime(),
                end: end.getTime()
            });
        };
        
        var minus_1_month = new Button({
            onClick: function(){
                var start = new Date(ge.gantt.originalStartMillis);
                var end = new Date(ge.gantt.originalEndMillis);
                start = date.add(start, 'month', -1);
                end = date.add(end, 'month', -1);
                refresh_gantt_and_calendar(start, end);
            }
        }, 'minus_1_month');
        minus_1_month.startup();

        var plus_1_month = new Button({
            onClick: function(){
                var start = new Date(ge.gantt.originalStartMillis);
                var end = new Date(ge.gantt.originalEndMillis);
                start = date.add(start, 'month', 1);
                end = date.add(end, 'month', 1);
                refresh_gantt_and_calendar(start, end);
            }
        }, 'plus_1_month');
        plus_1_month.startup();

        var minus_1_week = new Button({
            onClick: function(){
                var start = new Date(ge.gantt.originalStartMillis);
                var end = new Date(ge.gantt.originalEndMillis);
                start = date.add(start, 'week', -1);
                end = date.add(end, 'week', -1);
                refresh_gantt_and_calendar(start, end);
            }
        }, 'minus_1_week');
        minus_1_week.startup();

        var plus_1_week = new Button({
            onClick: function(){
                var start = new Date(ge.gantt.originalStartMillis);
                var end = new Date(ge.gantt.originalEndMillis);
                start = date.add(start, 'week', 1);
                end = date.add(end, 'week', 1);
                refresh_gantt_and_calendar(start, end);
            }
        }, 'plus_1_week');
        plus_1_week.startup();

        var minus_1_day = new Button({
            onClick: function(){
                var start = new Date(ge.gantt.originalStartMillis);
                var end = new Date(ge.gantt.originalEndMillis);
                start = date.add(start, 'day', -1);
                end = date.add(end, 'day', -1);
                refresh_gantt_and_calendar(start, end);
            }
        }, 'minus_1_day');
        minus_1_week.startup();

        var plus_1_day = new Button({
            onClick: function(){
                var start = new Date(ge.gantt.originalStartMillis);
                var end = new Date(ge.gantt.originalEndMillis);
                start = date.add(start, 'day', 1);
                end = date.add(end, 'day', 1);
                refresh_gantt_and_calendar(start, end);
            }
        }, 'plus_1_day');
        plus_1_day.startup();

    });
</script>
