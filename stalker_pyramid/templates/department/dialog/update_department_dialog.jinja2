{# Stalker Pyramid a Web Base Production Asset Management System
 Copyright (C) 2009-2013 Erkan Ozgur Yilmaz

 This file is part of Stalker Pyramid.

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation;
 version 2.1 of the License.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
#}
{% extends 'base.jinja2' %}

{# PRE-HEADER #}
{% block pre_header %}

    <link rel="stylesheet"
          href='{{ request.static_url("stalker_pyramid:static/ace/css/chosen.min.css") }}'/>
    <link rel="stylesheet"
          href='{{ request.static_url("stalker_pyramid:static/ace/css/datepicker.css") }}'/>
    <link rel="stylesheet"
          href='{{ request.static_url("stalker_pyramid:static/ace/css/bootstrap-timepicker.css") }}'/>
    <link rel="stylesheet"
          href='{{ request.static_url("stalker_pyramid:static/ace/css/daterangepicker.css") }}'/>
    <link rel="stylesheet"
          href='{{ request.static_url("stalker_pyramid:static/ace/css/colorpicker.css") }}'/>
    <link rel="stylesheet"
          href='{{ request.static_url("stalker_pyramid:static/ace/css/jquery-ui-1.10.3.custom.min.css") }}'/>
    <link rel="stylesheet"
          href='{{ request.static_url("stalker_pyramid:static/ace/css/bootstrap-editable.css") }}'/>

{% endblock pre_header %}

{# SIDEBAR #}
{% block sidebar %}

    {% if entity %}
        {% include 'sidebar.jinja2' %}
    {% endif %}

{% endblock sidebar %}

{# BREADCRUMBS #}
{% block breadcrumbs %}

    {% set page_title='Update' %}
    {% include 'breadcrumb/breadcrumbs.jinja2' %}

{% endblock breadcrumbs %}

{# PAGE-CONTENT #}
{% block page_content %}

    {% set department=entity %}
    {% set page_title='Update' %}
    {% include 'page_header.jinja2' %}

    <div class="row-fluid">
        <div class="widget-box span6">
            <div class="widget-header widget-header-small header-color-grey">
                <h4 class="smaller">
                    <i class="icon-info-sign"></i>
                </h4>

            </div>

            <div class="widget-body">
                <div class="widget-main">
                    <div class="row-fluid">
                        <div class="span3">
                            {% include 'components/avatar.jinja2' %}
                        </div>
                        <div class="span9">

                            {% set mode='Update' %}
                            {% include 'department/dialog/department_basic_information_form.jinja2' %}
                        </div>
                    </div>
                </div>

                <div class="row-fluid">
                    <div class="form-actions">

                        <button id='submit_button' type="button"
                                class='btn btn-success pull-right'>
                            <i class="icon-edit"></i> Update
                        </button>
                    </div>

                </div>
            </div>
        </div>
    </div>



{% endblock page_content %}

{# EXTRA-SCRIPTS #}
{% block extrascripts %}

    <script src='{{ request.static_url("stalker_pyramid:static/ace/js/jquery.validate.min.js") }}'></script>
    <script src='{{ request.static_url("stalker_pyramid:static/ace/js/jquery.gritter.min.js") }}'></script>

    <script src='{{ request.static_url("stalker_pyramid:static/ace/js/jquery.ui.touch-punch.min.js") }}'></script>
    <script src='{{ request.static_url("stalker_pyramid:static/ace/js/x-editable/bootstrap-editable.min.js") }}'></script>
    <script src='{{ request.static_url("stalker_pyramid:static/ace/js/x-editable/ace-editable.min.js") }}'></script>


    <script type="text/javascript">

    {#        $(document).ready(function () {#}
    {##}
    {#            //$.fn.editable.defaults.mode = 'inline';#}
    {##}
    {#            try {//ie8 throws some harmless exception, so let's catch it#}
    {##}
    {#                //it seems that editable plugin calls appendChild, and as Image doesn't have it, it causes errors on IE at unpredicted points#}
    {#                //so let's have a fake appendChild for it!#}
    {##}
    {##}
    {#                var last_gritter#}
    {#                $('#avatar').editable({#}
    {#                    type: 'image',#}
    {#                    name: 'avatar',#}
    {#                    value: null,#}
    {#                    image: {#}
    {#                        //specify ace file input plugin's options here#}
    {#                        btn_choose: 'Change Avatar',#}
    {#                        droppable: true,#}
    {#                        /**#}
    {#                         //this will override the default before_change that only accepts image files#}
    {#                         before_change: function(files, dropped) {#}
    {#return true;#}
    {#    {,#}
    {#                         */#}
    {##}
    {#                        //and a few extra ones here#}
    {#                        name: 'file',//put the field name here as well, will be used inside the custom plugin#}
    {#                        max_size: 11000000,//~100Kb#}
    {#                        on_error: function (code) {//on_error function will be called when the selected file has a problem#}
    {#                            if (last_gritter) $.gritter.remove(last_gritter);#}
    {#                            if (code == 1) {//file format error#}
    {#                                last_gritter = $.gritter.add({#}
    {#                                    title: 'File is not an image!',#}
    {#                                    text: 'Please choose a jpg|gif|png image!',#}
    {#                                    class_name: 'gritter-error gritter-center'#}
    {#                                });#}
    {#                            } else if (code == 2) {//file size rror#}
    {#                                last_gritter = $.gritter.add({#}
    {#                                    title: 'File too big!',#}
    {#                                    text: 'Image size should not exceed 100Kb!',#}
    {#                                    class_name: 'gritter-error gritter-center'#}
    {#                                });#}
    {#                            }#}
    {#                            else {//other error#}
    {#                            }#}
    {#                        },#}
    {#                        on_success: function () {#}
    {#                            $.gritter.removeAll();#}
    {#                        }#}
    {#                    },#}
    {#                    url: function (params) {#}
    {#                        //please modify submit_url accordingly#}
    {#                        var submit_url = '/upload_files';#}
    {#                        var deferred;#}
    {##}
    {##}
    {#//if value is empty, means no valid files were selected#}
    {#//but it may still be submitted by the plugin, because "" (empty string) is different from previous non-empty value whatever it was#}
    {#//so we return just here to prevent problems#}
    {#                        var value = $('#avatar').next().find('input[type=hidden]:eq(0)').val();#}
    {#                        if (!value || value.length == 0) {#}
    {#                            deferred = new $.Deferred#}
    {#                            deferred.resolve();#}
    {#                            return deferred.promise();#}
    {#                        }#}
    {##}
    {#                        var $form = $('#avatar').next().find('.editableform:eq(0)')#}
    {#                        var file_input = $form.find('input[type=file]:eq(0)');#}
    {##}
    {#//user iframe for older browsers that don't support file upload via FormData & Ajax#}
    {#                        if (!("FormData" in window)) {#}
    {#                            deferred = new $.Deferred#}
    {##}
    {#                            var iframe_id = 'temporary-iframe-' + (new Date()).getTime() + '-' + (parseInt(Math.random() * 1000));#}
    {#                            $form.after('<iframe id="' + iframe_id + '" name="' + iframe_id + '" frameborder="0" width="0" height="0" src="about:blank" style="position:absolute;z-index:-1;"></iframe>');#}
    {#                            $form.append('<input type="hidden" name="temporary-iframe-id" value="' + iframe_id + '" />');#}
    {#                            $form.next().data('deferrer', deferred);//save the deferred object to the iframe#}
    {#                            $form.attr({'method': 'POST', 'enctype': 'multipart/form-data',#}
    {#                                'target': iframe_id, 'action': submit_url});#}
    {##}
    {#                            $form.get(0).submit();#}
    {##}
    {#                            //if we don't receive the response after 60 seconds, declare it as failed!#}
    {#                            setTimeout(function () {#}
    {#                                var iframe = document.getElementById(iframe_id);#}
    {#                                if (iframe != null) {#}
    {#                                    iframe.src = "about:blank";#}
    {#                                    $(iframe).remove();#}
    {##}
    {#                                    deferred.reject({'status': 'fail', 'message': 'Timeout!'});#}
    {#                                }#}
    {#                            }, 60000);#}
    {#                        } else {#}
    {#                            var fd = null;#}
    {#                            try {#}
    {#                                fd = new FormData($form.get(0));#}
    {#                            } catch (e) {#}
    {#                                //IE10 throws "SCRIPT5: Access is denied" exception,#}
    {#                                //so we need to add the key/value pairs one by one#}
    {#                                fd = new FormData();#}
    {#                                $.each($form.serializeArray(), function (index,#}
    {#                                                                         item) {#}
    {#                                    fd.append(item.name, item.value);#}
    {#                                });#}
    {#                                //and then add files because files are not included in serializeArray()'s result#}
    {#                                $form.find('input[type=file]').each(function () {#}
    {#                                    if (this.files.length > 0) fd.append(this.getAttribute('name'), this.files[0]);#}
    {#                                });#}
    {#                            }#}
    {##}
    {#                            //if file has been drag&dropped , append it to FormData#}
    {#                            if (file_input.data('ace_input_method') == 'drop') {#}
    {#                                var files = file_input.data('ace_input_files');#}
    {#                                if (files && files.length > 0) {#}
    {#                                    fd.append(file_input.attr('name'), files[0]);#}
    {#                                }#}
    {#                            }#}
    {##}
    {#                            console.log('fd:', fd);#}
    {##}
    {#                            deferred = $.ajax({#}
    {#                                url: submit_url,#}
    {#                                type: 'POST',#}
    {#                                processData: false,#}
    {#                                contentType: false,#}
    {#                                dataType: 'json',#}
    {#                                enctype: "multipart/form-data",#}
    {#                                data: fd,#}
    {#                                xhr: function () {#}
    {#                                    var req = $.ajaxSettings.xhr();#}
    {#                                    /*if (req && req.upload) {#}
    {#                                     req.upload.addEventListener('progress', function(e) {#}
    {#                                     if(e.lengthComputable) {#}
    {#                                     var done = e.loaded || e.position, total = e.total || e.totalSize;#}
    {#                                     var percent = parseInt((done/total)*100) + '%';#}
    {#                                     //bar.css('width', percent).parent().attr('data-percent', percent);#}
    {#                                     }#}
    {#                                     }, false);#}
    {#                                     }*/#}
    {#                                    return req;#}
    {#                                },#}
    {#                                beforeSend: function () {#}
    {#                                    //bar.css('width', '0%').parent().attr('data-percent', '0%');#}
    {#                                },#}
    {#                                success: function (data) {#}
    {#                                    // file is uploaded successfully#}
    {#                                    // and hopefully a link is created (data.link_ids[0])#}
    {#                                    // now attach it to this user as a thumbnail#}
    {#                                    $.post('/assign_thumbnail',#}
    {#                                                    $.param({#}
    {#                                                        'link_ids': data.link_ids,#}
    {#                                                        'entity_id': {{ entity.id }}#}
    {#                                                    })#}
    {#                                            ).done(function (data1) {#}
    {#                                                // and get back user data so we can now#}
    {#                                                // where to set the current thumbnail#}
    {#                                                // update the thumbnail#}
    {##}
    {##}
    {#                                                $.getJSON('/departments/{{ entity.id }}/').done(function (data2) {#}
    {#                                                    var new_thumb_path = '/' + data2[0].thumbnail_full_path;#}
    {#                                                    $('#avatar').attr('src', new_thumb_path);#}
    {#                                                    // also update side bar#}
    {#                                                    $('#sidebar_avatar').attr('src', new_thumb_path);#}
    {##}
    {#                                                });#}
    {#                                            });#}
    {#                                }#}
    {#                            });#}
    {#                        }#}
    {##}
    {#                        deferred.done(function (res) {#}
    {#                            console.log('code is here 1');#}
    {#                    if (res.status == 'OK'){#}
    {#                        $('#avatar').get(0).src = res.url;#}
    {#                    } else {#}
    {#                        alert(res.message);#}
    {#                    }#}
    {#                            console.log('code is here 2');#}
    {#                        }).fail(function (res) {#}
    {#                    alert("Failure");#}
    {#                                });#}
    {##}
    {#                        return deferred.promise();#}
    {#                    },#}
    {##}
    {#                    success: function (response, newValue) {#}
    {##}
    {#                    }#}
    {#                })#}
    {#            } catch (e) {#}
    {#            }#}
    {#        });#}

    $(document).ready(function () {


        var submit_button = $('#submit_button');
        submit_button.on('click', function (e) {

            e.stopPropagation();
            e.preventDefault();
            submit_button.button('loading');

            var department_update_form = $("#department_form");
            $.post('/departments/{{ entity.id}}/update', department_update_form.serialize()
                    ).done(function (response_text) {
                        bootbox.alert(response_text);
                        window.location.assign('{{ came_from }}');
                        submit_button.button('reset');
                    }).fail(function (jqXHR) {
                        bootbox.alert(jqXHR.responseText);
                        submit_button.button('reset');
                    });

        });
    });

    {#            bootbox.confirm(#}
    {#                    '<div class="alert alert-info bigger-110">This will update the permission settings of {{ entity.name }}' +#}
    {#                            '<br><br><strong>Are you sure?</strong></div>',#}
    {#                    function (result) {#}
    {#                        if (result) {#}
    {#                            // get the ids and send it to the server#}
    {##}
    {#                            $.post('/departments/{{ entity.id}}/update', department_update_form.serialize()#}
    {#                                    ).done(function (response_text) {#}
    {#                                        bootbox.alert(response_text);#}
    {#                                        window.location.assign('{{ came_from }}');#}
    {#                                        submit_button.button('reset');#}
    {#                                    }).fail(function (jqXHR) {#}
    {#                                        bootbox.alert(jqXHR.responseText);#}
    {#                                        submit_button.button('reset');#}
    {#                                    });#}
    {#                        }#}
    {#                    }#}
    {#            )#}
    {#        });#}


    </script>

{% endblock extrascripts %}
