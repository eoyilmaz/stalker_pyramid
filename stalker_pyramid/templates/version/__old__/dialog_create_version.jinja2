{# Stalker Pyramid a Web Base Production Asset Management System
 Copyright (C) 2009-2013 Erkan Ozgur Yilmaz

 This file is part of Stalker Pyramid.

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation;
 version 2.1 of the License.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
#}
<div class='dijitDialogPaneContentArea'>
    <form accept-charset="utf-8" id='upload_version_form'>
        <table style='width: 100%'>

            {# Task Name #}
            <tr>
                <td class='label_column'>
                    <label for='task_name'>Task</label>
                </td>
                <td class='input_column'>
                    <input id='task_name'>
                </td>
            </tr>

            {# Take #}
            <tr>
                <td class='label_column'>
                    <label for='take'>Take</label>
                </td>
                <td class='input_column'>
                    <input id='take'>
                </td>
            </tr>

            {# Publish #}
            <tr>
                <td class='label_column'>
                    <label for='publish'>Publish?</label>
                </td>
                <td class='input_column'>
                    <input id='publish' type='checkbox'>
                </td>
            </tr>

            {# Version #}
            <tr>
                <td class='label_column'>
                    <label for='version'>Version</label>
                </td>
                <td class='input_column'>
                    <div id='version_list'></div>
                    <div id='version'></div>
                </td>
            </tr>

        </table>
    </form>
</div>

<div class='dijitDialogPaneActionBar'>
    <button id='version_ok_button' >Ok</button>
    <button id='version_cancel_button'>Cancel</button>
</div>

<script type='text/javascript'>
    require([
        'dojo/store/Memory',

        'dijit/form/Form',
        'dijit/form/Button',
        'dijit/form/ValidationTextBox',
        'dijit/form/ComboBox',
        'dijit/form/CheckBox',

        'dojox/form/FileInput',
        'dojox/form/Uploader',
        'dojox/form/uploader/FileList',
            
        'stalker/js/submitForm',

        'dojo/domReady!'
    ], function (Memory, Form, Button, ValidationTextBox, ComboBox, CheckBox,
                 FileInput, Uploader, FileList, submitForm) {
        
        {# ***************************************************************** #}
        {# Some important vars #}
        var is_upload_finished = false;
        var task_id = {{ task.id }};
        var link_ids = [];
        
        {# ***************************************************************** #}
        {# Form #}
        var upload_version_form = new Form({}, 'upload_version_form');
        var dialog = upload_version_form.getParent();

        {# ***************************************************************** #}
        {# Name #}
        var name_textBox = new ValidationTextBox({
            name: 'task_name',
            label: 'Task',
            required: true,
            value: '{{ task.name }} ({{ task.task_type }})',
            disabled: true
        }, 'task_name');
        name_textBox.startup();

        {# ***************************************************************** #}
        {# Take #}
        
        var take_data = [
                {% for take_name in take_names %}
                    {
                        id: '{{ take_name }}',
                        name: '{{take_name}}'
                    },
                {% endfor %}
            ];
        
        var take_memory = new Memory({
            data: take_data
        });

        var take_name_comboBox = ComboBox({
            name: 'take_name',
            label: 'Take Name',
            required: true,
            value: '{{ default_take_name }}',
            store: take_memory
        }, 'take');
        take_name_comboBox.startup();

        {# ***************************************************************** #}
        {# Publish ? #}
        var publish_checkBox = new CheckBox({
            value: 'checked',
            checked: false
        }, 'publish');
        publish_checkBox.startup();

        {# ***************************************************************** #}
        {# Version #}
        var version_uploader = new dojox.form.Uploader({
            label: 'Browse...',
            multiple: false,
            uploadOnSelect: true,
            enctype: 'multipart/form-data',
            url: 'upload_files',
            onBegin: function(data){
                // reset data
                is_upload_finished = false;
                link_ids = [];
            },
            onComplete: function(data){
                // store the link.id
                console.debug(data);
                is_upload_finished = true;
                link_ids = data.link_ids;
                console.debug('link_ids :', link_ids);
            }
        }, 'version');
        version_uploader.startup();

        var version_list = new dojox.form.uploader.FileList({
            uploader: version_uploader
        }, 'version_list');
        version_list.startup();

        // ********************************************************************
        // Ok Button
        var ok_button = new Button({
            label: 'OK',
            type: 'button',
            onClick: function () {
                if (is_upload_finished && link_ids.length != 0){
                    console.debug('is_upload_finished : ', is_upload_finished);
                    console.debug('link_ids           : ', link_ids);
                    console.debug('dialog             : ', dialog);
                    submitForm({
                        dialog: dialog,
                        form: upload_version_form,
                        additional_data: {
                            task_id: task_id,
                            link_ids: link_ids,
                            publish: eval(publish_checkBox.get('checked')) ? 1 : 0
                        },
                        url: '{{ request.route_url('assign_version') }}',
                        method: 'POST'
                    });
                }else{
                    alert('Upload has not finished yet!');
                }
            }
        }, 'version_ok_button');
        ok_button.startup();

        // ********************************************************************
        // Cancel Button
        var cancel_button = new Button({
            label: 'Cancel',
            type: 'button',
            onClick: function () {
                dialog.destroyRecursive();
            }
        }, 'version_cancel_button');
        cancel_button.startup();

        upload_version_form.startup();

    });
</script>
