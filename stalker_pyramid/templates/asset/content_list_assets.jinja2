{# Stalker Pyramid a Web Base Production Asset Management System
 Copyright (C) 2009-2013 Erkan Ozgur Yilmaz

 This file is part of Stalker Pyramid.

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation;
 version 2.1 of the License.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
#}
<div id='list_assets' style="width: 100%; height: 100%">
    {% if has_permission('Create_Asset') %}
        <button id='list_assets_create_asset_button'>New Asset</button>
    {% endif %}
    <div style='width:100%; height: 100%; position: absolute;'>
        <div id='assets_data_grid'
             style="position: static; width: 100%; height: 100%;"></div>
    </div>

</div>

<script type='text/javascript'>
require([
    'dojo/_base/declare',
    'dojo/data/ObjectStore',
    'dojo/store/Memory',
    'dojo/store/JsonRest',

    'dijit/registry',
    'dijit/form/Select',
    'dijit/Menu',
    'dijit/MenuItem',
    'dijit/MenuSeparator',

    "dgrid/List",
    "dgrid/Grid",
    "dgrid/Selection",
    "dgrid/Keyboard",
    'dgrid/extensions/ColumnResizer',
    "dgrid/editor",

    'stalker/fieldUpdater',
    'stalker/dialogs',
    'stalker/dialogCaller',
    'stalker/dialogCreator',
    'dojo/domReady!'
], function (declare, ObjectStore, Memory, JsonRest, registry, Select,
             Menu, MenuItem, MenuSeparator, List,  Grid, Selection, Keyboard,
             ColumnResizer, editor, fieldUpdater, dialogs, dialogCaller,
             dialogCreator) {

    var StandardGrid = declare([Grid, Selection, Keyboard, ColumnResizer]);
    var asset_data_grid = new StandardGrid({
        id: 'assets_data_grid',
        width: '100%',
        autoHeight: true
    }, 'assets_data_grid');

    {% if has_permission('Create_Asset') %}
        var create_asset_button = dialogCaller({
            label: 'New Asset',
            dialog_id: 'create_asset_dialog',
            content_creator: dialogs.create_asset_dialog,
            attach_to: 'list_assets_create_asset_button',
            related_field_updater: asset_data_grid_updater,
            data_id: '{{ entity.id }}'
        });
        create_asset_button.startup();
    {% endif %}


    var status_memory = new JsonRest({
        target: 'statuses/Asset/'
    });

    var status_store;
    status_memory.query().then(function (data) {
        status_store = new ObjectStore({ objectStore: new Memory({ data: data }) });
        asset_data_grid_updater();
    });

    var assetData;


    function asset_data_grid_updater() {

        var asset_memory = new JsonRest({
            target: '{{ request.route_url('get_project_assets', id=entity.id) }}'
        });

        asset_memory.query().then(function (data) {
            assetData = data;
            var columns = [
                {
                    label: "Thumbnail",
                    field: 'thumbnail',
                    sortable: false,
                    get: function (object) {
                        return object; // return entire item for formatter to use
                    },
                    formatter: function (object) {

                        var path = '{{ request.static_url("stalker_pyramid:static/stalker/images/Placeholder_shot.png") }}';
                        if (object.thumbnail_path) {
                            path = object.thumbnail_path;
                        }
                        return '<img width= "60px"; src="' + path + '">';

                    }
                },
                {
                    field: 'status',
                    label: "Status",
                    get: function (object) {
                        return object; // return entire item for formatter to use
                    },
                    formatter: function (item) {

                        var bg_color = '#' + item.status_bg_color.toString(16);
                        var fg_color = '#' + item.status_fg_color.toString(16);


                        return '<span style="color:' + bg_color + '; background-color:' + bg_color + '; ">....</span><span style="color:' + bg_color + '; ">  ' + item.status + '</span>';
                    }

                },
                {
                    field: 'name',
                    label: "Name",
                    get: function (object) {
                        return object; // return entire item for formatter to use
                    },
                    formatter: function (object) {
                        {% if has_permission('Read_Asset')%}
                            object.targetPane = 'assets_content_pane';
                            object.address = 'tasks/' + object.id + '/view';
                            return templates.entityNameField(object);
                        {% else %}
                            return value.name;
                        {% endif %}
                    }
                },
                {
                    field: 'type',
                    label: "Type"
                },
                {
                    field: 'user_name',
                    label: "Created By",
                    get: function (object) {
                        return object; // return entire item for formatter to use
                    },
                    formatter: function (object) {
                        var return_value = object.user_name;
                        {% if has_permission('Read_User')%}
                            object.targetPane = 'central_content';
                            object.address = 'users/' + object.user_id + '/view';
                            return_value = templates.userNameField(object);
                        {% endif %}
                        return return_value;
                    }

                },
                {
                    field: 'description',
                    label: "Description"
                }
            ];

            asset_data_grid.renderArray(data);
            asset_data_grid.set('columns', columns);

            var right_click_menu = new Menu({
                targetNodeIds: ['assets_data_grid'],
                selector: '.dgrid-row'
            });

            var create_update_asset_menuItem_creator = function () {
                return new MenuItem({
                    label: 'Update Asset',
                    onClick: function () {
                        var node = this.getParent().currentTarget;
                        var nodeId = node.getAttribute('id');
                        var rowId = asset_data_grid.id + '-row-';
                        var assetId = assetData[parseInt(nodeId.substring(rowId.length, nodeId.length))].id;

                        var dialog = dialogCreator({
                            dialog_id: 'asset_dialog',
                            content_creator: dialogs.update_asset_dialog,
                            related_field_updater: asset_data_grid_updater,
                            data_id: assetId
                        });
                        dialog.show();


                    }
                });
            };

            right_click_menu.addChild(create_update_asset_menuItem_creator());
            right_click_menu.startup();

        });
    }

});
</script>
