{# Stalker a Production Ticket Management System
 Copyright (C) 2009-2013 Erkan Ozgur Yilmaz
 
 This file is part of Stalker Pyramid.
 
 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation;
 version 2.1 of the License.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
#}
<div class='dijitDialogPaneContentArea'>
    <form id='ticket_form'>
        <table style='width: 100%;'>

            {# DESCRIPTION #}
            <tr>
                <td class='label_column'>
                    <label for='ticket_description'>Description</label>
                </td>
                <td class='input_column'>
                    <input id='ticket_description'>
                </td>
            </tr>

            {# PROJECT #}
            <tr>
                <td class='label_column'>
                    <label for='ticket_project'>Project</label>
                </td>
                <td class='input_column'>
                    <input id='ticket_project'>
                </td>
            </tr>

            {# OWNERS #}
            <tr>
                <td class='label_column'>
                    <label for='ticket_owner'>Owner</label>
                </td>
                <td class='input_column'>
                    <div id='ticket_owner'></div>
                </td>
            </tr>

            {# TASKS #}
            <tr>
                <td class='label_column'>
                    <label for='tasks_tagSelect'>Tasks</label>
                </td>
                <td class='input_column'>
                    <div id='tasks_tagSelect'></div>
                </td>
            </tr>

            {# STATUS #}
            <tr>
                <td class='label_column'>
                    <label for='ticket_status'>Status</label>
                </td>
                <td class='input_column'>
                    <input id='ticket_status'>
                </td>
                <td class='button_column'>
                    <button id='ticket_add_status_button'>Add Status</button>
                </td>
            </tr>


        </table>
    </form>
</div>

<div class='dijitDialogPaneActionBar'>
    <button id='ticket_ok_button'>OK</button>
    <button id='ticket_cancel_button'>Cancel</button>
</div>

<script type='text/javascript'>
require([
    'dojo/store/Memory',
    'dojo/store/JsonRest',
    'dijit/form/Form',
    'dijit/form/ValidationTextBox',
    'dijit/form/TextBox',
    'dijit/form/FilteringSelect',
    'dijit/form/ComboBox',
    'dijit/form/Button',
    'stalker/Tag',
    'stalker/TagSelect',
    'stalker/dialogs',
    'stalker/submitForm',
    'stalker/fieldUpdater',
    'stalker/dialogCreator',
    'stalker/dialogCaller',
    'dojo/domReady!'],
        function (Memory, JsonRest, Form, ValidationTextBox, TextBox,
                  FilteringSelect, ComboBox, Button, Tag, TagSelect, dialogs,
                  submitForm, fieldUpdater, dialogCreator, dialogCaller) {

            // ********************************************************************
            // Generate default values
            var url;
            var description;
            var ticket_id;
            var project_id = '{{ entity.project_id }}';
            var owner_id;
            var owner_memory_target = '/get/users';


            {% if entity.entity_type == 'Project' %}
                project_id = '{{ entity.id }}';
                owner_memory_target = '/get/users_byEntity/' + project_id;
            {% elif entity.entity_type == 'User' %}
                owner_id = '{{ entity.id }}';
                project_id = null;

            {% endif %}

            {# fill values based on the dialog mode #}
            {% if mode == 'CREATE' %}
                url = '{{ request.route_url("create_ticket") }}';
            {% elif mode == 'UPDATE' %}
                url = '{{ request.route_url("update_ticket") }}';
                ticket_id = '{{ ticket.id }}';
                description = '{{ ticket.description }}';
                owner_id = '{{ ticket.owner_id }}';
                project_id = '{{ ticket.project_id }}';
            {% endif %}



            // ****************************************************************
            // Form
            var ticket_form = new Form({
                id: 'ticket_form'
            }, 'ticket_form');

            var dialog = ticket_form.getParent();


            // ****************************************************************
            // Description
            var description_textBox = new ValidationTextBox({
                name: 'description',
                label: 'Description',
                placeHolder: 'Enter a description',
                required: true,
                value: description
            }, 'ticket_description');
            description_textBox.startup();

            // ****************************************************************
            // Project

            // Memory
            var project_memory = new JsonRest({
                target: '{{ request.route_url("get_projects") }}'
            });

            // Field
            var project_select = new FilteringSelect({
                name: 'project_id',
                required: true,
                label: 'Project',
                {% if entity.entity_type == 'Project'%}
                    disabled: true
                {% endif %}
            }, 'ticket_project');
            project_select.startup();

            // Updater
            var project_field_updater = fieldUpdater({
                'memory': project_memory,
                'widget': project_select,
                {% if entity.entity_type != 'User'%}
                    'selected': project_id
                {% endif %}
            });

            // Fill Widget
            project_field_updater();


            // ****************************************************************
            // Owner

            var owner_memory = new JsonRest({
                target: owner_memory_target
            });

            // Field
            var owner_select = new FilteringSelect({
                name: 'owner_id',
                required: true,
                label: 'Owner',
                {% if entity.entity_type == 'User'%}
                    disabled: true
                {% endif %}
            }, 'ticket_owner');
            owner_select.startup();

            // Updater
            var owner_field_updater = fieldUpdater({
                'memory': owner_memory,
                'widget': owner_select,
                {% if entity.entity_type == 'User'%}
                    'selected': owner_id
                {% endif %}
            });

            // Fill Widget
            owner_field_updater();

            //*****************************************************************
            // ********************************************************************
            // Resources
            var tasks_jsonRest = new JsonRest({
                //target: '/get/project_tasks/' + project_id
              target: '{{ request.route_url('get_project_tasks', project_id=entity.project_id ) }}'
            });

            var tasks_tagSelect = new TagSelect({
                id: 'tasks_tagSelect',
                name: 'tasks_ids',
                required: true,
                {#          style: 'width: 100%'#}
            }, 'tasks_tagSelect');
            tasks_tagSelect.startup();

            var tasks_result = tasks_jsonRest.query().then(function (data) {
                alert('data');
                var tasks_memory = new Memory({data: data});
                tasks_tagSelect.set('store', tasks_memory);
                tasks_tagSelect.set('value', [{{ entity.id }}]);
            });
            //****************************************************************
            // Status
            //
            // The Memory
            var status_memory = new JsonRest({
                target: ' {{ request.route_url('get_statuses_for', target_entity_type="Ticket") }}'
            });

            // The Field
            var status_filtering_select = new FilteringSelect({
                name: 'status_id',
                label: 'Status',
                required: true
            }, 'ticket_status');
            status_filtering_select.startup();

            // TODO: Check permission for StatusList creation
            // TODO: Please make it more obvious what we are doing here, or just have two buttons, one hidden, and un-hide it and hide the other when we have got some StatusList
            var update_button_callback_function = function (data) {
                if (data.length > 0) {
                    // replace ticket_add_status_button on click function
                    // if we got some StatusList
                    ticket_add_status_button.set('onClick', function () {
                        var myDialog = dialogCreator({
                            dialog_id: 'status_list_dialog',
                            data_id: 'Ticket',
                            content_creator: dialogs.update_status_list_dialog,
                            related_field_updater: status_field_updater
                        });
                        myDialog.show();
                    });
                }
            };

            // The Updater
            var status_field_updater = fieldUpdater({
                'memory': status_memory,
                'widget': status_filtering_select,
                'callBack': update_button_callback_function,
                {% if mode=='UPDATE' %}
                    'selected': '{{ ticket.status.id }}'
                {% endif %}
            });


            var ticket_add_status_button = dialogCaller({
                label: 'Add Status',
                dialog_id: 'status_list_dialog',
                content_creator: dialogs.create_status_list_dialog,
                attach_to: 'ticket_add_status_button',
                related_field_updater: status_field_updater,
                data_id: 'Ticket'
            });

            ticket_add_status_button.startup();
            status_field_updater({animate: true});

            {% if not has_permission('Create_Status') %}
                ticket_add_status_button.set('disabled', true);
            {% endif %}




            // ****************************************************************
            // Ok Button
            var ok_button = new Button({
                label: 'OK',
                type: 'button',
                onClick: function () {
                    project_select.set('disabled', false);
                    owner_select.set('disabled', false);
                    submitForm({
                        dialog: dialog,
                        form: ticket_form,
                        additional_data: {
                            {% if mode=='UPDATE' %}
                                ticket_id: ticket_id
                            {% endif %}
                        },
                        url: url,
                        method: 'POST'
                    });
                }
            }, 'ticket_ok_button');
            ok_button.startup();


            // ****************************************************************
            // Cancel Button
            var cancel_button = new Button({
                label: 'Cancel',
                type: 'button',
                onClick: function () {
                    dialog.destroyRecursive();
                }
            }, 'ticket_cancel_button');
            cancel_button.startup();

            ticket_form.startup();


        })
;
</script>

