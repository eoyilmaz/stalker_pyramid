{# Stalker Pyramid a Web Base Production Asset Management System
 Copyright (C) 2009-2013 Erkan Ozgur Yilmaz

 This file is part of Stalker Pyramid.

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation;
 version 2.1 of the License.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
#}
<div id='view_ticket'>
    {% if has_permission('Create_Ticket') %}
        <button id='create_ticket_button'>Create Ticket</button>
    {% endif %}
    <div style='width:100%; height: 100%; position: absolute;'>
        <div id='ticket_data_grid'></div>
    </div>
</div>

<script type='text/javascript'>
require([
    'dojo/data/ObjectStore',
    'dojo/store/Memory',
    'dojo/store/JsonRest',
    'dojo/aspect',

    "dgrid/selector",
    "dgrid/List",
    "dgrid/OnDemandGrid",
    "dgrid/Selection",
    "dgrid/Keyboard",
    "dojo/_base/declare",
    "dgrid/editor",

    'dijit/Menu',
    'dijit/MenuItem',
    'dijit/MenuSeparator',

    'dijit/form/Button',

    'stalker/dialogs',
    'stalker/dialogCaller',
    'stalker/dialogCreator',

    'dojo/domReady!'
], function (ObjectStore, Memory, JsonRest, aspect, selector, List, Grid,
             Selection, Keyboard, declare, editor, Menu, MenuItem,
             MenuSeparator, Button, dialogs, dialogCaller, dialogCreator) {


    var StandardGrid = declare([Grid, Selection, Keyboard]);

    var ticket_DataGrid = new StandardGrid({
        id: 'ticket_data_grid',
        width: '100%',
        {#            autoHeight: true,#}
        selectionMode: 'single',
        cellNavigation: false,
        allowSelectAll: true
    }, 'ticket_data_grid');


    {% if has_permission('Create_Ticket')%}

        var create_ticket_button = dialogCaller({
            label: 'Create Ticket',
            dialog_id: 'ticket_dialog',
            content_creator: dialogs.create_ticket_dialog,
            attach_to: 'create_ticket_button',
            related_field_updater: ticket_DataGrid_updater,
            data_id: '{{ entity.id }}'
        });
        create_ticket_button.startup();
    {% endif %}



    var ticketData;


    function ticket_DataGrid_updater() {

        var target = '{{ request.route_url('get_entity_tickets', id=entity.id) }}';
        {% if entity.entity_type == 'Project' %}
            target = '{{ request.route_url('get_project_tickets', id=entity.id) }}';
        {% endif %}

        var ticket_memory = new JsonRest({
            target: target
        });

        ticket_memory.query().then(function (data) {

            ticketData = data;

            var columns = [


                {
                    field: 'id',
                    label: 'Ticket',
                    get: function (object) {

                        return object; // return entire item for formatter to use

                    },
                    formatter: function (value) {

                        var targetPane = "'tickets_content_pane'";
                        var address = "'tickets/" + value.id + "/view'";

                        return '<a href="javascript:redirectLinkInParent(' + targetPane + ',' + address + ');">' + value.name + '</a>';

                    }

                },
                {
                    field: 'project_name',
                    label: "Project",
                    get: function (object) {

                        return object; // return entire item for formatter to use

                    },
                    formatter: function (value) {

                        var targetPane = "'central_content'";
                        var address = "'projects/" + value.project_id + "'/view";

                        return '<a href="javascript:redirectLink(' + targetPane + ',' + address + ');">' + value.project_name + '</a>';

                    }
                },
                {
                    field: 'owner_id',
                    label: "Owner",
                    get: function (object) {

                        return object; // return entire item for formatter to use

                    },
                    formatter: function (value) {

                        var targetPane = "'central_content'";
                        var address = "'users/" + value.owner_id + "/view'";

                        return '<a href="javascript:redirectLink(' + targetPane + ',' + address + ');">' + value.owner_name + '</a>';

                    }
                },
                {
                    field: 'created_by_id',
                    label: "Created_By",
                    get: function (object) {

                        return object; // return entire item for formatter to use

                    },
                    formatter: function (value) {

                        var targetPane = "'central_content'";
                        var address = "'users/" + value.created_by_id + "/view'";

                        return '<a href="javascript:redirectLink(' + targetPane + ',' + address + ');">' + value.created_by_name + '</a>';

                    }
                },
                {
                    field: 'updated_by_id',
                    label: "Updated_By",
                    get: function (object) {

                        return object; // return entire item for formatter to use

                    },
                    formatter: function (value) {

                        var targetPane = "'central_content'";
                        var address = "'users/" + value.updated_by_id + "/view'";

                        return '<a href="javascript:redirectLink(' + targetPane + ',' + address + ');">' + value.updated_by_name + '</a>';

                    }
                }
            ];

            ticket_DataGrid.renderArray(data);
            ticket_DataGrid.set('columns', columns);


            var right_click_menu = new Menu({
                targetNodeIds: ['ticket_data_grid'],
                selector: '.dgrid-row'
            });

            var create_update_ticket_menuItem_creator = function () {
                return new MenuItem({
                    label: 'Update Ticket',
                    onClick: function () {
                        var node = this.getParent().currentTarget;
                        var nodeId = node.getAttribute('id');
                        var rowId = ticket_DataGrid.id + '-row-';
                        var ticketId = ticketData[parseInt(nodeId.substring(rowId.length, nodeId.length))].id;


                        var dialog = dialogCreator({
                            dialog_id: 'ticket_dialog',
                            content_creator: dialogs.update_ticket_dialog,
                            related_field_updater: ticket_DataGrid_updater,
                            data_id: ticketId
                        });
                        dialog.show();


                    }
                });
            };

            right_click_menu.addChild(create_update_ticket_menuItem_creator());

            right_click_menu.startup();


        });

        ticket_DataGrid.resize();

    }

    ticket_DataGrid_updater();


    aspect.after(this, "resize", function () {
        console.log('ticket_DataGrid.resize();');
        ticket_DataGrid.resize();
    });


});
</script>

