{# Stalker Pyramid a Web Base Production Asset Management System
 Copyright (C) 2009-2014 Erkan Ozgur Yilmaz

 This file is part of Stalker Pyramid.

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation;
 version 2.1 of the License.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
#}
{% extends "base.jinja2" %}


{#SIDEBAR#}
{% block sidebar %}

    {% include 'sidebar.jinja2' %}

{% endblock sidebar %}

{#PRE-HEADER #}
{% block pre_header %}

    <link rel="stylesheet"
          href='{{ request.static_url("stalker_pyramid:static/ace/css/dropzone.css") }}'/>
    <link rel="stylesheet"
          href='{{ request.static_url("stalker_pyramid:static/stalker/css/Paginator.css") }}'/>

{% endblock pre_header %}

{# BREADCRUMBS #}
{% block breadcrumbs %}

    {% set page_title='References' %}
    {% include 'breadcrumb/breadcrumbs.jinja2' %}

{% endblock breadcrumbs %}

{#PAGE-CONTENT#}
{% block page_content %}
    {% set page_title='References' %}
    {% include 'page_header.jinja2' %}

    <div class="row-fluid">
        <!--PAGE CONTENT BEGINS-->
        {% if entity.entity_type != 'Project' %}
            <button data-target="#dialog_template"
                data-toggle="modal"
                data-keyboard="false"
                href="{{ request.route_url('upload_entity_reference_dialog', id=entity.id) }}"
                class="pull-left btn btn-small btn-primary">
                <i class="icon-cloud-upload bigger-120"></i>
                Upload References
            </button>
        {% endif %}
    </div>
    <div class="space-8"></div>
    <div class="row-fluid">
        <div class="row-fluid ">
            
            <div class="span6">
                <div class="pagination" style="margin: 0"></div>
            </div>

            <div class="span6">
                <div class="search pull-right" id="reference-search">
                    <form class="form-search">
                        <input id="reference_search_field" type="text" class="input-medium search-query"/>
                        <button class="btn btn-purple btn-small"
                                id="reference_do_search_button">
                            Search
                            <i class="icon-search icon-on-right bigger-110"></i>
                        </button>
                    </form>
                </div>
            </div>

        </div>

        <div class="row-fluid">
            <div id="new_references_storage" class="hidden"></div>
            <ul class="ace-thumbnails"></ul>
        </div>
    </div>
{% endblock page_content %}

{#EXTRA-SCRIPTS#}
{% block extrascripts %}

    
    <script type="text/javascript"
            src='{{ request.static_url("stalker_pyramid:static/stalker/js/bootstrap-tag.js") }}'></script>
    <script type="text/javascript"
            src='{{ request.static_url("stalker_pyramid:static/ace/js/dropzone.min.js") }}'></script>
    <script type="text/javascript"
            src='{{ request.static_url("stalker_pyramid:static/stalker/js/Paginator.js") }}'></script>

    {% raw %}
    <script id="tmpl_reference_item" type="text/x-dot-template">
        <li id="Reference_{{=it.id}}">
            <a href="/{{=it.full_path}}"

               thumbnail_href="{{=it.thumbnail_full_path}}"
               web_href="{{=it.full_path}}"
               hires_href="{{=it.hires_full_path}}"

               original_filename="{{=it.original_filename}}"

               tags="{{=it.tags }}"

               title="{{=it.original_filename}}&#013;{{=it.entity_names}}&#013;&#013;{{=it.tags }}"
               data-rel="colorbox"
               class="cboxElement">
                <div style="text-align: center; overflow: hidden; width: 150px">
                    <img alt="150x150"
                         style="height: 150px; width: auto; max-width: none;
                            position: relative; left: 100%; margin-left: -200%;"
                         src="/{{=it.thumbnail_full_path ? it.thumbnail_full_path : 'static/stalker/images/Placeholder_0.png' }}">

                    <div class="tags">
                        <!--{{~ it.tags :t}}-->
                        <!--<span class="label label-info">{{=t}}</span>-->
                        <!--{{~}}-->

                        {{? it.full_path.indexOf('.webm') !== -1 }}
                        <span class="label label-success">
                            <i class="icon-film"></i>
                        </span>
                        {{?}}
                    </div>
                </div>
            </a>

            <div class="tools">
                <a href="/FD{{=it.full_path}}" title="Download"><i class="icon-cloud-download"></i></a>
                <a href="javascript:copyToClipboard('http://' + window.location.host +'/FD{{=it.full_path}}')" title="Copy Download Link"><i class="icon-link"></i></a>
             
                <div class="dropdown">
                    <a class="dropdown-toggle" data-toggle="dropdown"
                       style="display: inline-block;
                              color: #FFF;
                              font-size: 18px;
                              font-weight: normal;
                              padding: 4px;">
                        <i class="icon-external-link"></i>
                    </a>
                    <ul class="dropdown-menu" role='menu' aria-labelledby="dLabel" style="text-align: left">
                    {{~ it.entity_ids :t:i }}
                        <li>
                            <a href="/entities/{{=t}}/references/list" title="Go To Related Entity">{{=it.entity_names[i]}}</a>
                        </li>
                    {{~}}
                    </ul>
                </div>

                <a class='reference-deleter'
                   ref_id="{{=it.id}}"
                   ref_file_name="{{=it.original_filename}}"
                   href="#"
                   title="Delete"><i class="icon-remove red"></i></a>
            </div>
        </li>
    </script>
    {% endraw %}

    <script type="text/javascript">
        var colorbox_params = {
            rel: 'References',
            loop: false,
            reposition: true,
            scalePhotos: true,
            scrolling: true,
            previous: '<i class="icon-arrow-left"></i>',
            next: '<i class="icon-arrow-right"></i>',
            close: '&times;',
            current: '{current} of {total}',
            maxWidth: '100%',
            maxHeight: '100%',
            width: '90%',
            height: '90%',
            transition: 'none',
            title: function () {
                // Filename (Tags)| Hires (DL)
                
                var url = $(this).attr('href');

                var original_title = $(this).attr('original_filename');

                var tags = $(this).attr('tags');

                var view_hires_url = '/' + $(this).attr('hires_href');
                var download_hires_url = '/FD' + $(this).attr('hires_href');

                var open_hires_in_new_tab_link = '<a title="View Hires in new Tab"  href="' + view_hires_url + '" target="_blank">Hires</a></span>';
                var download_hires_link = '<span><a title="Download Hires" class="icon-cloud-download" href="' + download_hires_url + '">&nbsp</a></span>';

                return original_title + '&nbsp(' + tags + ')&nbsp|&nbsp' + open_hires_in_new_tab_link + ' &nbsp '+ download_hires_link;
            },
            onOpen: function () {
                document.body.style.overflow = 'hidden';
                // get the element and check if it is the last element
            },
            onClosed: function () {
                document.body.style.overflow = 'auto';
            },
            onComplete: function () {
{#                $.colorbox.resize();#}
            }
        };

        /**
         * Appends a new item to the thumbnail list
         */
        var append_thumbnail = function (options) {
            //
            // adds only one item to the list
            //
            // compile the reference item template

            options = $.extend({
                data: null,
                template: null,
                colorbox_params: {},
                animate: false
            }, options);

            var data = options.data;
            var template = options.template;
            var colorbox_params = options.colorbox_params;
            var animate = options.animate;

            // check if there is any video
            var full_path;
            full_path = data.full_path;
            colorbox_params.iframe = false;
            if (full_path.search('.webm') != -1){
{#                console.debug('data: ', data);#}
                // it should have video replace the address with video player
                data.full_path = 'video_player?video_full_path=/' + data.full_path;
                colorbox_params.iframe = false;
            }

            var ref_item = $($.parseHTML(template(data)));

            if (animate) {
                ref_item.css({display: 'none'});
            }
            $('.ace-thumbnails').append(ref_item);
            if (animate) {
                ref_item.toggle('slow');
            }

            ref_item.find('[data-rel="colorbox"]').colorbox(colorbox_params);
        };

        /**
         * Removes the thumbnails from list
         */
        var remove_thumbnails = function(){
            var cb_element = $('.ace-thumbnails');
            cb_element.children().remove('*');
            cb_element.colorbox.remove();
        };

        /**
         * Draws reference items
         */
        var draw_reference_items = function (options) {
            var referenceItemTemplate = doT.template(document.getElementById('tmpl_reference_item').text);

            options = $.extend({
                current_page: 1,
                items_per_page: 40,
                url: '/entities/{{ entity.id }}/references/',
                search: ''
            }, options);

            var current_page = options.current_page;
            var items_per_page = options.items_per_page;

            var offset = (current_page - 1) * items_per_page;
            // now generate the template items
            $.getJSON(options.url,
                      $.param({
                          'offset': offset,
                          'limit': items_per_page,
                          'search': options.search
                      })).then(function (data) {
                var ref_count = data.length;
                // remove any thumbnails first
                remove_thumbnails();
                for (var i = 0; i < ref_count; i++) {
{#                    console.log('data: '+i);#}
                    append_thumbnail({
                        data: data[i],
                        template: referenceItemTemplate,
                        colorbox_params: colorbox_params
                    });
                }

{#                $('.ace-thumbnails [data-rel="colorbox"]').colorbox(#}
{#                        colorbox_params#}
{#                );#}

                $("#cboxLoadingGraphic").append("<i class='icon-spinner orange'></i>");

                $('.reference-deleter').on('click', function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                    var self = $(this);
                    var ref_id = self.attr('ref_id');
                    var ref_file_name = self.attr('ref_file_name');

                    var confirm_message = 'Delete ' + ref_file_name + ' ?';
                    
                    bootbox.confirm(confirm_message, function (response) {
                        if (response) {
{#                            console.debug('will delete ' + ref_id);#}
                            // remove the reference in the server
                            var url = '/references/' + ref_id + '/delete';
                            $.post(url).done(function (response_text) {
                                // use he response text and give info
                                // and also delete the HTML element
                                $('#Reference_' + ref_id).toggle('slow', function () {
                                    $(this).remove();
                                })
                            }).fail(function (jqXHR) {
                                // use the jqXHR.response_text and inform user about what went wrong
                            });
                        }
                    });
                });
            });
        };

        /**
         * Creates the paginator
         * 
         * @param options
         *   Options for this function
         */
        var create_paginator = function (options) {

            options = $.extend({
                total_number_of_items: 0,
                items_per_page: 40,
                current_page: 1
            }, options);

            $('.pagination').paginator({
                'number_of_items': options.total_number_of_items,
                'items_per_page': options.items_per_page,
                'current_page': options.current_page,
                'callback': function(current_page_number){
                    // get search string
                    var search_string = $('#reference_search_field').val();
    
                    draw_reference_items({
                        current_page: current_page_number,
                        items_per_page: options.items_per_page,
                        search: search_string
                    });
                }
            });
        };

        $(function () {
            // create pagination
            var items_per_page = 40;
            var total_number_of_items;
            var count_url = '/entities/{{ entity.id }}/references/count/';

            // get total number of references
            $.getJSON(count_url, function(data){
                total_number_of_items = data;
                create_paginator({
                    total_number_of_items: total_number_of_items,
                    items_per_page: items_per_page
                });
            });

            // for initial one
            draw_reference_items({
                current_page: 1,
                items_per_page: items_per_page
            });

            // and add the new thumbnails when uploaded through Dropzone
            $('#dialog_template').on('hidden', function () {
                // get the data from the storage
                var repo_id = {% if entity.entity_type == 'Project' %}{{ entity.repository.id }}{% else %}{{ entity.project.repository.id }}{% endif %};
                var repo_prepend = 'repositories/' + repo_id + '/';
                var new_references_storage = $('#new_references_storage');
                var data = $.parseJSON(new_references_storage.text());
                // empty the storage
                new_references_storage.text('');
                var referenceItemTemplate = doT.template(document.getElementById('tmpl_reference_item').text);
                for (var i = 0; i < data.length; i++) {
                    // prepend repsoitories/{id}/ to make it compatible with the
                    // new style references
                    data[i].thumbnail_full_path = repo_prepend + data[i].thumbnail_full_path;
                    data[i].full_path = repo_prepend + data[i].full_path;
                    append_thumbnail({
                        data: data[i],
                        template: referenceItemTemplate,
                        colorbox_params: colorbox_params,
                        animate: true
                    });
                }
            });

            $('#reference_do_search_button').on('click', function(e){
                e.preventDefault();
                e.stopPropagation();

                // get search string
                var search_string = $('#reference_search_field').val();
                $.getJSON(count_url,
                    $.param({
                      'search': search_string
                    })).then(function (data) {

                    create_paginator({
                        total_number_of_items: data,
                        items_per_page: items_per_page
                    });

                    draw_reference_items({
                        current_page: 1,
                        items_per_page: items_per_page,
                        search: search_string
                    });
                });
            });

        });
    </script>
{% endblock extrascripts %}
