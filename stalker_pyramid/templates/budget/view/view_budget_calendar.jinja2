{# Stalker Pyramid a Web Base Production Asset Management System
 Copyright (C) 2009-2014 Erkan Ozgur Yilmaz

 This file is part of Stalker Pyramid.

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation;
 version 2.1 of the License.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
#}


{% extends "base.jinja2" %}

{% block pre_header %}
    <link rel="stylesheet"
          href='{{ request.static_url("stalker_pyramid:static/dhtmlx/dhtmlxgantt.css") }}'/>
    <link rel="stylesheet" href='{{ request.static_url("stalker_pyramid:static/dhtmlx/skins/dhtmlxgantt_terrace.css") }}' type="text/css" media="screen" title="no title" charset="utf-8">
{% endblock pre_header %}

{# BREADCRUMBS #}
{% block breadcrumbs %}
    {% include 'breadcrumb/breadcrumbs.jinja2' %}
{% endblock breadcrumbs %}

{#SIDEBAR#}
{% block sidebar %}
    {% set budget=entity %}
    {% include 'sidebar.jinja2' %}
{% endblock sidebar %}

{#PAGE-CONTENT#}
{% block page_content %}
    <div class="widget-box transparent invoice-box">
        {% set budget=entity %}
        {% include 'budget/view/budget_header.jinja2' %}
        <div class="widget-body">
            <div class="widget-main" >

                <div class="row-fluid">
                    <div id="gantt_here" style='width:100%; height:700px; background-color: #EFF5FD;'></div>
                </div>
                <div class="space-6"></div>
                <div class="row-fluid">
                    <button id='export_button'
                                    class="btn btn-small btn-info"
                                    data-placement="bottom"
                                    title="Export"
                                    data-keyboard="false"
                                    onclick='gantt.exportToExcel()'
                                    >

                            <i class="icon-save bigger-130"></i> Export</button>
                    <button id='milestone_button'
                                    class="btn btn-small btn-success"
                                    data-placement="bottom"
                                    title="MileStone"
                                    data-keyboard="false"
                                    href="#"
                                    >
                            <i class="icon-plus bigger-130"></i> MileStone</button>
                    <button id='forward_button'
                            class="btn btn-small btn-danger pull-right"
                            data-placement="bottom"
                            data-keyboard="false"
                            href="#"
                            >
                     <i class="icon-arrow-right bigger-130"></i></button>
                    <button id='back_button'
                                class="btn btn-small btn-info pull-right"
                                data-placement="bottom"
                                data-keyboard="false"
                                href="#"
                                >
                        <i class="icon-arrow-left bigger-130"></i></button>
                </div>


            </div>
        </div>
    </div>
{% endblock page_content %}

{% block extrascripts %}

    <style type="text/css">
        html, body { height: 100%; padding:0px; margin:0px;  overflow: hidden; }
        .gantt_task_cell.week_end{
            background-color: #EFF5FD;
        }
        .gantt_task_row.gantt_selected .gantt_task_cell.week_end{
            background-color: #F8EC9C;
        }
        .fa{
            cursor: pointer;
            font-size: 14px;
            text-align: center;
            opacity: 0.2;
            padding: 5px;
        }
        .fa:hover{
            opacity: 1;
        }
        .fa-pencil{
            color: #ffa011;
        }
        .fa-plus{
            color: #328EA0;
        }
        .fa-times{
            color: red;
        }

</style>
    <script type="text/javascript">
        if("ontouchend" in document) document.write("<script src='{{ request.static_url("stalker_pyramid:static/ace/js/jquery.mobile.custom.min.js") }}'>"+"<"+"/script>");
    </script>
    <script src='{{ request.static_url("stalker_pyramid:static/jqGrid/js/i18n/grid.locale-en.js") }}'></script>

    <script src='{{ request.static_url("stalker_pyramid:static/dhtmlx/dhtmlxSuite/dhtmlx.js") }}'></script>
    <script src='{{ request.static_url("stalker_pyramid:static/dhtmlx/dhtmlxgantt.js") }}'></script>
    <script src='{{ request.static_url("stalker_pyramid:static/dhtmlx/api.js") }}'></script>
    <script src='{{ request.static_url("stalker_pyramid:static/moment/moment.min.js") }}'></script>
    <script src='{{ request.static_url("stalker_pyramid:static/dhtmlx/ext/dhtmlxgantt_multiselect.js") }}' type='text/javascript' charset='utf-8'></script>
{#    <script src="http://export.dhtmlx.com/gantt/api.js"></script>#}
    <script type="text/javascript">
        var myLayout, myToolbar;
        console.log('{{ entity.get_generic_text_attr('start') }}');
        console.log('{{ entity.get_generic_text_attr('end') }}');

        var project_start = moment({{ entity.get_generic_text_attr('start') }});
        var project_end = moment({{ entity.get_generic_text_attr('end') }});
        var duration = project_end.diff(project_start, 'days');
        var project_id = "{{ entity.project.id }}";
        var project_name = "{{ entity.project.name }}";
        var links = [];
        var target_tasks = [];

        function doOnLoad() {
            initGantt(gantt);
            initToolbar();
        }

        function initGantt(gantt){
            dhtmlx.message({
                text:"Hold <b>shift</b> or <b>ctrl</b> to select several items",
                expire:-1
            });
            gantt.config.auto_scheduling = true;
            gantt.config.work_time = true;
            gantt.config.scale_unit = "day";
            gantt.config.date_scale = "%D, %d";
            gantt.config.min_column_width = 60;
            gantt.config.duration_unit = "day";
            gantt.config.scale_height = 20*3;
            gantt.config.row_height = 30;
            gantt.config.grid_width = 300;
            gantt.setWorkTime({day : 6, hours : [8,12]});

            var weekScaleTemplate = function(date){
                var dateToStr = gantt.date.date_to_str("%d %M");
                var weekNum = gantt.date.date_to_str("(week %W)");
                var endDate = gantt.date.add(gantt.date.add(date, 1, "week"), -1, "day");
                return dateToStr(date) + " - " + dateToStr(endDate) + " " + weekNum(date);
            };

            gantt.templates.task_class = function(st,end,item){
                return item.$level==0?"gantt_project":""
            };

            gantt.config.subscales = [
                {unit:"month", step:1, date:"%F, %Y"},
                {unit:"week", step:1, template:weekScaleTemplate}
            ];

            gantt.templates.task_cell_class = function(task, date){
                if(!gantt.isWorkTime(date))
                    return "week_end";
                return "";
            };

            var colHeader = '<div class="gantt_grid_head_cell gantt_grid_head_add" onclick="createTaskDialog()"></div>',
                colContent = function(task){
                        return ('');
                    };

            gantt.config.columns = [
                {name:"text", label:"Task Name", width:150, tree:true },
                {name:"duration", label:"Duration", align:"center", width:55},
                {name:"resources", label:"Resource", align:"center", width:65},
                {
                    name:"buttons",
                    label:colHeader,
                    resize:true,
                    template:colContent,
                    width:60
                }
            ];

            var tasks = {
                  data:[
                        {
                            id:project_id,
                            text:project_name,
                            start_date:project_start.format('DD MM YYYY'),
                            duration:duration,
                            resources:0,
                            open:true
                        }
                   ]
                };


            $.getJSON('/budgets/{{ entity.id }}/entries/').then(function (entry_data) {

                var budget_entries = entry_data;

                for(var j=0; j<budget_entries.length; j++ ){
                    if(budget_entries[j].generic_data.dataSource == "Calendar"){
                        var secondaryFactor = budget_entries[j].generic_data.secondaryFactor;
                        for(var t=0; t<secondaryFactor.length; t++){

                            var task = {
                                id:budget_entries[j].id+"_"+t,
                                text:budget_entries[j].name,
                                start_date:(moment(parseInt(secondaryFactor[t].start_date))).format('DD MM YYYY'),
                                duration:secondaryFactor[t].amount,
                                resources:secondaryFactor[t].second_amount,
                                parent: project_id,
                                good_id: budget_entries[j].good_id,
                                type: 'budget_entry',
                                open:false
                            }
                            tasks.data.push(task);
                        }
                    }
                }

                $.getJSON('/budgets/{{ entity.id }}/calendar/milestones/').then(function (m_data) {
                    var milestones = m_data;
                    for(var k=0; k<milestones.length; k++){
                        var task = {
                            id:"milestone_"+k,
                            text:milestones[k].name,
                            start_date:(moment(parseInt(milestones[k].start_date))).format('DD MM YYYY'),
                            duration:1,
                            resources:1,
                            parent: project_id,
                            type: 'milestone',
                            open:false
                        }
                        tasks.data.push(task);
                    }

                    gantt.templates.task_class = gantt.templates.grid_row_class = gantt.templates.task_row_class = function (start, end, task) {
                            if (gantt.isSelectedTask(task.id))
                                return "gantt_selected";
                            };

                    gantt.init("gantt_here");
                    gantt.parse(tasks);

                    $.getJSON('/budgets/{{ entity.id }}/calendar/links/').then(function (l_data) {
                        var budget_links = l_data;
                        for(var i=0; i<budget_links.length; i++){
                            gantt.addLink(budget_links[i]);
                            convertLinkData(budget_links[i]);
                        }
                    });
                });
            });
        }

        function initToolbar(){

            gantt.attachEvent("onTaskDblClick", function(id, e){

                if(id == project_id){
                    updateProjectDialog(id);
                }
                else{
                    updateEventDialog(id)
                }

            });

            gantt.attachEvent("onLinkClick", function(id,e){

                var confirm_message =
                    '<h3 class="header red"><i class="icon-warning-sign">' +
                    '</i> Warning</h3>' +
                    '<div id="message" class="alert alert-info bigger-110">' +
                    'Are you sure you want to  delete this link?' +
                    '</div>';

                bootbox.confirm(confirm_message, function (result) {
                    if (result) {
                        gantt.deleteLink(id);
                        deleteLinkAction(id);
                    }
                });
            });

            gantt.attachEvent("onTaskDrag", function(id, mode, task, original, e){

                console.log('onTaskDrag');

                var parent = task.parent ? gantt.getTask(task.parent) : null,
                    children = gantt.getChildren(id),
                    modes = gantt.config.drag_mode;

                var limitLeft = null,
                    limitRight = null;

                if(!(mode == modes.move || mode == modes.resize)) return;

                if(mode == modes.move){
                    limitLeft = limitMoveLeft;
                    limitRight = limitMoveRight;
                }else if(mode == modes.resize){
                    limitLeft = limitResizeLeft;
                    limitRight = limitResizeRight;
                }

                //check parents constraints
                if(parent && +parent.end_date < +task.end_date){
                    limitLeft(task, parent);
                }
                if(parent && +parent.start_date > +task.start_date){
                    limitRight(task, parent);
                }

                //check children constraints
                for(var i=0; i < children.length; i++){
                    var child = gantt.getTask(children[i]);
                    if(+task.end_date < +child.end_date){
                        limitLeft(task, child);
                    }
                    else if(+task.start_date > +child.start_date){
                        limitRight(task, child);
                    }
                }
                checkLinkedTasks(task);
            });

            gantt.attachEvent("onAfterTaskDrag", function(id, mode, e){

                console.log('onAfterTaskDrag');

                var task = gantt.getTask(id);
                checkLinkedTasks(task);

                if(id == project_id){
                    updateProjectStartEndDate(id);
                }
                else{
                    updateEventAction(id);
                    for (var i=0; i<target_tasks.length;i++){
                        updateTaskAction(target_tasks[i]);
                    }
                    target_tasks = [];
                }
            });

            gantt.attachEvent("onAfterLinkAdd", function(id,item){
                console.log('onAfterLinkAdd');

                convertLinkData(item);
                createLinkAction(item);
            });
        }

        function convertLinkData(item){
{#            console.log('item.id: '+ item.id);#}

            var source_task = gantt.getTask(item.source);
            var target_task = gantt.getTask(item.target);
            var new_link_item;

            if (source_task.type == "milestone" && item.type == '3'){
                new_link_item = {'milestone': item.source, 'task':item.target, 'type': '1'};
            }
            if (target_task.type == "milestone" && item.type == '0'){
                new_link_item = {'milestone': item.target, 'task':item.source, 'type': '1'};
            }
            if (source_task.type == "milestone" && item.type == '0'){
                new_link_item = {'milestone': item.source, 'task':item.target, 'type': '2'};
            }
            if (target_task.type == "milestone" && item.type == '3'){
                new_link_item = {'milestone': item.target, 'task':item.source, 'type': '2'};
            }
            if (source_task.type == "milestone" && item.type == '1' ){
                new_link_item = {'milestone': item.source, 'task':item.target, 'type': '3'};
            }
            if (target_task.type == "milestone" && item.type == '1'){
                new_link_item = {'milestone': item.target, 'task':item.source, 'type': '3'};
            }
            if (source_task.type == "milestone" && item.type == '2'){
                new_link_item = {'milestone': item.source, 'task':item.target, 'type': '4'};
            }
            if (target_task.type == "milestone" && item.type == '2'){
                new_link_item = {'milestone': item.target, 'task':item.source, 'type': '4'};
            }
            new_link_item['id'] = item.id;
            links.push(new_link_item);
        }

        function createMilestoneDialog() {
            var event_dialog = $('#dialog_template');
            var project = gantt.getTask(project_id);
            event_dialog.attr('project_start_date', project.start_date);
            event_dialog.attr('project_end_date', addDays(project.start_date, project.duration));

            event_dialog.modal({
                    'remote': "/budgets/{{ entity.id }}/calendar/milestone/dialog?mode=Create"
                });
        }

        function updateMilestoneDialog(id) {
            var event_dialog = $('#dialog_template');
            var task = gantt.getTask(id);

            var project = gantt.getTask(project_id)
            event_dialog.attr('project_start_date', project.start_date);
            event_dialog.attr('project_end_date', addDays(project.start_date, project.duration))

            event_dialog.attr('milestone_id', task.id);
            event_dialog.attr('milestone_name', task.text);
            event_dialog.attr('start_date', task.start_date);
            event_dialog.attr('description', task.description);

            event_dialog.modal({
                'remote': "/budgets/{{ entity.id }}/calendar/milestone/dialog?mode=Update"
            });
        }

        function createTaskDialog() {

            var event_dialog = $('#dialog_template');
            var project = gantt.getTask(project_id);
            event_dialog.attr('project_start_date', project.start_date);
            event_dialog.attr('project_end_date', addDays(project.start_date, project.duration));

            event_dialog.modal({
                    'remote': "/budgets/{{ entity.id }}/calendar/task/dialog?mode=Create"
                });

        }

        function updateTaskDialog(id) {
            var event_dialog = $('#dialog_template');
            var task = gantt.getTask(id);

            var project = gantt.getTask(project_id);
            event_dialog.attr('project_start_date', project.start_date);
            event_dialog.attr('project_end_date', addDays(project.start_date, project.duration));

            event_dialog.attr('task_id', task.id);
            event_dialog.attr('task_name', task.text);
            event_dialog.attr('good_id', task.good_id);
            event_dialog.attr('start_date', task.start_date);
            event_dialog.attr('amount', task.duration);
            event_dialog.attr('second_amount', task.resources);

            event_dialog.modal({
                'remote': "/budgets/{{ entity.id }}/calendar/task/dialog?mode=Update"
            });
        }

        function updateTaskAction(id) {
{#            console.log("updateTaskAction: "+ id);#}
            var task = gantt.getTask(id);
            if(task.duration > 0){
                $.post(
                    '/budgets/{{ entity.id }}/calendar/task/action',
                    $.param({
                        'task_id': task.id,
                        'good_id': task.good_id,
                        'start_date': (task.start_date).getTime(),
                        'amount': task.duration,
                        'second_amount': task.resources,
                        'mode':"Update"
                    })
                ).done(function (jqXHR) {

                }).fail(function (jqXHR) {
                    bootbox.alert(jqXHR.responseText);
                });
            }
        }

        function updateMilestoneAction(id) {
            var milestone = gantt.getTask(id);
            $.post(
                '/budgets/{{ entity.id }}/calendar/milestone/action',
                $.param({
                    'milestone_id': milestone.id,
                    'start_date': (milestone.start_date).getTime(),
                    'mode':"Update"
                })
            ).done(function (jqXHR) {

            }).fail(function (jqXHR) {
                bootbox.alert(jqXHR.responseText);
            });
        }

        function createLinkAction(l_item) {
            console.log('createLinkAction');
            $.post(
                '/budgets/{{ entity.id }}/calendar/link/create',
                $.param(l_item)
            ).done(function (jqXHR) {

            }).fail(function (jqXHR) {
                bootbox.alert(jqXHR.responseText);
            });
        }

        function deleteLinkAction(id) {
            $.post(
                '/budgets/{{ entity.id }}/calendar/link/delete',
                $.param({'link_id': id})
            ).done(function (jqXHR) {

            }).fail(function (jqXHR) {
                bootbox.alert(jqXHR.responseText);
            });
        }

        function checkLinkedTasks(task){
            var project = gantt.getTask(project_id);
            var project_start = project.start_date;
            var project_end = project.end_date;

            for(var i=0; i < links.length; i++){

                var item = links[i];
                var target_task;

                if (item.task == task.id){
                    target_task = task;
                }
                if (item.milestone == task.id){
                    target_task = gantt.getTask(item.task);
                }

                if(target_task){
                    var milestone = gantt.getTask(item.milestone);
                    switch (item.type){
                        case "1":
                                if( +milestone.start_date < +target_task.end_date){
                                    target_task.end_date = new Date(milestone.start_date);

                                    var min_start_day = addDays(target_task.end_date,-1);
                                    if(target_task.start_date > min_start_day){
                                        target_task.start_date = min_start_day;
                                    }
                                }
                            break;
                        case "2":
                                if( +target_task.start_date < +milestone.end_date ){
                                    target_task.start_date = new Date(milestone.end_date);

                                    var min_end_day = addDays(target_task.start_date, 1);
                                    if(target_task.end_date < min_end_day){
                                        target_task.end_date = min_end_day;
                                    }
                                }
                            break;
                        case "3":
                                if( +target_task.start_date < +milestone.start_date ){
                                    target_task.start_date = new Date(milestone.start_date);
                                    var min_end_day = addDays(target_task.start_date, 1);
                                    if(target_task.end_date < min_end_day){
                                        target_task.end_date = min_end_day;
                                    }
                                }
                            break;
                        case "4":
                                if( +target_task.end_date > +milestone.end_date ){
                                    target_task.end_date = new Date(milestone.end_date);
                                    var min_start_day = addDays(target_task.end_date,-1);
                                    if(target_task.start_date > min_start_day){
                                        target_task.start_date = min_start_day;
                                    }
                                }
                            break;
                    }




                    target_task.duration = gantt.calculateDuration(target_task.start_date, target_task.end_date);
                    gantt.updateTask(target_task.id);
                    target_tasks.push(target_task.id);
                }
                target_task = null;
            }

        }



        function updateEventDialog(id) {

            var task = gantt.getTask(id);

            if(task.type == 'milestone'){
                updateMilestoneDialog(id);
            }
            else{
                updateTaskDialog(id);
            }

        }

        function updateEventAction(id) {

            var task = gantt.getTask(id);

            if(task.type == 'milestone'){
                updateMilestoneAction(id);
            }
            else{
                updateTaskAction(id);
            }
        }

        function deleteTaskAction(id) {
            var budgetEntry_id = id.split("_")[0];
            $.post(
                '/budgetentries/'+budgetEntry_id+'/delete'
            ).done(function (jqXHR) {

            }).fail(function (jqXHR) {
                bootbox.alert(jqXHR.responseText);
            });
        }

        function updateProjectDialog(id) {
            var event_dialog = $('#dialog_template');
            event_dialog.modal({
                        'remote': "/budgets/{{ entity.id }}/update/dialog?mode=Update"
                    });
        }

        function updateProjectStartEndDate(id){

            console.log("updateProjectStartEndDate");
            var project = gantt.getTask(id);
            var start = project.start_date;
            var end = (addDays(start, project.duration));

            var params = $.param({
                attr_name: 'start_and_end_dates',
                attr_value: start.format('mm/dd/yyyy') + ' - ' + end.format('mm/dd/yyyy')
            });

            $.post(
                "/budgets/{{ entity.id}}/update/inline", params
            ).done(function () {
                console.log('done');
            }).fail(function (jqXHR) {
                bootbox.alert('<div id="message" class="alert alert-danger bigger-110">' + jqXHR.responseText + '</div>');
            });
        }

        function shiftTask(task_id, direction) {

            var project = gantt.getTask(project_id);
            var project_start = project.start_date;
            var project_end = project.end_date;

            var task = gantt.getTask(task_id);
            var new_start_date = gantt.date.add(task.start_date, direction, "day");
            var new_end_date = gantt.calculateEndDate(new_start_date, task.duration);

            if(project_start <= new_start_date && project_end >= new_end_date){
                task.start_date = new_start_date;
                task.end_date = new_end_date;
            }

            gantt.updateTask(task.id);

        }

        function limitMoveLeft(task, limit){

            console.log('limitMoveLeft');
            var dur = task.end_date - task.start_date;
            task.end_date = new Date(limit.end_date);
            task.start_date = new Date(+task.end_date - dur);

        }

        function limitMoveRight(task, limit){

            console.log('limitMoveRight');
            var dur = task.end_date - task.start_date;
            task.start_date = new Date(limit.start_date);
            task.end_date = new Date(+task.start_date + dur);

        }

        function limitResizeLeft(task, limit){

            console.log('limitResizeLeft');
            task.end_date = new Date(limit.end_date);

        }

        function limitResizeRight(task, limit){

            console.log('limitResizeRight');
            task.start_date = new Date(limit.start_date);

        }

        function addDays(date, days) {

            var result = new Date(date);
            result.setDate(result.getDate() + days);
            return result;

        }

        $(document).ready(function () {

            doOnLoad();
            $('#back_button').on('click', function (e) {

                e.preventDefault();
                e.stopPropagation();

                gantt.eachSelectedTask(function(task_id){
                    shiftTask(task_id, -1)
                });

            });

            $('#forward_button').on('click', function (e) {

                e.preventDefault();
                e.stopPropagation();

                gantt.eachSelectedTask(function(task_id){
                    shiftTask(task_id, 1)
                });

            });

            $('#export_button').on('click', function (e) {
{#                console.log(gantt.getLinks())#}
                e.preventDefault();
                e.stopPropagation();

                gantt.exportToPNG();

            });

            $('#milestone_button').on('click', function (e) {
                e.preventDefault();
                e.stopPropagation();
                createMilestoneDialog()
            });

        });
    </script>
{% endblock extrascripts %}
