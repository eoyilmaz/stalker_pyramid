{% extends "base.jinja2" %}


{# BREADCRUMBS #}
{% block breadcrumbs %}
    {% include 'breadcrumb/breadcrumbs.jinja2' %}
{% endblock breadcrumbs %}

{#SIDEBAR#}
{% block sidebar %}
    {% set budget=entity %}
    {% include 'sidebar.jinja2' %}
{% endblock sidebar %}

{#PAGE-CONTENT#}
{% block page_content %}

    <div class="widget-box transparent invoice-box">
       {% set budget=entity %}
       {% include 'budget/view/budget_header.jinja2' %}
        <div class="widget-body">
            <div class="widget-main padding-24">

                <div class="row-fluid">
                    <div class="span12">
                        <h4 class="pull-right">
                            Total cost :
                            <span id="total_cost_top"></span>
                        </h4>
                    </div>
                </div>
                <div class="row-fluid">
                    <div class="span12">
                        <h4 class="pull-right">
                            Total price :
                            <span id="total_price_top"></span>
                        </h4>
                    </div>
                </div>
                <div class="row-fluid">
                    <div class="span12">
                        <h4 class="pull-right">
                            Approved Total Price :
                            <span id="approved_total_price">{{ approved_total_price }} TL</span>
                        </h4>
                    </div>
                </div>
                <div class="row-fluid">
{#                    <div class="span4">#}
{#                        {% set project=budget.project %}#}
{#                        {% include 'project/view/project_info.jinja2' %}#}
{#                    </div>#}
{#                    <div class="span4">#}
{#                        {% set client=budget.project.client %}#}
{#                        {% include 'client/view/client_info.jinja2' %}#}
{#                    </div>#}
                      <div id="custom_entry_button" class="btn-group pull-left">
                        <button class="btn btn-small btn-success">
                            <span class="icon-plus bigger-120"></span>
                            Custom Entry
                        </button>
                    </div>
                </div>
                <div class="space-6"></div>
                <div class="hr hr8 hr-double hr-dotted"></div>
                <div class="space-6"></div>
                <div class="row-fluid">
                    <table id="grid-table"></table>
                </div>
                <div class="space-6"></div>
                <div class="hr hr8 hr-double hr-dotted"></div>
                <div class="space-6"></div>
                <div class="row-fluid">
                    <table id="grid-table-zero"></table>
                </div>
                <div class="hr hr8 hr-double hr-dotted"></div>
                <div class="row-fluid">
                    <div class="span12">
                        <h4 class="pull-right">
                            Total price :
                            <span class="red" id="total_price_bottom"></span>
                        </h4>
                    </div>
                    {% include 'budget/view/budget_summary.jinja2' %}
                </div>
                <div class="row-fluid">
                    <div class="span12">
                        <button id='send_button'
                                class="btn btn-small btn-danger pull-right"
                                data-placement="bottom"
                                title="Send to Client"
                                >
                            <a  href="/budgets/{{ entity.id }}/generate/report?" class="white"><i class="icon-envelope bigger-130"></i> Send to Client</a>
                        </button>
                    </div>
                </div><!--/span-->
            </div>
        </div>
    </div>
{% endblock page_content %}

{% block extrascripts %}
    <script type="text/javascript">
        if("ontouchend" in document) document.write("<script src='{{ request.static_url("stalker_pyramid:static/ace/js/jquery.mobile.custom.min.js") }}'>"+"<"+"/script>");
    </script>
    <script src='{{ request.static_url("stalker_pyramid:static/jqGrid/js/i18n/grid.locale-en.js") }}'></script>
    <script src='{{ request.static_url("stalker_pyramid:static/jqGrid/js/jquery.jqGrid.js") }}'></script>
    <script src='{{ request.static_url("stalker_pyramid:static/stalker/js/accounting.min.js") }}'></script>
    <script src='{{ request.static_url("stalker_pyramid:static/codebase/dhtmlxgantt.js") }}'></script>
    <link src='{{ request.static_url("stalker_pyramid:static/jqGrid/css/ui.jqgrid-bootstrap.css") }}'/>
    <script>
        $.jgrid.defaults.autowidth = true;
        $.jgrid.defaults.responsive = true;
        $.jgrid.defaults.styleUI = 'Bootstrap';


    </script>
    <style type="text/css">
    .ui-jqgrid .ui-jqgrid-labels th.ui-th-column {
    background-color: #040404;
    color:#FFFFFF;
    height: 15px;
    background-image: none
}</style>
    <script type="text/javascript">
        $(document).ready(function () {

            $('#add_project_entries_to_budget_button').hide();
            var total_cost = 0;
            var total_msrp = 0;
            var total_price = 0;
            var grid_data;
            var good_grid_data = [];
            var lastSelection;
            var lastSelectionZero;

            var grid_selector = "#grid-table";
            var grid = jQuery(grid_selector);

            var grid_selector_zero = "#grid-table-zero";
            var grid_zero = jQuery(grid_selector_zero);

            $("#custom_entry_button").on('click', function (e) {
                 var event_dialog = $('#dialog_template');

                event_dialog.modal({
                    'remote': '{{request.route_path('create_budgetentry_dialog', _query={'mode': "Create", 'budget_id':entity.id }) }}'
                });
            });

            function editRow(id) {
                if(id){
                    var is_good = findArrayElement(good_grid_data,'id', id);
                    console.log('is_good: '+ is_good);
                    if (is_good!=-1){
                        if (id !== lastSelectionZero) {
                            grid_zero.restoreRow(lastSelectionZero);
                            var editParameters = {
                                    keys: true,
                                    successfunc: editSuccessfulGood,
                                    errorfunc: editFailed,
                                    restoreAfterError : false
                                };
                            grid_zero.jqGrid('editRow', id, editParameters);
                            lastSelectionZero = id;
                        }

                    }
                    else{
                        var is_budgetentry = findArrayElement(grid_data,'id', id);
                        console.log('is_budgetentry: '+ is_budgetentry);
                        if(is_budgetentry!=-1){
                            if (id !== lastSelection) {
                                grid.restoreRow(lastSelection);
                                var editParameters = {
                                    keys: true,
                                    successfunc: editSuccessfulBudgetEntry,
                                    errorfunc: editFailed,
                                    restoreAfterError : false
                                };
                                grid.jqGrid('editRow', id, editParameters);
                                lastSelection = id;
                            }
                        }
                    }
                }
            }

            function editSuccessfulGood(data, stat) {
                window.location.reload();
            }

            function editSuccessfulBudgetEntry(data, stat) {

                var overtime = parseFloat(getCellValue(lastSelection, 'overtime'));
                var amount = parseFloat(getCellValue(lastSelection, 'amount'));
                var second_amount = parseFloat(getCellValue(lastSelection, 'second_amount'));
                var stoppage_add = parseInt(getCellValue(lastSelection, 'stoppage_add'));
                var price = parseFloat(getCellValue(lastSelection, 'price'));

                var selected_data = recalculateGridData(grid_data, lastSelection, amount, second_amount, overtime, stoppage_add, price);

                grid.jqGrid('setGridParam',
                                    {
                                        datatype: 'local',
                                        data:grid_data
                                    })
                                .trigger("reloadGrid");

                flash_message({
                    type: "success",
                    title: "Success!",
                    message: data.responseText
                });
                grid.restoreRow(lastSelection);
                return [true,"",""];
            }



            function editFailed(rowID, response) {
                $.jgrid.info_dialog($.jgrid.errors.errcap,'<div class="ui-state-error">RowID:'+rowID+ ' :  '+ response.responseJSON.error +'</div>', $.jgrid.edit.bClose,{buttonalign:'right'})
                alert(response.responseJSON.error);
            }

            function currencyFmatter (cellvalue, options, rowObject){

               return accounting.formatMoney(cellvalue, { symbol: "TL",  format: "%v %s", precision:0 });
            }

            function  unformatCurrency (cellvalue, options){
               return accounting.unformat(cellvalue);
            }

            function unitFmatter (cellvalue, options, rowObject){
                var index = findArrayElement(grid_data,'id', options.rowId);

                return grid_data[index].amount+" "+ grid_data[index].unit;
            }

            function  unformatUnit (cellvalue, options, rowObject){
                var index = findArrayElement(grid_data,'id', options.rowId);
                return grid_data[index].amount;
            }

            function editableFormater (cellvalue, options, rowObject){
                if(rowObject.addition_type == "Calendar" && (options.colModel.index=="amount" || options.colModel.index=="second_amount")){
                    options.colModel.editable = false;
                }
            }

            function secondUnitFmatter (cellvalue, options, rowObject){
                var index = findArrayElement(grid_data,'id', options.rowId);
                return grid_data[index].second_amount+" "+ grid_data[index].second_unit;
            }

            function  secondUnformatUnit (cellvalue, options, rowObject){
                var index = findArrayElement(grid_data,'id', options.rowId);
                return grid_data[index].second_amount;
            }

            function unitFmatterZero (cellvalue, options, rowObject){
                var index = findArrayElement(good_grid_data,'id', options.rowId);
                return good_grid_data[index].amount+" "+ good_grid_data[index].unit;
            }

            function  unformatUnitZero (cellvalue, options, rowObject){
                var index = findArrayElement(good_grid_data,'id', options.rowId);
                return good_grid_data[index].amount;
            }

            function secondUnitFmatterZero (cellvalue, options, rowObject){
                var index = findArrayElement(good_grid_data,'id', options.rowId);
                return good_grid_data[index].second_amount+" "+ good_grid_data[index].second_unit;
            }

            function  secondUnformatUnitZero (cellvalue, options, rowObject){
                var index = findArrayElement(good_grid_data,'id', options.rowId);
                return good_grid_data[index].second_amount;
            }

            function gridLoadComplete() {
                calculateTotals();
                setTimeout(function(){
                    $('#lui_grid-table').hide();
                }, 0);
            }

            function getCellValue(rowId, cellId) {
                var cell = jQuery('#' + rowId + '_' + cellId);
                var val = cell.val();
                return val;
            }

            function recalculateGridData(array, id, amount_value, second_amount_value, overtime_value, stoppage_add_value, price_value){
                var index = findArrayElement(array, 'id', id);

                var selected_data = array[index];
                if (selected_data.addition_type != "Calendar"){
                    selected_data.addition_type = "Producer";
                    selected_data.amount = amount_value;
                    selected_data.second_amount = second_amount_value;
                }

                selected_data.overtime  = overtime_value;
                selected_data.stoppage_add = stoppage_add_value;
                selected_data.price  = price_value;

                selected_data.total_cost = selected_data.cost * (selected_data.amount*selected_data.second_amount + selected_data.overtime);
                selected_data.total_msrp = selected_data.msrp * (selected_data.amount*selected_data.second_amount + selected_data.overtime);
                selected_data.overtime_cost = selected_data.cost * selected_data.overtime;

                selected_data.stoppage_cost = selected_data.stoppage_add*selected_data.stoppage_ratio * selected_data.total_cost;
                selected_data.stoppage_msrp = selected_data.stoppage_add*selected_data.stoppage_ratio * selected_data.total_msrp;

                selected_data.total_cost = selected_data.total_cost + selected_data.stoppage_cost;
                selected_data.total_msrp = selected_data.total_msrp + selected_data.stoppage_msrp;

                array[index] = selected_data;

                return selected_data;
            }

            function calculateTotals(){

                total_cost = 0;
                total_msrp = 0;
                total_price = 0;

                for(var t=0; t<grid_data.length; t++ ){

                    if(grid_data[t].total_cost>grid_data[t].price){
                        grid.jqGrid('setCell', grid_data[t].id, 'price', grid_data[t].price, {color:'red'});
                    }
                    else if(grid_data[t].total_cost<grid_data[t].price){
                        grid.jqGrid('setCell', grid_data[t].id, 'price', grid_data[t].price, {color:'green'});
                    }

                    total_msrp += parseInt(grid_data[t].total_msrp);
                    total_cost += parseInt(grid_data[t].total_cost);
                    total_price += parseInt(grid_data[t].price);
                }

                if(total_cost>total_price){
                    grid.jqGrid('setCell', 'TOTAL', 'price','', {color:'red'});
                }
                else if(total_cost<total_price){
                    grid.jqGrid('setCell', 'TOTAL', 'price','', {color:'green'});
                }

                grid.jqGrid("footerData", "set", {
                                                   total_msrp: total_msrp,
                                                   total_cost: total_cost,
                                                   price: total_price,
                                                   unit:'TOTAL'
                });

                $('#total_cost_top').text(accounting.formatMoney(total_cost, { symbol: "TL",  format: "%v %s" }));
                $('#total_price_top').text(accounting.formatMoney(total_price, { symbol: "TL",  format: "%v %s" }));
                $('#approved_total_price').text(accounting.formatMoney({{ approved_total_price }}, { symbol: "TL",  format: "%v %s" }));
                if (total_cost <= total_price){
                    $('#total_price_top').attr('style', "color: green");
                }
                else{
                    $('#total_price_top').attr('style', "color: red");
                }

                $('#total_price_bottom').text(accounting.formatMoney(total_price, { symbol: "TL",  format: "%v %s" }));

                $.post(
                    '/budgets/{{ entity.id }}/set/totals?total_cost='+total_cost+'&total_price='+total_price
                ).done(function (response_text) {

                       flash_message({
                            type: "success",
                            title: "Success!",
                            message: response_text
                        });

                }).fail(function (jqXHR) {
                    bootbox.alert('<div id="message" class="alert alert-danger bigger-110">'+jqXHR.responseText+'</div>');
                });
            }

            $.getJSON('/budgets/{{ entity.id }}/entries/').then(function (entry_data) {

                grid_data = entry_data;

                for(var j=0; j<grid_data.length; j++ ){
{#                    grid_data[j].id = "budgetentry_" + grid_data[j].id;#}
                    grid_data[j].delete_action = "<a data-target='#dialog_template' data-toggle='modal' data-keyboard=false href='/budgetentries/"+grid_data[j].id+"/delete/dialog'> <i class='icon-trash'></i></a>"
                    grid_data[j].addition_type = grid_data[j].generic_data.dataSource;

                    grid_data[j].unit = grid_data[j].unit.split('*')[0];

                    var secondaryFactor = grid_data[j].generic_data.secondaryFactor;
                    if (secondaryFactor.unit){
                        grid_data[j].second_unit = secondaryFactor.unit;
                        grid_data[j].second_amount = secondaryFactor.second_amount;
                    }
                    else{
                        grid_data[j].second_unit = secondaryFactor[0].unit;
                        grid_data[j].second_amount = 0;

                        for(var t=0; t < secondaryFactor.length; t++){
                            grid_data[j].second_amount += parseInt(secondaryFactor[t].second_amount)
                        }
                    }

                    grid_data[j].amount = grid_data[j].amount/grid_data[j].second_amount;

                    grid_data[j].overtime = grid_data[j].generic_data.overtime;
                    grid_data[j].overtime_cost = grid_data[j].overtime * grid_data[j].cost;

                    grid_data[j].stoppage_cost = 0;
                    grid_data[j].stoppage_msrp = 0;
                    grid_data[j].stoppage_add = grid_data[j].generic_data.stoppage_add;

                    if(grid_data[j].good_generic_data.stopage_ratio){
                        grid_data[j].stoppage_ratio = parseFloat(grid_data[j].good_generic_data.stopage_ratio);
                    }
                    else{
                        grid_data[j].stoppage_ratio = 0;
                    }

                    if (grid_data[j].stoppage_add == '1'){
                        grid_data[j].stoppage_cost = grid_data[j].stoppage_ratio * grid_data[j].cost * (grid_data[j].amount*grid_data[j].second_amount+grid_data[j].overtime);
                        grid_data[j].stoppage_msrp = grid_data[j].stoppage_ratio * grid_data[j].msrp * (grid_data[j].amount*grid_data[j].second_amount+grid_data[j].overtime);
                    }

                    grid_data[j].total_msrp = grid_data[j].msrp * (grid_data[j].amount * grid_data[j].second_amount+grid_data[j].overtime) + grid_data[j].stoppage_msrp;
                    grid_data[j].total_cost = grid_data[j].cost * (grid_data[j].amount * grid_data[j].second_amount+grid_data[j].overtime) + grid_data[j].stoppage_cost;

                }

{#                $('#total_price').text(accounting.formatMoney(total_price, { symbol: "TL",  format: "%v %s" }));#}

                {% if entity.status.code == 'PLN'  %}

                    jQuery(function($) {
                        grid.jqGrid({
                            //direction: "rtl",
                            data: grid_data,
                            datatype: "local",
                            colNames:['Addition Type', 'Type', 'Id', 'Name','Birim', 'X', 'Cost_PerHour', 'BİRİM FİYAT', 'Mesai', 'MESAİ TUTARI', 'STOPAJ','STOPAJ TUTARI','Msrp_PerHour', 'TOPLAM MALİYET', 'TOPLAM', 'NOTLAR',''],
                            colModel:[
                                {name:'addition_type', index:'addition_type', width:100, editable: false,hidden: true},
                                {name:'type', index:'type', width:220, editable: false, hidden: true},
                                {name:'id', index:'id', width:100, editable: false, hidden: true},
                                {name:'name', index:'name', width:220, editable: false},
                                {name:'amount', index:'amount', width:70, editable: true, formatter:unitFmatter,unformat:unformatUnit},
                                {name:'second_amount', index:'second_amount', width:70, editable: true, formatter:secondUnitFmatter,unformat:secondUnformatUnit},
                                {name:'cost', index:'cost', width:80, editable: false,  hidden: true},
                                {name:'total_cost', index:'total_cost', width:80, editable: false, formatter:currencyFmatter, summaryTpl: "{0}", summaryType: "sum" },
                                {name:'overtime', index:'overtime', width:100, editable: true},
                                {name:'overtime_cost', index:'overtime_cost', width:100, editable: false, formatter:currencyFmatter, summaryTpl: "{0}", summaryType: "sum" },
                                {name:'stoppage_add', index:'stoppage_add', width:100, editable: true, edittype:"select", editoptions:{value:"1:1;0:0"}},
                                {name:'stoppage_cost', index:'stoppage_cost', width:100, editable: false, formatter:currencyFmatter, summaryTpl: "{0}", summaryType: "sum" },
    {#                                {name:'realized_total',index:'realized_total',  width:150, editable: false,formatter:currencyFmatter, summaryTpl: "{0}", summaryType: "sum" },#}
                                {name:'msrp', index:'msrp', width:80, editable: true,  hidden: true},
                                {name:'total_msrp', index:'total_msrp', width:150, editable: false, formatter:currencyFmatter, summaryTpl: "{0}", summaryType: "sum" },
                                {name:'price', index:'price', width:150, sortable:true, editable: true, editoptions:{size:"20",maxlength:"30"} , formatter:currencyFmatter, unformat:unformatCurrency, summaryTpl: "{0}", summaryType: "sum" },
                                {name:'note', index:'note', width:150, sortable:false, editable: true, edittype:"textarea", editoptions:{size:"20", maxlength:"80"}},
                                {name:'delete_action', index:'delete_action', width:60, editable: false}
                             ],
                            viewrecords : true,
                            rowNum:grid_data.length,
                            rowList:[grid_data.length, 10, 10],
                            pager : false,
                            altRows: true,
                            multiselect: false,
                            loadonce: false,
                            sortname: 'addition_type',
                            height: 'auto',
                            autowidth: true,
                            footerrow: true,
                            userDataOnFooter: true,
                            grouping: true,
                            groupingView : {
                                groupField : ['type'],
                                groupColumnShow : [true],
                                groupText : ['<h4>{0}: {price} TL</h4>', '{0} {price}'],
                                groupCollapse : false,
                                groupOrder: ['asc'],
                                groupSummary : [true],
                                showSummaryOnHide: true,
                                groupDataSorted : true
                            },
                            gridview: true,
                            editurl: '/budgetentries/edit?budget_id={{ entity.id }}',
                            caption: "",
                            onSelectRow: editRow,
                            loadComplete : gridLoadComplete
                        });
                    });

                    $.getJSON('/studios/{{ entity.id }}/goods/').then(function (good_data) {

                        for(var k=0; k<good_data.length; k++ ){

                            var add_grid_data = true;
                            for(var m=0; m<grid_data.length; m++ ){
                                if(good_data[k].name == grid_data[m].name || good_data[k].type_name == 'Custom'){
                                    add_grid_data = false;
                                }
                            }

                            if(add_grid_data){
                                console.log('good_data[k].name: '+ good_data[k].name);
                                good_grid_data.push({
                                                    'budget_id': '{{ entity.id }}',
                                                    'good_id':good_data[k].id,
                                                    'id':good_data[k].id,
                                                    'type':good_data[k].price_list_name,
                                                    'name':good_data[k].name,
                                                    'amount':0,
                                                    'second_amount':0,
                                                    'unit':good_data[k].unit.split('*')[0],
                                                    'second_unit':good_data[k].unit.split('*')[1],
                                                    'msrp':good_data[k].msrp,
                                                    'total_msrp':0,
                                                    'cost':good_data[k].cost,
                                                    'total_cost':0,
                                                    'realized Total':0,
                                                    'overtime':0,
                                                    'overtime_cost':0,
                                                    'stoppage_cost': 0,
                                                    'stoppage_msrp': 0,
                                                    'stoppage_add': '0',
                                                    'stoppage_ratio': good_data[k].stopage_ratio,
                                                    'price':0,
                                                    'note':'',
                                                    'addition_type':''})
                            }
                        }

                        jQuery(function($) {
                            grid_zero.jqGrid({
                                //direction: "rtl",
                                data: good_grid_data,
                                datatype: "local",
                                colNames:['Addition Type', 'Type', 'Id', 'Name','Amount I', 'Amount II', 'Msrp_PerHour', 'Msrp', 'Cost_PerHour', 'Cost', 'Overtime', 'Overtime Cost', 'Stoppage','Stoppage Cost','Price', 'Notes',''],
                                colModel:[
                                    {name:'addition_type', index:'addition_type', width:100, editable: false},
                                    {name:'type', index:'type', width:220, editable: false},
                                    {name:'id', index:'id', width:100, editable: false, hidden: true},
                                    {name:'name', index:'name', width:220, editable: false},
                                    {name:'amount', index:'amount', width:70, editable: true, formatter:unitFmatterZero,unformat:unformatUnitZero},
                                    {name:'second_amount', index:'second_amount', width:70, editable: true, formatter:secondUnitFmatterZero,unformat:secondUnformatUnitZero},
                                    {name:'msrp', index:'msrp', width:100, editable: true,  hidden: true},
                                    {name:'total_msrp', index:'total_msrp', width:100, editable: false, formatter:currencyFmatter, summaryTpl: "{0}", summaryType: "sum" },
                                    {name:'cost', index:'cost', width:100, editable: true,  hidden: true},
                                    {name:'total_cost', index:'total_cost', width:100, editable: false, formatter:currencyFmatter, summaryTpl: "{0}", summaryType: "sum" },
                                    {name:'overtime', index:'overtime', width:100, editable: true},
                                    {name:'overtime_cost', index:'overtime_cost', width:100, editable: false, formatter:currencyFmatter, summaryTpl: "{0}", summaryType: "sum" },
                                    {name:'stoppage_add', index:'stoppage_add', width:100, editable: true, edittype:"select", editoptions:{value:"1:1;0:0"}},
                                    {name:'stoppage_cost', index:'stoppage_cost', width:100, editable: false, formatter:currencyFmatter, summaryTpl: "{0}", summaryType: "sum" },
        {#                                {name:'realized_total',index:'realized_total',  width:150, editable: false,formatter:currencyFmatter, summaryTpl: "{0}", summaryType: "sum" },#}
                                    {name:'price', index:'price', width:150, sortable:true, editable: true, editoptions:{size:"20",maxlength:"30"} , formatter:currencyFmatter, unformat:unformatCurrency, summaryTpl: "{0}", summaryType: "sum" },
                                    {name:'note', index:'note', width:200, sortable:false, editable: true, edittype:"textarea", editoptions:{size:"20", maxlength:"80"}},
                                    {name:'delete_action', index:'delete_action', width:60, editable: false}
                                 ],
                                viewrecords : true,
                                rowNum:good_grid_data.length,
                                rowList:[good_grid_data.length, 10, 10],
                                pager : false,
                                altRows: true,
                                multiselect: false,
                                loadonce: false,
                                sortname: 'addition_type',
                                height: 'auto',
                                autowidth: true,
                                footerrow: true,
                                userDataOnFooter: true,
                                grouping: true,
                                groupingView : {
                                    groupField : ['type'],
                                    groupColumnShow : [true],
                                    groupText : ['<b>{0}</b>', '{0}'],
                                    groupCollapse : false,
                                    groupOrder: ['asc'],
                                    groupSummary : [true],
                                    showSummaryOnHide: true,
                                    groupDataSorted : true
                                },
                                editurl: '/budgetentries/edit?budget_id={{ entity.id }}',
                                caption: "",
                                onSelectRow: editRow
                            });
                        });

                    });
                {% else  %}

                    {% if entity.status.code == 'APP'  %}
                         $('#approved_total_price').text(accounting.formatMoney('{{ approved_total_price }}', { symbol: "TL",  format: "%v %s" }));
                    {% endif %}
                    $('#send_button').hide();

                    jQuery(function($) {
                        grid.jqGrid({
                            //direction: "rtl",
                            data: grid_data,
                            datatype: "local",
                            colNames:['Addition Type', 'Type', 'Name','Amount', 'Second Amount','Unit', 'Msrp', 'Cost', 'Overtime','Overtime Cost','Stoppage','Stoppage Cost', 'Price', 'Notes'],
                            colModel:[
                                {name:'addition_type', index:'addition_type', width:100, editable: false},
                                {name:'type', index:'type', width:220, editable: false},
                                {name:'name', index:'name', width:220, editable: false},
                                {name:'amount', index:'amount', width:60, editable: false},
                                {name:'second_amount', index:'second_amount', width:60, editable: false},
                                {name:'unit', index:'unit', width:100, editable: false},
                                {name:'total_msrp', index:'total_msrp', width:100, editable: false, formatter:currencyFmatter, summaryTpl: "{0}", summaryType: "sum" },
                                {name:'total_cost', index:'total_cost', width:100, editable: false, formatter:currencyFmatter, summaryTpl: "{0}", summaryType: "sum" },
                                {name:'overtime', index:'overtime', width:100, editable: false},
                                {name:'overtime_cost', index:'overtime_cost', width:100, editable: false, formatter:currencyFmatter, summaryTpl: "{0}", summaryType: "sum" },
                                {name:'stoppage_add', index:'stoppage_add', width:100, editable: false},
                                {name:'stoppage_cost', index:'stoppage_cost', width:100, editable: false, formatter:currencyFmatter, summaryTpl: "{0}", summaryType: "sum" },
                                {name:'price', index:'price', width:150, editable: false, formatter:currencyFmatter, unformat:unformatCurrency, summaryTpl: "{0}", summaryType: "sum" },
                                {name:'note', index:'note', width:200, sortable:false, editable: false}
                            ],
                            viewrecords : true,
                            rowNum:grid_data.length,
                            rowList:[grid_data.length, 10, 10],
                            pager : false,
                            altRows: true,
                            multiselect: false,
                            loadonce: false,
                            height: 'auto',
                            autowidth: true,
                            sortname: 'addition_type',
                            footerrow: true, // set a footer row
                            userDataOnFooter: true, // the calculated sums and/or strings from server are put at footer row.
                            grouping: true,
                            groupingView: {
                                groupField: ["type"],
                                groupColumnShow: [false],
                                groupText: ["<b>{0}</b>"],
                                groupOrder: ["desc","desc","desc"],
                                groupSummary: [true],
                                groupCollapse: false
                            },
                            gridview: true,
                            caption: "",
                            loadComplete : gridLoadComplete
                        });
                    });

                {% endif %}
            });
        });
    </script>
{% endblock extrascripts %}

