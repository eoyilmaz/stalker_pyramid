{# Stalker Pyramid a Web Base Production Asset Management System
 Copyright (C) 2009-2014 Erkan Ozgur Yilmaz

 This file is part of Stalker Pyramid.

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation;
 version 2.1 of the License.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
#}


{% extends "base.jinja2" %}

{% block pre_header %}

{% endblock pre_header %}

{# BREADCRUMBS #}
{% block breadcrumbs %}
    {% include 'breadcrumb/breadcrumbs.jinja2' %}
{% endblock breadcrumbs %}

{#SIDEBAR#}
{% block sidebar %}
    {% include 'sidebar.jinja2' %}
{% endblock sidebar %}

{#PAGE-CONTENT#}
{% block page_content %}

    {% set page_title=entity.name %}
    {% include 'page_header.jinja2' %}

    <div class="row-fluid">
        <div class="span12">
            <div class="widget-box">
                 <div class="widget-header widget-header-small header-color-green }}">
                        <h5 id="items_header" class="smaller"></h5>
                        <div class="widget-toolbar">
    {#                  {% if has_permission('Create_'+list_item_type) and  add_button_address %}#}
                            <a data-target="#dialog_template"
                               data-toggle="modal"
                               data-keyboard=false
                               href="{{ request.route_url("create_budgetentry_dialog", id=-1, _query={'budget_id': entity.id })}}"
                               class="white">
                                <i class="icon-plus"></i>
                                Add New Entry
                            </a>

                        </div>
                        <div class="widget-toolbar">
    {#                  {% if has_permission('Create_'+list_item_type) and  add_button_address %}#}
                            <a id='add_project_entries_to_budget_button' href="#"
                               class="white">
                                <i class="icon-plus"></i>
                                Add Project Defaults
                            </a>

                        </div>
                </div>
                <div class="widget-body">
                    <div class="widget-main no-padding">
    {#                    <div id="loading_spinner" class="well well-sm">#}
    {##}
    {#                        <div class="inline middle blue bigger-110"><i#}
    {#                                class="icon-spinner icon-spin orange bigger-125"></i>#}
    {#                            Loading#}
    {#                            content...#}
    {#                        </div>#}
    {#                    </div>#}

                        <table id="grid-table"></table>
                        <div id="grid-pager"></div>
                        <script type="text/javascript">
                            var $path_base = "/";//this will be used in gritter alerts containing images
                        </script>

                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock page_content %}

{% block extrascripts %}
    <script type="text/javascript">
			if("ontouchend" in document) document.write("<script src='{{ request.static_url("stalker_pyramid:static/ace/js/jquery.mobile.custom.min.js") }}'>"+"<"+"/script>");
		</script>
    <script src='{{ request.static_url("stalker_pyramid:static/jqGrid/js/i18n/grid.locale-en.js") }}'></script>
    <script src='{{ request.static_url("stalker_pyramid:static/jqGrid/js/jquery.jqGrid.min.js") }}'></script>
    <script src='{{ request.static_url("stalker_pyramid:static/stalker/js/accounting.min.js") }}'></script>
    <script type="text/javascript">
        $(document).ready(function () {

            $('#add_project_entries_to_budget_button').on('click', function (e) {
                e.preventDefault();
                e.stopPropagation();

                $.post('{{ request.route_url("add_project_entries_to_budget", id=entity.project.id, bid=entity.id)}}').done(function (response_text) {
                    window.location.reload();
                }).fail(function (jqXHR) {
                    bootbox.alert(jqXHR.responseText);
                });
            });

            $.getJSON('/budgets/{{ entity.id }}/entries/').then(function (entry_data) {

                var grid_data = entry_data;
                var total_cost = 0;
                var total_msrp = 0;
                var total_realized = 0;
                var total_price = 0;
                for(var j=0; j<grid_data.length; j++ ){
                    grid_data[j].msrp = grid_data[j].msrp*grid_data[j].amount;
                    total_msrp += parseInt(grid_data[j].msrp);
                    grid_data[j].cost = grid_data[j].cost*grid_data[j].amount;
                    total_cost += parseInt(grid_data[j].cost);
                    total_realized += parseInt(grid_data[j].realized_total);
                    total_price += parseInt(grid_data[j].price);
                }
                $.getJSON('/studios/{{ entity.id }}/goods/').then(function (good_data) {

                    for(var k=0; k<good_data.length; k++ ){

                        var add_grid_data = true;
                        for(var m=0; m<grid_data.length; m++ ){
                            if(good_data[k].name == grid_data[m].name ){
                                add_grid_data = false;
                            }
                        }
                        if(add_grid_data){
                            grid_data.push({    'budget_id': '{{ entity.id }}',
                                                'good_id':good_data[k].id,
                                                'id':good_data[k].id,
                                                'type':"XX",
                                                'name':good_data[k].name,
                                                'amount':0,
                                                'unit':good_data[k].unit,
                                                'msrp':0,
                                                'cost':0,
                                                'realized Total':0,
                                                'price':0,
                                                'note':''})
                        }

                    }
                    jQuery(function($) {
                        var grid_selector = "#grid-table";
                        var pager_selector = "#grid-pager";

                        var budget_grid = jQuery(grid_selector).jqGrid({
                            //direction: "rtl",
                            data: grid_data,
                            datatype: "local",
                            colNames:[' ', 'Id', 'Type', 'Name','Amount', 'Unit', 'Msrp', 'Cost', 'Realized Total', 'Price', 'Notes'],
                            colModel:[
                                {
                                    name:'myac',
                                    index:'',
                                    width:80,
                                    fixed:true,
                                    sortable:false,
                                    resize:false,
                                    formatter:'actions',
                                    formatoptions:{
                                                keys:false,
                                                delOptions:{recreateForm: true, beforeShowForm:beforeDeleteCallback}
                {#                                editformbutton:true, editOptions:{recreateForm: true, beforeShowForm:beforeEditCallback}#}
                                            }
                                },
                                {name:'id',index:'id', width:100, editable: false},
                                {name:'type',index:'type', width:220, editable: false},
                                {name:'name',index:'name', width:220, editable: false},
                                {name:'amount',index:'amount', width:100,editable: true},
                                {name:'unit',index:'unit', width:100, editable: false},
                                {name:'msrp',index:'msrp',  width:150,editable: false,formatter:currencyFmatter, summaryTpl: "{0}", summaryType: "sum" },
                                {name:'cost',index:'cost',  width:150,editable: false,formatter:currencyFmatter, summaryTpl: "{0}", summaryType: "sum" },
                                {name:'realized_total',index:'realized_total',  width:150,editable: false,formatter:currencyFmatter, summaryTpl: "{0}", summaryType: "sum" },
                                {name:'price',index:'price', width:150, editable: true, edittype:"textarea",editoptions:{size:"20",maxlength:"80"} , formatter:currencyFmatter, unformat:unformatCurrency, summaryTpl: "{0}", summaryType: "sum" },
                                {name:'note',index:'note', width:470, sortable:false, editable: true, edittype:"textarea", editoptions:{size:"20",maxlength:"80"}}
                            ],
                            viewrecords : true,
                            rowNum:grid_data.length,
                            rowList:[grid_data.length, 10, 10],
                            pager : pager_selector,
                            altRows: true,
        {#                    toppager: true,#}
                            multiselect: false,
    {#                        multikey: "ctrlKey",#}

                            loadonce: true,
                            height: grid_data.length*90,
    {#                        width: 800,#}
                            footerrow: true, // set a footer row
                            userDataOnFooter: true, // the calculated sums and/or strings from server are put at footer row.
                            grouping: true,
                            groupingView: {
                                groupField: ["type"],
                                groupColumnShow: [true],
                                groupText: ["<b>{0}</b>"],
                                groupOrder: ["asc"],
                                groupSummary: [true],
                                groupCollapse: false

                            },
                            editurl: '/budgetentries/edit?budget_id={{ entity.id }}',
                            caption: "",

                            loadComplete : function() {
                                var $self = $(this)
    {#                            total_msrp = $self.jqGrid("getCol", "msrp", false, "sum");#}
    {#                            total_cost = $self.jqGrid("getCol", "cost", false, "sum"),#}
    {#                            total_realized_total = $self.jqGrid("getCol", "realized_total", false, "sum"),#}
    {#                            total_price = $self.jqGrid("getCol", "price", false, "sum");#}
                                $self.jqGrid("footerData", "set", {msrp: total_msrp,cost: total_cost,realized_total: total_realized,price: total_price});



                                var table = this;
                                setTimeout(function(){
                                    styleCheckbox(table);
                                    updateActionIcons(table);
                                    updatePagerIcons(table);
{#                                    enableTooltips(table);#}

                                    $('#lui_grid-table').hide();
                                }, 0);
                            }



                    });


                    //navButtons
                    jQuery(grid_selector).jqGrid('navGrid',pager_selector,
                        { 	//navbar options
                            edit: true,
                            editicon : 'icon-pencil blue',
                            add: false,
                            addicon : 'icon-plus-sign purple',
                            del: true,
                            delicon : 'icon-trash red',
                            search: true,
                            searchicon : 'icon-search orange',
                            refresh: true,
                            refreshicon : 'icon-refresh green',
                            view: true,
                            viewicon : 'icon-zoom-in grey'
                        },
                        {
                            //edit record form
                            closeAfterEdit: true,
                            recreateForm: true,
                            beforeShowForm : function(e) {
                                var form = $(e[0]);
                                form.closest('.ui-jqdialog').find('.ui-jqdialog-titlebar').wrapInner('<div class="widget-header" />')
                                style_edit_form(form);
                            }
                        },
                        {
                            //new record form
                            closeAfterAdd: true,
                            recreateForm: true,
                            viewPagerButtons: false,
                            beforeShowForm : function(e) {
                                var form = $(e[0]);
                                form.closest('.ui-jqdialog').find('.ui-jqdialog-titlebar').wrapInner('<div class="widget-header" />')
                                style_edit_form(form);
                            }
                        },
                        {
                            //delete record form
                            recreateForm: true,
                            beforeShowForm : function(e) {
                                var form = $(e[0]);
                                if(form.data('styled')) return false;

                                form.closest('.ui-jqdialog').find('.ui-jqdialog-titlebar').wrapInner('<div class="widget-header" />')
                                style_delete_form(form);

                                form.data('styled', true);
                            },
                            onClick : function(e) {
                                console.log('onClick')
                                alert(1);
                            }
                        },
                        {
                            //search form
                            recreateForm: true,
                            afterShowSearch: function(e){
                                var form = $(e[0]);
                                form.closest('.ui-jqdialog').find('.ui-jqdialog-title').wrap('<div class="widget-header" />')
                                style_search_form(form);
                            },
                            afterRedraw: function(){
                                style_search_filters($(this));
                            }
                            ,
                            multipleSearch: true
                            /**
                            multipleGroup:true,
                            showQuery: true
                            */
                        },
                        {
                            //view record form
                            recreateForm: true,
                            beforeShowForm: function(e){
                                var form = $(e[0]);
                                form.closest('.ui-jqdialog').find('.ui-jqdialog-title').wrap('<div class="widget-header" />')
                            }
                        }
                    );

                    function currencyFmatter (cellvalue, options, rowObject)
                    {
                       return accounting.formatMoney(cellvalue, { symbol: "TL",  format: "%v %s" });;
                    }
                    function  unformatCurrency (cellvalue, options)
                    {
                       return accounting.unformat(cellvalue);
                    }
                    function style_edit_form(form) {
                        //enable datepicker on "sdate" field and switches for "unit" field
                        form.find('input[name=sdate]').datepicker({format:'yyyy-mm-dd' , autoclose:true})
                            .end().find('input[name=unit]')
                                  .addClass('ace ace-switch ace-switch-5').wrap('<label class="inline" />').after('<span class="lbl"></span>');

                        //update buttons classes
                        var buttons = form.next().find('.EditButton .fm-button');
                        buttons.addClass('btn btn-small').find('[class*="-icon"]').remove();//ui-icon, s-icon
                        buttons.eq(0).addClass('btn-primary').prepend('<i class="icon-ok"></i>');
                        buttons.eq(1).prepend('<i class="icon-remove"></i>')

                        buttons = form.next().find('.navButton a');
                        buttons.find('.ui-icon').remove();
                        buttons.eq(0).append('<i class="icon-chevron-left"></i>');
                        buttons.eq(1).append('<i class="icon-chevron-right"></i>');
                    }
                    function style_delete_form(form) {
                        var buttons = form.next().find('.EditButton .fm-button');
                        buttons.addClass('btn btn-small').find('[class*="-icon"]').remove();//ui-icon, s-icon
                        buttons.eq(0).addClass('btn-danger').prepend('<i class="icon-trash"></i>');
                        buttons.eq(1).prepend('<i class="icon-remove"></i>')
                    }
                    function style_search_filters(form) {
                        form.find('.delete-rule').val('X');
                        form.find('.add-rule').addClass('btn btn-small btn-primary');
                        form.find('.add-group').addClass('btn btn-small btn-success');
                        form.find('.delete-group').addClass('btn btn-small btn-danger');
                    }
                    function style_search_form(form) {
                        var dialog = form.closest('.ui-jqdialog');
                        var buttons = dialog.find('.EditTable')
                        buttons.find('.EditButton a[id*="_reset"]').addClass('btn btn-small btn-info').find('.ui-icon').attr('class', 'icon-retweet');
                        buttons.find('.EditButton a[id*="_query"]').addClass('btn btn-small btn-inverse').find('.ui-icon').attr('class', 'icon-comment-alt');
                        buttons.find('.EditButton a[id*="_search"]').addClass('btn btn-small btn-purple').find('.ui-icon').attr('class', 'icon-search');
                    }

                    function beforeDeleteCallback(e) {
                        var form = $(e[0]);
                        if(form.data('styled')) return false;

                        form.closest('.ui-jqdialog').find('.ui-jqdialog-titlebar').wrapInner('<div class="widget-header" />')
                        style_delete_form(form);

                        form.data('styled', true);
                    }

                    function beforeEditCallback(e) {
                        var form = $(e[0]);
                        form.closest('.ui-jqdialog').find('.ui-jqdialog-titlebar').wrapInner('<div class="widget-header" />')
                        style_edit_form(form);
                    }



                    //it causes some flicker when reloading or navigating grid
                    //it may be possible to have some custom formatter to do this as the grid is being created to prevent this
                    //or go back to default browser checkbox styles for the grid
                    function styleCheckbox(table) {
                    /**
                        $(table).find('input:checkbox').addClass('ace')
                        .wrap('<label />')
                        .after('<span class="lbl align-top" />')


                        $('.ui-jqgrid-labels th[id*="_cb"]:first-child')
                        .find('input.cbox[type=checkbox]').addClass('ace')
                        .wrap('<label />').after('<span class="lbl align-top" />');
                    */
                    }


                    //unlike navButtons icons, action icons in rows seem to be hard-coded
                    //you can change them like this in here if you want
                    function updateActionIcons(table) {


                        var replacement =
                        {
                            'ui-icon-pencil' : 'icon-pencil blue',
                            'ui-icon-trash' : 'icon-trash red',
                            'ui-icon-disk' : 'icon-ok green',
                            'ui-icon-cancel' : 'icon-remove red'
                        };
                        $(table).find('.ui-pg-div span.ui-icon').each(function(){
                            var icon = $(this);
                            var $class = $.trim(icon.attr('class').replace('ui-icon', ''));
                            if($class in replacement) icon.attr('class', 'ui-icon '+replacement[$class]);
                        })

                    }

                    //replace icons with FontAwesome icons like above
                    function updatePagerIcons(table) {

                        var replacement =
                        {
                            'ui-icon-seek-first' : 'icon-double-angle-left bigger-140',
                            'ui-icon-seek-prev' : 'icon-angle-left bigger-140',
                            'ui-icon-seek-next' : 'icon-angle-right bigger-140',
                            'ui-icon-seek-end' : 'icon-double-angle-right bigger-140'
                        };
                        $('.ui-pg-table:not(.navtable) > tbody > tr > .ui-pg-button > .ui-icon').each(function(){

                            var icon = $(this);
                            var $class = $.trim(icon.attr('class').replace('ui-icon', ''));

                            if($class in replacement) icon.attr('class', 'ui-icon '+replacement[$class]);
                        })
                    }

{#                    function enableTooltips(table) {#}
{##}
{#                        $('.navtable .ui-pg-button').tooltip({container:'body'});#}
{#                        $(table).find('.ui-pg-div').tooltip({container:'body'});#}
{##}
{#                    }#}


                });
               });
            });
        });
    </script>
{% endblock extrascripts %}


