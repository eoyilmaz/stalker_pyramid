
<div class="row-fluid">

    <div class="span2">
        <select id='task_type' class='input-block-level'>
                <option value="Animation">Animation</option>
                <option value="Lighting">Lighting</option>
                <option value="Comp">Comp</option>
                <option value="Camera">Camera</option>
                <option value="Scene Assembly">Scene Assembly</option>
                <option value="Shot Previs">Shot Previs</option>
                <option value="Render">Full Render</option>
                <option value="FX">FX</option>
        </select>
    </div>

    <div class="span2">
        <select id='select_resource_cb' class='input-block-level'>
        </select>
    </div>
    <div class="span2">
        <select id='select_seq_cb' class='input-block-level'>
        </select>
    </div>
    <div class="span2 pull-right">
        <select id='project_cb' class='input-block-level'>
        </select>
    </div>
</div>


<div class="row-fluid">
    <div class="span12" id="result_table">
    </div>
</div>

<script class="include" type="text/javascript"
            src='{{ request.static_url("stalker_pyramid:static/jqPlot/jquery.jqplot.min.js") }}'></script>
<!-- End Don't touch this! -->

<!-- Additional plugins go here -->

<script src='{{ request.static_url("stalker_pyramid:static/jqGrid/js/i18n/grid.locale-en.js") }}'></script>
<script src='{{ request.static_url("stalker_pyramid:static/jqGrid/js/jquery.jqGrid.min.js") }}'></script>
<script src='{{ request.static_url("stalker_pyramid:static/moment/moment.min.js") }}'></script>
<STYLE>
    .columnClass {
        background-color: #808080;
        color:white
    }
</STYLE>
<script>
    $.jgrid.defaults.autowidth = true;
    $.jgrid.defaults.responsive = true;
    $.jgrid.defaults.styleUI = 'Bootstrap';
</script>



<script type="text/javascript">
    var select_resource_cb_data=[''];
    var select_seq_cb_data=[''];
    var sum_of_approved_seconds = 0;
    var sum_of_approved_shots = 0;
    var sum_of_total_seconds = 0;
    var sum_of_total_shots = 0;
    var sum_of_total_assigned_shots = 0;
    var sum_of_total_assigned_number = 0;
    var shot_data = [];
    var seq_list = [];
    var grid_selector = "#grid-table";
    var pager_selector = "#grid-pager";

    function add_cb_data(array, filter_value, data){

        var c_array = array;
        var index = findArrayElement(c_array, "filter_name", filter_value);
        if (index === -1){
            var new_data = {
                'index':c_array.length,
                'filter_name': filter_value,
                'sum_of_approved_seconds': data['approved_seconds'],
                'sum_of_approved_shots': data['approved_shots'],
                'sum_of_total_seconds': data['total_seconds'],
                'sum_of_total_shots': data['total_shots'],
                'sum_of_total_assigned_shot_seconds': data['total_assigned_shot_seconds'],
                'sum_of_total_assigned_shot_number': data['total_assigned_shot_number']
            };
            c_array.push(new_data);
        }
        else{
            c_array[index]['sum_of_approved_seconds'] += data['approved_seconds'];
            c_array[index]['sum_of_approved_shots'] += data['approved_shots'];
            c_array[index]['sum_of_total_seconds'] += data['total_seconds'];
            c_array[index]['sum_of_total_shots'] += data['total_shots'];
            c_array[index]['sum_of_total_assigned_shot_seconds'] += data['total_assigned_shot_seconds'];
            c_array[index]['sum_of_total_assigned_shot_number'] += data['total_assigned_shot_number'];
        }
        return c_array;
    }

    function initiate_cb(field_name, data_array, op_template, func){
        var current_cb = $(field_name);
        current_cb.chosen({
            search_contains: true,
            enable_split_word_search: true
        });

        current_cb.find('option').remove();
        current_cb.append(op_template({'index':-1, 'filter_name':"ALL"}));
        for (var j=0; j < data_array.length; j++){
            current_cb.append(op_template(data_array[j]));
        }
        current_cb.trigger('liszt:updated');
        current_cb.on('change', func);
    }

    function setSequenceFilter(){
        var index = $(this).val();
        if(index === -1){
            jQuery(grid_selector).jqGrid('filterInput', "");
            setFooterInitialValue();
        }
        else{

            index = select_seq_cb_data.length-index;
            var cb_data = select_seq_cb_data[index];

            var seq_index = findArrayElement(seq_list, 'sequence_name', cb_data['filter_name']);
            var total_assigned_shot_seconds = seq_list[seq_index]["total_assigned_shot_seconds"].toFixed(2);
            var total_assigned_shot_number = seq_list[seq_index]["total_assigned_shot_number"].toFixed(2);

            var sum_of_approved_seconds = (cb_data.sum_of_approved_seconds).toFixed(2);
            var sum_of_total_seconds = (cb_data.sum_of_total_seconds).toFixed(2);
            var sum_of_approved_shots = (cb_data.sum_of_approved_shots).toFixed(2);
            var sum_of_total_shots = (cb_data.sum_of_total_shots).toFixed(2);

            var sum_of_approved_seconds_str = sum_of_approved_seconds+' s';
            var sum_of_total_seconds_str = sum_of_total_seconds+ ' s';
            var sum_of_approved_shots_str = sum_of_approved_shots +' shots';
            var sum_of_total_shots_str = sum_of_total_shots +' shots';
            var total_assigned_shot_seconds_str = total_assigned_shot_seconds +' s';
            var total_assigned_shot_number_str = total_assigned_shot_number +' shots';

            if(total_assigned_shot_seconds === sum_of_approved_seconds){
                sum_of_approved_seconds_str = '<span class="green"><b>'+sum_of_approved_seconds+' s </b><i class="icon-ok"></i></span>'
            }
            if(total_assigned_shot_seconds === sum_of_total_seconds){
                sum_of_total_seconds_str = '<span class="green"><b>'+sum_of_total_seconds+' s </b><i class="icon-ok"></i></span>'
            }
            if(total_assigned_shot_number === sum_of_approved_shots){
                sum_of_approved_shots_str = '<span class="green"><b>'+sum_of_approved_shots+' s </b><i class="icon-ok"></i></span>'
            }
            if(total_assigned_shot_number === sum_of_total_shots){
                sum_of_total_shots_str = '<span class="green"><b>'+sum_of_total_shots+' s </b><i class="icon-ok"></i></span>'
            }

            jQuery(grid_selector).jqGrid('filterInput', cb_data['filter_name']);
            jQuery(grid_selector).jqGrid("footerData", "set", {
                    resource_names: 'TOTAL',
                    approved_seconds: sum_of_approved_seconds_str,
                    total_seconds: sum_of_total_seconds_str,
                    approved_shots:sum_of_approved_shots_str,
                    total_shots:sum_of_total_shots_str,
                    total_assigned_shot_seconds:total_assigned_shot_seconds_str,
                    total_assigned_shot_number:total_assigned_shot_number_str
                }
            );
        }
    }

    function setStartDateFilter(){
        var index = $(this).val();
        if(index === -1){
            jQuery(grid_selector).jqGrid('filterInput', "");
            setFooterInitialValue();
        }
        else{

            index = select_resource_cb_data.length-index;
            var cb_data = select_resource_cb_data[index];

            jQuery(grid_selector).jqGrid('filterInput', cb_data['filter_name']);
            jQuery(grid_selector).jqGrid("footerData", "set",
                {
                    resource_names: 'TOTAL',
                    approved_seconds: (cb_data.sum_of_approved_seconds).toFixed(2)+' s ',
                    total_seconds: (cb_data.sum_of_total_seconds).toFixed(2)+' s ',
                    approved_shots:(cb_data.sum_of_approved_shots).toFixed(2) +' shots',
                    total_shots:(cb_data.sum_of_total_shots).toFixed(2) +' shots',
                    total_assigned_shot_seconds:'',
                    total_assigned_shot_number:''
                }
            );
        }
    }

    function loadShotTaskData(t_type, p_id){
        console.log('loadShotTaskData: '+t_type+' : ' +p_id);
        select_resource_cb_data=[''];
        select_seq_cb_data=[''];
        sum_of_approved_seconds = 0;
        sum_of_approved_shots = 0;
        sum_of_total_seconds = 0;
        sum_of_total_shots = 0;
        sum_of_total_assigned_shots = 0;
        sum_of_total_assigned_number = 0;
        shot_data = [];
        seq_list = [];

        var result_table = $('#result_table');
        result_table.find("#table_container").remove();
        result_table.find("#grid-pager").remove();

        $.getJSON('/entities/{{ entity.id }}/'+t_type+'/result?project_id='+p_id).then(function (data) {

            if (data.length>0){

                for (var i=0; i<data.length; i+=1){
                    var m;
                    var s_data = {};
                    // SEQUENCE NAME
                    s_data['sequence_name'] = data[i]['sequence_name'];

                    // SHOT NAMES
                    var shot_names = '';
                    for (m=0; m < data[i]['shot_names'].length; m+=1){
                        shot_names += data[i]['shot_names'][m]+'<br/>';
                    }
                    s_data['shot_names'] = shot_names;

                    s_data['resource_names']  = "";
                    for (m=0; m < data[i]['resource_ids'].length; m+=1){
                        var r_id = data[i]['resource_ids'][m];
                        s_data['resource_names']  += "<a href='/users/" + r_id + "/view'>" + get_user_name(r_id) + "</a><br/>";
                    }

                    // SECONDS
                    sum_of_approved_seconds += data[i]['approved_seconds'];
                    sum_of_approved_shots += data[i]['approved_shots'];
                    sum_of_total_seconds += data[i]['total_seconds'];
                    sum_of_total_shots += data[i]['total_shots'];

                    // TOTALS
                    s_data['approved_seconds'] = data[i]['approved_seconds'].toFixed(2);
                    s_data['approved_shots'] = data[i]['approved_shots'].toFixed(2);
                    s_data['total_seconds'] = data[i]['total_seconds'].toFixed(2);
                    s_data['total_shots'] = data[i]['total_shots'].toFixed(2);
                    s_data['total_assigned_shot_seconds'] = data[i]['total_assigned_shot_seconds'].toFixed(2);
                    s_data['total_assigned_shot_number'] = data[i]['shot_names'].length;
                    data[i]['total_assigned_shot_number'] = s_data['total_assigned_shot_number'];

                    // // DATE
                    // var start_date_ms = moment(data[i]['start_date']*1000);
                    // var week_day = start_date_ms.isoWeekday() - 1;
                    // var current_week = start_date_ms.isoWeek();
                    // start_date_ms = start_date_ms.subtract(week_day, 'day');
                    // s_data['start_date'] = start_date_ms.format('YYYY-MM-DD').toString();

                    shot_data.push(s_data);
                    select_resource_cb_data = add_cb_data(select_resource_cb_data, s_data['resource_names'], data[i]);
                    select_seq_cb_data = add_cb_data(select_seq_cb_data, s_data['sequence_name'].split("_")[0], data[i]);
                }
                /*---------------------------------------------*/
                /*WEEK CB*/
                select_resource_cb_data.reverse();
                select_resource_cb_data.pop();

                select_seq_cb_data.reverse();
                select_seq_cb_data.pop();

                {% raw %}
                    var option_template = doT.template('<option value={{=it.index}} >{{=it.filter_name}}</option>');
                {% endraw %}

                initiate_cb(
                    '#select_resource_cb',
                    select_resource_cb_data,
                    option_template,
                    setStartDateFilter
                );

                initiate_cb(
                    '#select_seq_cb',
                    select_seq_cb_data,
                    option_template,
                    setSequenceFilter
                );

                $.getJSON('/entities/{{ entity.id }}/' + t_type + '/assigned?project_id='+p_id).then(function (s_data) {
                    if (s_data.length>0){
                        seq_list = [];
                        for (var i=0; i < s_data.length; i+=1){

                            var seq_data = {};
                            var seq_name_split = s_data[i]["seq_name"].split("_");
                            seq_data['sequence_name'] = seq_name_split[0];

                            var shot_names = '';
                            for (var m=0; m < s_data[i]['shot_names'].length; m+=1){
                                shot_names += s_data[i]['shot_names'][m]+'<br/>';
                            }
                            seq_data['shot_names'] = shot_names;

                            seq_data['total_assigned_shot_seconds'] = s_data[i]['total_assigned_shot_seconds'];
                            seq_data['total_assigned_shot_number'] = s_data[i]['shot_names'].length;
                            sum_of_total_assigned_shots += seq_data['total_assigned_shot_seconds'];
                            sum_of_total_assigned_number += seq_data['total_assigned_shot_number'];

                            seq_list.push(seq_data);
                        }
                    }

                    result_table.append('<div id="table_container"><table id="grid-table"></table></div><div id="grid-pager"></div>');

                    jQuery(grid_selector).jqGrid({
                        data: shot_data,
                        datatype: "local",
                        colModel: [
                            // { label: 'Month', name: 'month', width: 150 },
                            // { label: 'Start Date', name: 'start_date', width: 150 },
                            { label: 'Sequence Name', name: 'sequence_name', key: true, width: 150 },
                            { label: 'Shot Name', name: 'shot_names', key: true, width: 200 },
                            { label: 'Resource Name', name: 'resource_names', key: true, width: 150 },
                            { label: 'Approved Seconds', name: 'approved_seconds', width: 150 },
                            { label: 'Total Seconds', name: 'total_seconds', width: 150 },
                            { label: 'Total Assinged Seconds', name: 'total_assigned_shot_seconds', width: 150, classes:'columnClass'},
                            { label: 'Approved Shots', name: 'approved_shots', width: 150 },
                            { label: 'Total Shots', name: 'total_shots', width: 150 },
                            { label: 'Total Assinged Shots', name: 'total_assigned_shot_number', width: 150, classes:'columnClass'}
                        ],
                        loadonce:true, // just for demo purpose
                        // width: 780,
                        height: 'auto',
                        rowNum: 10,
                        rowList:[10,25,50],
                        pager: pager_selector,
                        viewrecords: true,
                        // sortname: 'start_date',
                        sortname: 'sequence_name',
                        autowidth: true,
                        sortorder: "desc",
                        footerrow: true, // set a footer row
                        userDataOnFooter: true,
                        grouping: false,
                        loadComplete : function() {
                            // var $self = $(this);
                            // var total_seconds= $self.jqGrid('getCol', 'total_seconds', false, 'sum');
                            setFooterInitialValue();
                            setTimeout(function(){
                                updatePagerIcons(grid_selector);
                                $('#lui_grid-table').hide();

                            }, 0);

                        }
                    });
                    //navButtons
                    jQuery(grid_selector).jqGrid('navGrid',pager_selector,
                        { 	//navbar options
                            edit: false,
                            editicon : 'icon-pencil blue',
                            add: false,
                            addicon : 'icon-plus-sign purple',
                            del: false,
                            delicon : 'icon-trash red',
                            search: false,
                            searchicon : 'icon-search orange',
                            refresh: false,
                            refreshicon : 'icon-refresh green',
                            view: false,
                            viewicon : 'icon-zoom-in grey'
                        },

                        {
                            //search form
                            recreateForm: true,

                            multipleSearch: false
                            /**
                            multipleGroup:true,
                            showQuery: true
                            */
                    });
                });
            }
        });
    }

    function setFooterInitialValue(){
        var approved_minutes = (sum_of_approved_seconds/60).toFixed(2);
        var total_minutes = (sum_of_total_seconds/60).toFixed(2);
        var average_seconds = (sum_of_total_seconds/shot_data.length).toFixed(2);
        jQuery(grid_selector).jqGrid(
            "footerData", "set", {
                resource_names: 'TOTAL',
                approved_seconds: sum_of_approved_seconds.toFixed(2)+'s = '+approved_minutes+' m',
                total_seconds: sum_of_total_seconds.toFixed(2)+'s = '+total_minutes+' m',
                // start_date: 'AVERAGE',
                // shot_names: average_seconds + ' s',
                approved_shots:sum_of_approved_shots.toFixed(2) +' shots',
                total_shots:sum_of_total_shots.toFixed(2) +' shots',
                total_assigned_shot_seconds: (sum_of_total_assigned_shots).toFixed(2) +' s',
                total_assigned_shot_number: (sum_of_total_assigned_number).toFixed(2) +' shots'
            });

        // var total = total_minutes +' m';
        // var approved_total = approved_minutes +' m';
        // if(t_type != 'Animation'){
        // total = sum_of_total_shots.toFixed(2) +' shots';
        //     approved_total = sum_of_approved_shots.toFixed(2) +' shots';
        // }

        // $('#total').text(total);
        // $('#approved_total').text(approved_total);
        // $('#info_box').show();
    }
    function updatePagerIcons(table) {
        var replacement =
        {
            'ui-icon-seek-first' : 'icon-double-angle-left bigger-140',
            'ui-icon-seek-prev' : 'icon-angle-left bigger-140',
            'ui-icon-seek-next' : 'icon-angle-right bigger-140',
            'ui-icon-seek-end' : 'icon-double-angle-right bigger-140'
        };
        $('.ui-pg-table:not(.navtable) > tbody > tr > .ui-pg-button > .ui-icon').each(function(){
            var icon = $(this);
            var $class = $.trim(icon.attr('class').replace('ui-icon', ''));

            if($class in replacement) icon.attr('class', 'ui-icon '+replacement[$class]);
        })
    }

    $(document).ready(function () {
        var project_cb = $('#project_cb');
        var project_id = localStorage.getItem("result_project_id");
        console.log("project_id: " + project_id);

        var task_type = $('#task_type');
        var task_type_str = localStorage.getItem("result_task_type");
        if (task_type_str){
            task_type.val(task_type_str)
        }
        else{
            task_type_str = task_type.val()
        }

        {% if entity.entity_type != 'Project' %}
            {% raw %}
                var option_template = doT.template('<option value={{=it.id}}>{{=it.name}}</option>');
            {% endraw %}
            project_cb.chosen({
                search_contains: true,
                enable_split_word_search: true
            });

            var projects_url  = '/projects/'
            {% if entity.entity_type == 'User' %}
                projects_url = '/entities/{{ entity.id }}/projects/';
            {% endif %}

            $.getJSON(projects_url).then(function(data){
                project_cb.find('option').remove();
                var data_count = data.length;
                for (var i=0; i < data_count; i++){
                    project_cb.append(option_template(data[i]));
                }

                if (project_id){
                    project_cb.val(project_id)
                }
                else{
                    project_id = project_cb.val();
                }
                project_cb.trigger('liszt:updated');

                loadShotTaskData(task_type_str, project_id);
                project_cb.on('change', function () {
                    // task_type_str = task_type.val();
                    project_id = $(this).val();
                    localStorage.setItem("result_project_id", project_id);
                    loadShotTaskData(task_type_str, project_id);
                });
            });
        {% else %}
            project_cb.hide();
            project_id = "{{ entity.id }}";
            loadShotTaskData(task_type_str, project_id);
        {% endif %}

        task_type.on('change', function () {
            task_type_str = $(this).val();
            localStorage.setItem("result_task_type", task_type_str);
            loadShotTaskData(task_type_str, project_id);
        });

    });
</script>
