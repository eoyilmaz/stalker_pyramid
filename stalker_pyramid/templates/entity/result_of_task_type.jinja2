<style type="text/css">
        .jqplot-target {
            margin: 20px;
            height: 400px;
            width: 1200px;
            color: #dddddd;
        }

        .jqplot-highlighter-tooltip {
            background-color: rgba(57,57,57, 0.9);
            padding: 7px;
            color: #dddddd;
        }
</style>
<div class="row-fluid">
    <div class="span9 alert alert-info">
        <button type="button" class="close" data-dismiss="alert">
            <i class="icon-remove"></i>
        </button>
        Please select a task type to display the results.
        <br />
    </div>
</div>
<div class="row-fluid">
    <div class="span2">
        <div class="btn-toolbar">
            <div class="input-prepend" style="height: 30px;
                                    margin-bottom: 0px;
                                    margin-left: 0px;
                                    margin-right: 7px;
                                    ">
                <select id='task_type' class='input-block-level'>
                        <option value="Animation">Animation</option>
                        <option value="Lighting">Lighting</option>
                        <option value="Comp">Comp</option>
                        <option value="Camera">Camera</option>
                        <option value="Scene Assembly">Scene Assembly</option>
                        <option value="Shot Previs">Shot Previs</option>
                </select>
            </div>
        </div>
    </div>
</div>
<div class="row-fluid">
    <div class="span9 infobox-container hide" id="info_box">
        <div class="infobox infobox-blue2">
            <div class="infobox-icon">
                <i class="icon-dashboard"></i>
            </div>
            <div class="infobox-data">
                <span class="infobox-data-number" id="average_for_last_six_week"></span>
                <div class="infobox-content">Average for last 6 w</div>
            </div>
        </div>
        <div class="infobox infobox-green">
            <div class="infobox-icon">
                <i class="icon-check"></i>
            </div>
            <div class="infobox-data">
                <span class="infobox-data-number" id="approved_total"></span>
                <div class="infobox-content">Approved Total</div>
            </div>
        </div>
        <div class="infobox infobox-orange  ">
            <div class="infobox-icon">
                <i class="icon-cogs"></i>
            </div>

            <div class="infobox-data">
                <span class="infobox-data-number" id="total"></span>
                <div class="infobox-content">Total</div>
            </div>
        </div>
    </div>
</div>

<div class="space-20"></div>

<div class="row-fluid">
    <div class="span10" id="result_chart">
    </div>
</div>
<div class="space-20"></div>
<div class="row-fluid">
    <div class="span12" id="result_table">
    </div>
</div>

<script class="include" type="text/javascript"
            src='{{ request.static_url("stalker_pyramid:static/jqPlot/jquery.jqplot.min.js") }}'></script>
<!-- End Don't touch this! -->

<!-- Additional plugins go here -->

<script class="include" type="text/javascript"
        src='{{ request.static_url("stalker_pyramid:static/jqPlot/plugins/jqplot.categoryAxisRenderer.min.js") }}'></script>
<script class="include" type="text/javascript"
        src='{{ request.static_url("stalker_pyramid:static/jqPlot/plugins/jqplot.barRenderer.min.js") }}'></script>
<script class="include" type="text/javascript"
        src='{{ request.static_url("stalker_pyramid:static/jqPlot/plugins/jqplot.dateAxisRenderer.min.js") }}'></script>
<script class="include" type="text/javascript"
        src='{{ request.static_url("stalker_pyramid:static/jqPlot/plugins/jqplot.logAxisRenderer.min.js") }}'></script>
<script class="include" type="text/javascript"
        src='{{ request.static_url("stalker_pyramid:static/jqPlot/plugins/jqplot.canvasAxisTickRenderer.min.js") }}'></script>
<script class="include" type="text/javascript"
        src='{{ request.static_url("stalker_pyramid:static/jqPlot/plugins/jqplot.canvasTextRenderer.min.js") }}'></script>
<script class="include" type="text/javascript"
        src='{{ request.static_url("stalker_pyramid:static/jqPlot/plugins/jqplot.pointLabels.min.js") }}'></script>
<script class="include" type="text/javascript"
        src='{{ request.static_url("stalker_pyramid:static/jqPlot/plugins/jqplot.highlighter.min.js") }}'></script>
<script class="include" type="text/javascript"
        src='{{ request.static_url("stalker_pyramid:static/jqPlot/plugins/jqplot.cursor.min.js") }}'></script>
<script src='{{ request.static_url("stalker_pyramid:static/jqGrid/js/i18n/grid.locale-en.js") }}'></script>
<script src='{{ request.static_url("stalker_pyramid:static/jqGrid/js/jquery.jqGrid.min.js") }}'></script>




<script type="text/javascript">
    function loadShotTaskData(t_type){
        console.log('loadShotTaskData: '+t_type);

        var result_chart = $('#result_chart');
        result_chart.find("#chart_shot").remove();

        var result_table = $('#result_table');
        result_table.find("#table_container").remove();
        result_table.find("#grid-pager").remove();

        $('#info_box').hide();

        $.getJSON('/entities/{{ entity.id }}/'+t_type+'/result').then(function (data) {

            if (data.length>0){
                var shot_data = data;

                result_chart.append('<div id="chart_shot" style="height:500px; margin-left: 0px; background: rgb(57,57,57)"></div>');

                var approved_seconds = 0;
                var approved_shots = 0;
                var total_seconds = 0;
                var total_shots = 0;
                var graph_val_type = 'Seconds';
                var max_val = 0;
                var min_val = 0;
                var weekly_shot_data = [];
                var weekly_approved_shot_data = [];
                for (var i=0; i<shot_data.length; i+=1){
                    var shot_names = '';
                    for (var m=0; m<shot_data[i]['shot_names'].length; m+=1){
                        shot_names += shot_data[i]['shot_names'][m]+'<br/>';
                    }
                    shot_data[i]['shot_names'] = shot_names;
                    var resource_ids = '';
                    for (var m=0; m<shot_data[i]['resource_ids'].length; m+=1){
                        resource_ids += "<a href='/users/"+shot_data[i]['resource_ids'][m]+"/view'>"+get_user_name(shot_data[i]['resource_ids'][m])+"</a><br/>";
                    }
                    shot_data[i]['resource_ids'] = resource_ids;
{#                    shot_data[i]['month'] = new Date(data[i]['start_date'] * 1000).format('yyyy-mm').toString();#}
                    shot_data[i]['start_date'] = new Date(data[i]['start_date'] * 1000).format('yyyy-mm-dd').toString();

                    approved_seconds += shot_data[i]['approved_seconds'];
                    approved_shots += shot_data[i]['approved_shots'];
                    total_seconds += shot_data[i]['total_seconds'];
                    total_shots += shot_data[i]['total_shots'];

                    shot_data[i]['approved_seconds'] = shot_data[i]['approved_seconds'].toFixed(2);
                    shot_data[i]['approved_shots'] = shot_data[i]['approved_shots'].toFixed(2);
                    shot_data[i]['total_seconds'] = shot_data[i]['total_seconds'].toFixed(2);
                    shot_data[i]['total_shots'] = shot_data[i]['total_shots'].toFixed(2);

                    var graph1_val = shot_data[i]['total_seconds'];
                    var graph2_val = shot_data[i]['approved_seconds'];
                    if(t_type!='Animation'){
                        graph1_val = shot_data[i]['total_shots'];
                        graph2_val = shot_data[i]['approved_shots'];
                        graph_val_type = "Shots";
                    }

                    weekly_shot_data.push([shot_data[i]['start_date'], graph1_val]);
                    weekly_approved_shot_data.push([shot_data[i]['start_date'], graph2_val]);
                    max_val = parseFloat(graph1_val)>max_val?parseFloat(graph1_val):max_val;
                    min_val = parseFloat(graph1_val)<min_val?parseFloat(graph1_val):min_val;
                }


                $.jqplot('chart_shot', [weekly_shot_data, weekly_approved_shot_data], {
                            seriesColors: ["rgba(78, 135, 194, 0.7)", "#82af6f"],
                            title: {
                                text:'Weekly '+t_type+' '+graph_val_type,
                                textColor: '#dddddd'
                            },
                            highlighter: {
                                show: true,
                                sizeAdjust: 10
                            },
                            grid: {
                                background: 'rgba(57,57,57,0.5)',
                                drawBorder: false,
                                shadow: false,
                                gridLineColor: '#666666',
                                gridLineWidth: 2
                            },
                            axes:{
                               xaxis: {
                                    renderer: $.jqplot.DateAxisRenderer,
                                    tickRenderer: $.jqplot.CanvasAxisTickRenderer,
                                    tickOptions: {
                                        formatString: "%d %b",
                                        angle: -30,
                                        textColor: '#dddddd'
                                    },

                                    tickInterval: "1 week",
                                    drawMajorGridlines: false
                               },
                               yaxis: {
                                    renderer: $.jqplot.LinearAxisRenderer,
                                    pad: 0,
                                    rendererOptions: {
                                        minorTicks: 1
                                    },
                                    min:min_val,
                                    max:max_val,
                                    tickOptions: {
                                        formatString: "  %d "+graph_val_type,
                                        showMark: false
                                    },
                                    tickInterval: 5
                               }
                            },
                            seriesDefaults: {
                                showMarker: true
                            }
                });

                result_table.append('<div id="table_container"><table id="grid-table"></table></div><div id="grid-pager"></div>');

                var grid_selector = "#grid-table";
                var pager_selector = "#grid-pager";

                jQuery(grid_selector).jqGrid({
                    data: shot_data,
                    datatype: "local",
                    colModel: [
{#                        { label: 'Month', name: 'month', width: 150 },#}
                        { label: 'Start Date', name: 'start_date', width: 150 },
                        { label: 'Shot Name', name: 'shot_names', key: true, width: 200 },
                        { label: 'Resource Name', name: 'resource_ids', key: true, width: 250 },
                        { label: 'Approved Seconds', name: 'approved_seconds', width: 150 },
                        { label: 'Total Seconds', name: 'total_seconds', width: 150 },
                        { label: 'Approved Shots', name: 'approved_shots', width: 150 },
                        { label: 'Total Shots', name: 'total_shots', width: 150 }
                    ],
                    loadonce:true, // just for demo purpose
{#                    width: 780,#}
                    height: 'auto',
                    rowNum: 10,
                    rowList:[10,25,50],
                    sortname: 'start_date',
                    sortorder: "desc",
                    pager: pager_selector,
                    viewrecords: true,
                    footerrow: true, // set a footer row
                    userDataOnFooter: true,
                    grouping: false,
                    loadComplete : function() {
                        var $self = $(this);
{#                        var total_seconds= $self.jqGrid('getCol', 'total_seconds', false, 'sum');#}
                        var approved_minutes = (approved_seconds/60).toFixed(2);
                        var total_minutes = (total_seconds/60).toFixed(2);
                        var average_seconds = (total_seconds/shot_data.length).toFixed(2);
                        $self.jqGrid("footerData", "set", {resource_ids: 'TOTAL',
                                                           approved_seconds: approved_seconds.toFixed(2)+'s = '+approved_minutes+' m',
                                                           total_seconds: total_seconds.toFixed(2)+'s = '+total_minutes+' m',
                                                           start_date: 'AVERAGE',
                                                           shot_names: average_seconds+' s',
                                                           approved_shots:approved_shots.toFixed(2) +' shots',
                                                           total_shots:total_shots.toFixed(2) +' shots'
                                                           });


                        var total_for_last_six_week = 0;
                        var start_week = weekly_shot_data.length-6<0?0:weekly_shot_data.length-6;

                        for (var i=start_week;i<weekly_shot_data.length;i++){
                            console.log(weekly_shot_data[i][1]);
                            total_for_last_six_week += parseFloat(weekly_shot_data[i][1]);
                            console.log(total_for_last_six_week);
                        }
                        var average_for_last_six_week = (total_for_last_six_week/6).toFixed(2);

                        var total = total_minutes +' m';
                        var approved_total = approved_minutes +' m';
                        if(t_type!='Animation'){
                            total = total_shots.toFixed(2) +' shots';
                            approved_total = approved_shots.toFixed(2) +' shots';
                        }

                        $('#average_for_last_six_week').text(average_for_last_six_week);
                        $('#total').text(total);
                        $('#approved_total').text(approved_total);
                        $('#info_box').show();

                        setTimeout(function(){
                            updatePagerIcons(table);
                            $('#lui_grid-table').hide();
                        }, 0);

                    }
                });
                //navButtons
                jQuery(grid_selector).jqGrid('navGrid',pager_selector,
                    { 	//navbar options
                        edit: false,
                        editicon : 'icon-pencil blue',
                        add: false,
                        addicon : 'icon-plus-sign purple',
                        del: false,
                        delicon : 'icon-trash red',
                        search: false,
                        searchicon : 'icon-search orange',
                        refresh: false,
                        refreshicon : 'icon-refresh green',
                        view: false,
                        viewicon : 'icon-zoom-in grey'
                    },

                    {
                        //search form
                        recreateForm: true,
                        afterShowSearch: function(e){
                            var form = $(e[0]);
                            form.closest('.ui-jqdialog').find('.ui-jqdialog-title').wrap('<div class="widget-header" />')
                            style_search_form(form);
                        },
                        afterRedraw: function(){
                            style_search_filters($(this));
                        }
                        ,
                        multipleSearch: false
                        /**
                        multipleGroup:true,
                        showQuery: true
                        */
                });
            }
        });
    }
    function updatePagerIcons(table) {
        var replacement =
        {
            'ui-icon-seek-first' : 'icon-double-angle-left bigger-140',
            'ui-icon-seek-prev' : 'icon-angle-left bigger-140',
            'ui-icon-seek-next' : 'icon-angle-right bigger-140',
            'ui-icon-seek-end' : 'icon-double-angle-right bigger-140'
        };
        $('.ui-pg-table:not(.navtable) > tbody > tr > .ui-pg-button > .ui-icon').each(function(){
            var icon = $(this);
            var $class = $.trim(icon.attr('class').replace('ui-icon', ''));

            if($class in replacement) icon.attr('class', 'ui-icon '+replacement[$class]);
        })
    }
    $(document).ready(function () {
        $.jqplot._noToImageButton = true;
        $.jqplot.config.enablePlugins = true;

        var task_type = $('#task_type');
        var task_type_str = task_type.val();
        loadShotTaskData(task_type_str);

        task_type.on('change', function () {

            task_type_str = $(this).val();
            loadShotTaskData(task_type_str);
        });
    });
</script>
